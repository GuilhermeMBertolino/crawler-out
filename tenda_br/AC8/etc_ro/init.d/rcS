#!/bin/sh

disk="root root 755"

mkDev() {    
    # usage: mkDev name [bcu] major minor owner group mode
    if [ ! -e $1 ]
    then
        mknod $1 $2 $3 $4
        chown $5:$6 $1
        chmod $7 $1
    fi
}

PATH=/sbin:/bin:/usr/sbin:/usr/bin/
export PATH

mount -t proc none /proc
mount -t sysfs none /sys
mount -t debugfs none /sys/kernel/debug

mount -t ramfs none /var/
mount -t tmpfs none /data/


mkdir -p /var/etc
mkdir -p /var/media
mkdir -p /var/etc/iproute
mkdir -p /var/run
mkdir -p /etc/udhcpc
mkdir -p /var/debug

cp -rf /etc_ro/eth_name_conf.txt /var/
cp -rf /etc_ro/* /etc/
ln /webroot_ro/ -s /var/webroot
umount -f /tmp
mount -t tmpfs none /tmp -o size=3M
mount -a

mount -t ramfs /dev
mkdir /dev/pts
mount -t devpts devpts /dev/pts
/sbin/mdev -s
mkdir /var/run

cd /dev
mkDev    console    c    5    1    $disk
mkDev    ttyS0    c    204    64    $disk
mkDev    urandom    c    1      9   $disk
cd /

/sbin/udevd &
cnsl_safe &

echo '/sbin/mdev' > /proc/sys/kernel/hotplug
echo 'sd[a-z][0-9] 0:0 0660 @/usr/sbin/usb_up.sh $MDEV $DEVPATH' >> /etc/mdev.conf
echo '-sd[a-z] 0:0 0660 $/usr/sbin/usb_down.sh $MDEV $DEVPATH'>> /etc/mdev.conf
echo 'sd[a-z] 0:0 0660 @/usr/sbin/usb_up.sh $MDEV $DEVPATH'>> /etc/mdev.conf
echo '.* 0:0 0660 */usr/sbin/IppPrint.sh $ACTION $INTERFACE'>> /etc/mdev.conf

mkdir -p /var/ppp
##SDK 有线无线，内核模块
insmod /lib/modules/sfax8_factory_read.ko
insmod /lib/modules/sfax8_netlink.ko
insmod /lib/modules/sfhnat.ko
insmod /lib/modules/sf_eswitch.ko
insmod /lib/modules/sgmac.ko


#查看射频参数是否存在，若不存在则导入默认的射频参数
RFDATA_PATH="/lib/firmware/default_factory.bin"
[ -f "$RFDATA_PATH" ] && {
    ver=`/bin/flash read factory 2048 2 -c`
    if [ "$?" -eq "0" ]; then
        ver_list="XO V1 V2 V3 V4"

        found=
        for v in $ver_list
        do
            if [ "$ver" == "$v" ]; then
                found=1
                break
            fi
        done

        if [ "$found" != "1" ]; then
            echo "rf data is blank, set default value"
            /bin/flash write factory $RFDATA_PATH
        fi
    fi
}

#加载公共模块
#加载无线模块
insmod /lib/modules/compat.ko
insmod /lib/modules/startcore.ko
insmod /lib/modules/sf16a18_rf.ko thermal_on=1
insmod /lib/modules/cfg80211.ko

#insmod ko for 2.4G
modparams="
is_hb=0 ht_on=1 vht_on=1 
he_on=0 ldpc_on=1 stbc_on=1 
phycfg=0 uapsd_timeout=0 ap_uapsd_on=0 sgi=1 
sgi80=1 use_2040=1 nss=2 amsdu_rx_max=1 bfmee=0 
bfmer=0 mesh=0 murx=0 mutx=0 mutx_on=1 use_80=1 
custregd=0 lp_clk_ppm=1000 addr_maskall=0 
not_send_null=0 ps_on=1 tx_lft=100 tdls=1 
txpower_lvl=2 uf=0 ampdu_max_cnt=32 
independent_antenna_control=0 rts_cts_change=2 
ant_div=1 tx_queue_num=5
"
insmod /lib/modules/sf16a18_fmac.ko force_mod_name=sf16a18_lb_fmac $modparams

#insmod ko for 5G
modparams="
is_hb=1 ht_on=1 vht_on=1 he_on=0 ldpc_on=1 
stbc_on=1 phycfg=0 uapsd_timeout=0 
ap_uapsd_on=0 sgi=1 sgi80=1 use_2040=1 
nss=2 amsdu_rx_max=1 bfmee=0 bfmer=0 mesh=0 
murx=0 mutx=0 mutx_on=1 use_80=1 custregd=0 
lp_clk_ppm=1000 addr_maskall=0 not_send_null=0 
ps_on=1 tx_lft=100 tdls=1 txpower_lvl=2 uf=0 
ampdu_max_cnt=32 independent_antenna_control=0 
rts_cts_change=2 ant_div=1 tx_queue_num=5
"
insmod /lib/modules/sf16a18_fmac.ko force_mod_name=sf16a18_hb_fmac $modparams


#NMTD=`cat /proc/mtd | grep CFG | cut -b 4`
#touch /data/.kernel_nvram.setting

#驱动需要CFG分区的无线射频参数，在驱动起来前先将射频参数从cfg分区读到文件中，前8个字节为crc码，要跳过。拷贝64K，忽略开头8byte
#dd if=/dev/mtd$NMTD of=/etc/wlan_rfdata count=8192 ibs=8 skip=1

# CFG分区为空时，拷贝默认射频参数，避免无线接口无法启动
#blank=`grep model /etc/wlan_rfdata && echo 0 || echo 1`
#if [ $blank -eq 1 ] ; then
#	echo "apmib is blank, copy default apmib now"
#	dd if=/etc/wlan/.kernel_nvram.setting of=/etc/wlan_rfdata
#fi
#nvram kernelset /etc/wlan_rfdata
#nvram kcommit
#insmod /lib/modules/wl.ko intf_name=wl%d instance_base=0

#wl模块加载完成后，使用wlaffinity脚本对wl0-kthrd及wl1-kthrd内核线程优先级及archer等参数进行配置
#wlaffinity auto
insmod /lib/modules/gpio.ko
/etc/gpio_conf
insmod /lib/modules/phy_check.ko
#insmod /lib/modules/wifibase.ko

# 加载KM内核模块
insmod /lib/modules/fastnat.ko
insmod /lib/modules/kmbase.ko
#insmod /lib/modules/eventscenter.ko
insmod /lib/modules/bm.ko
insmod /lib/modules/mac_group.ko
insmod /lib/modules/mac_filter.ko
insmod /lib/modules/url_filter.ko
insmod /lib/modules/privilege_ip.ko
insmod /lib/modules/dnsredirect.ko
insmod /lib/modules/ddos_ip_fence.ko
insmod /lib/modules/autodiscover.ko
insmod /lib/modules/nos.ko
insmod /lib/modules/wifi_led.ko
insmod /lib/modules/fast_l2.ko

#ifconfig bcmsw up


echo enable 1 > /proc/net/skb_pool
echo enable 2 > /proc/net/skb_pool
echo enable 3 > /proc/net/skb_pool
echo enable 4 > /proc/net/skb_pool

echo "add;Wire:vlan2" > /proc/km/wan_interface

#打开硬件加速开关
iptables -A FORWARD -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j FLOWOFFLOAD --hw

#解决tcp跑流跑不通的问题
#echo 1 > /proc/sys/net/netfilter/nf_conntrack_tcp_be_liberal

#打开fast_l2的桥加速功能
echo 1 > /proc/fast_l2/br_enable

# 创建设备文件
#make_static_devnodes.sh

#关闭Archer流量管理特性，该特性主要是为了解决当外部switch口或无线以大于1Gbps的突发速率往6755方案wan或lan打流时存在的大量丢包问题，由于开启sysport_tm会影响到Smartbit及IxChariot等性能，是用户或其他厂商较关心的性能，但突发流量大于1Gbps场景在家用领域产品基本不存在，故在此处关闭处理
#archer sysport_tm disable

# 配置最大缓存ARP表项数据长度大小，避免在LAN 侧 IP不断变化下，不断进行ARP请求，导致系统异常
echo 10000 > /proc/sys/net/ipv4/neigh/default/unres_qlen_bytes

#开启喂狗程序
wdtctl -d -t 30 start


monitor &

#拉起温控模块
temp &

#ubusd &
