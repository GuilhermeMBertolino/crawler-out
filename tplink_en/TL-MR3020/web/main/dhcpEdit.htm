<script language="javascript" type="text/javascript">
var lanIPv4Cfg;
var lanIgmpCfg;
var dhcpCfg;
var subMask = ["255.255.255.0", "255.255.0.0", "255.0.0.0", n_str.dhcp.t_custom];

var oldLanIp;
var oldLanMask;
var oldSmartIp;
var sysMode;
function setDhcpCfgDisable(enable)
{

	$("#lanIPAddr").tpAddress("disabled", enable);
	$("#lanIPSubMask").prop("disabled", enable).tpSelect({refresh:1});
	$("#lanIGMPEn").prop("disabled", enable).data('tpCheckbox').refresh();
	$('#snoopModeAllow').prop("disabled", enable);
	$('#snoopModeBlock').prop("disabled", enable);
	
	$("#secIp_en").prop("disabled", enable).data('tpCheckbox').refresh();
	$("#secIpCont").prop("disabled", enable);
	$("#secIp").tpAddress("disabled", enable);
	$("#secMask").tpAddress("disabled", enable);

	$("#dhcpEn").prop("disabled", enable).data('tpCheckbox').refresh();
	$("#dhcpRelay").prop("disabled", enable);
	$("#ip1").tpAddress("disabled", enable);
	$("#ip2").tpAddress("disabled", enable);
	$("#lease").prop("disabled", enable);
	$("#gateway").tpAddress("disabled", enable);

	$("#domain").prop("disabled", enable);
	$("#dnsserver1").tpAddress("disabled", enable);
	$("#dnsserver2").tpAddress("disabled", enable);
	$("#rmtSrv").prop("disabled", enable);

}

function initEdit(brList, ix) {

    $.loadPage("ipv6Edit", "lan6.htm");

    lanIPv4Cfg = $.act(ACT_GS, LAN_IP_INTF, null, brList[ix].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "X_TP_MACAddress"]);
    lanIgmpCfg = $.act(ACT_GET, LAN_IGMP_SNOOP, brList[ix].__stack, null, ["enabled"]);
    dhcpCfg = $.act(ACT_GET, LAN_HOST_CFG, brList[ix].__stack, null, null);
	sysMode = $.act(ACT_GET, SYS_MODE, null, null);

    if (!$.exe()) {
        $("#lanMacAddress").prop("value", lanIPv4Cfg[0].X_TP_MACAddress.replace(/\:/g, '-'));

        oldLanIp = lanIPv4Cfg[0].IPInterfaceIPAddress ? lanIPv4Cfg[0].IPInterfaceIPAddress : "0.0.0.0";
        $("#lanIPAddr").tpAddress('val', oldLanIp);
		
		/*add by xieping for ap Smart IP*/
		if($.sysMode == "AP")
		{
			$("#lanIPAddrType option[value=" + dhcpCfg.X_TP_DHCPAuto + "]").prop("selected", "selected");			
			setDhcpCfgDisable(dhcpCfg.X_TP_DHCPAuto);
			oldSmartIp = dhcpCfg.X_TP_DHCPAuto;
			$("#lanIPAddrType_div").removeClass("nd");			
		}
		else
			$("#lanIPAddrType_div").hide();
		/*add end*/

        oldLanMask = lanIPv4Cfg[0].IPInterfaceSubnetMask ? lanIPv4Cfg[0].IPInterfaceSubnetMask : "0.0.0.0";

        for (var ix = 0; ix < subMask.length; ix++) {
            if (subMask[ix] == oldLanMask) {
                break;
            }
        }

        if (ix >= subMask.length) {
            $("#lanIPSubMask option[value=" + (ix - 1) + "]").prop("selected", "selected");
            $("#lanIPSubMaskCustomInput").tpAddress('val', oldLanMask);
			/*add by xieping to fix bug164546*/
			if(subMask[ix-1] == n_str.dhcp.t_custom)
				$("#lanIPSubMaskCustom").css('display', 'inline-block');
        }

        $("#lanIPSubMask option[value=" + ix + "]").prop("selected", "selected");

        $("#lanIGMPEn").prop("checked", lanIgmpCfg.enabled == 1 ? true : false);

	if (INCLUDE_LTEWAN && sysMode.mode == "LTE") {
		$("#igmpSnooping").addClass("nd");
	}

        //secondIp
        if (lanIPv4Cfg.length == 1) {
            $("#secIp_en").prop("checked", false);
            $("#secIpCont").addClass("nd");
        } else if (lanIPv4Cfg.length == 2) {
            $("#secIp_en").prop("checked", true);
            $("#secIpCont").removeClass("nd");
            $("#secIp").tpAddress('val', lanIPv4Cfg[1].IPInterfaceIPAddress == "" ? "0.0.0.0" : lanIPv4Cfg[1].IPInterfaceIPAddress);
            $("#secMask").tpAddress('val', lanIPv4Cfg[1].IPInterfaceSubnetMask == "" ? "0.0.0.0" : lanIPv4Cfg[1].IPInterfaceSubnetMask);
        }

        if (dhcpCfg.DHCPServerEnable == 1) {
            $("#dhcpEn").prop("checked", true);
            $("#dhcpCont").removeClass("nd");
        } else {
            $("#dhcpEn").prop("checked", false);
            $("#dhcpCont").addClass("nd");
        }
        $("#dhcpRelay").prop("checked", dhcpCfg.DHCPRelay == 1 ? true : false);
        $("#ip1").tpAddress('val', (dhcpCfg.minAddress) ? dhcpCfg.minAddress : ("0.0.0.0"));
        $("#ip2").tpAddress('val', (dhcpCfg.maxAddress) ? dhcpCfg.maxAddress : ("0.0.0.0"));
		if ($.sysMode == "AP") {
			$("#t_leaseval_ap").removeClass("nd");
		} else {
			$("#t_leaseval").removeClass("nd");
		}
        $("#lease").val((dhcpCfg.DHCPLeaseTime == "") ? 1440 : (dhcpCfg.DHCPLeaseTime / 60));
        $("#gateway").tpAddress('val', (dhcpCfg.IPRouters == "") ? "0.0.0.0" : dhcpCfg.IPRouters);
        $("#domain").val((dhcpCfg.domainName == "") ? "" : dhcpCfg.domainName);
        $("#dnsserver1").tpAddress('val', (dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[0]);
        $("#dnsserver2").tpAddress('val', (dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[1]);
        $("#rmtSrv").tpAddress('val', dhcpCfg.X_TP_DhcpRelayServer);
    }
}


function clickIPv4Save() {
    var ipv4Settings = {};
    var igmpSettings = {};
    var dhcpSettings = {};
    var secIpSettings = {};

    if (checkParam() == false) {
        return false;
    }

    var bReboot = false;
    var tmpLanIp = $("#lanIPAddr").tpAddress('val') == "" ? "0.0.0.0" : $.ip2ip($("#lanIPAddr").tpAddress('val'));

    var tmpLanMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").tpAddress('val') : $("select#lanIPSubMask").data("text");
    tmpLanMask = $.ip2ip(tmpLanMask);

    if (($.ip2num(oldLanIp) != $.ip2num(tmpLanIp) || $.ip2num(oldLanMask) != $.ip2num(tmpLanMask))) {
        bReboot = true;
    }

    if (INCLUDE_LTEWAN && sysMode.mode == "LTE") {
	igmpSettings.enabled = 0;
    } else {
        igmpSettings.enabled = $("#lanIGMPEn").prop('data-checked') == true ? 1 : 0;
    }

    if ($("#dhcpEn").prop("data-checked") == true) {
        dhcpSettings.DHCPServerEnable = 1;
        dhcpSettings.DHCPRelay = $("#dhcpRelay").prop("checked") == true ? 1 : 0;
    } else {
        dhcpSettings.DHCPServerEnable = 0;
    }

    if (dhcpSettings.DHCPServerEnable == 1 && dhcpSettings.DHCPRelay == 1) {
        dhcpSettings.X_TP_DhcpRelayServer = $.ip2ip($("#rmtSrv").tpAddress('val'));
    } else if (dhcpSettings.DHCPServerEnable == 1) {
        dhcpSettings.minAddress = $.ip2ip($("#ip1").tpAddress('val'));
        dhcpSettings.maxAddress = $.ip2ip($("#ip2").tpAddress('val'));

        dhcpSettings.IPRouters = $.ip2ip($("#gateway").tpAddress('val'));
        dhcpSettings.DHCPLeaseTime = $("#lease").val() * 60;
        dhcpSettings.domainName = $("#domain").val();

        dhcpSettings.DNSServers = ($("#dnsserver1").tpAddress('val') == "" ? "0.0.0.0" : $.ip2ip($("#dnsserver1").tpAddress('val'))) + "," +
            ($("#dnsserver2").tpAddress('val') == "" ? "0.0.0.0" : $.ip2ip($("#dnsserver2").tpAddress('val')));

    }

    //secIp
    secIpSettings.IPInterfaceIPAddress = $("#secIp").tpAddress('val') == "" ? "0.0.0.0" : $.ip2ip($("#secIp").tpAddress('val'));
    secIpSettings.IPInterfaceSubnetMask = $("#secMask").tpAddress('val') == "" ? "0.0.0.0" : $.ip2ip($("#secMask").tpAddress('val'));

    var accUrl = document.location.href.split('/')[2];
    var accIp = accUrl.split(':')[0];
    var accPort = 80;
    if (accUrl.split(':').length > 1) {
        accPort = accUrl.split(':')[1];
    }

    var bSecIpDiff = false;

    if ($("#secIp_en").prop("checked") == true) {
        if (lanIPv4Cfg.length == 1) {
            var pStk = lanIPv4Cfg[0].__stack.split(",")[0] + ",0,0,0,0,0";
            $.act(ACT_ADD, LAN_IP_INTF, null, pStk, secIpSettings);
        } else if (lanIPv4Cfg.length == 2) {
            $.act(ACT_SET, LAN_IP_INTF, lanIPv4Cfg[1].__stack, null, secIpSettings);
            var oldSecIp = lanIPv4Cfg[1].IPInterfaceIPAddress;
            var curSecIp = $.ip2ip($("#secIp").tpAddress('val'));

            if (curSecIp != oldSecIp && accIp == oldSecIp) {
                bSecIpDiff = true;
            }
        }
    } else if (lanIPv4Cfg.length == 2) {
        $.act(ACT_DEL, LAN_IP_INTF, lanIPv4Cfg[1].__stack, null);
    }
	
	/*add by xieping for ap Smart IP*/
	if($.sysMode == "AP")
	{	
		dhcpSettings.X_TP_DHCPAuto = $("select#lanIPAddrType").data('value');
		if(oldSmartIp != dhcpSettings.X_TP_DHCPAuto)
			bReboot = true;
	}
		

    if (!bReboot) {
        $.act(ACT_SET, LAN_IGMP_SNOOP, lanIgmpCfg.__stack, null, igmpSettings);
        $.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, dhcpSettings);

        if (!$.exe()) {
            if (bSecIpDiff) {
                $.refresh(curSecIp, accPort);
            } else {
                if (accIp != tmpLanIp) {
                    $.refresh(tmpLanIp, accPort);
                } else {
                    $.removeLoading();
                    $.reload();
                }
            }
        }
    } else {
        $.confirm(c_str.lan_reboot, goExcute, goBack);
    }

    function goExcute() {
        ipv4Settings.IPInterfaceIPAddress = tmpLanIp;
        ipv4Settings.IPInterfaceSubnetMask = tmpLanMask;

        $.act(ACT_SET, LAN_IP_INTF, lanIPv4Cfg[0].__stack, null, ipv4Settings);
        $.act(ACT_SET, LAN_IGMP_SNOOP, lanIgmpCfg.__stack, null, igmpSettings);
        $.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, dhcpSettings);
        if (!$.exe()) {
            $.guage(["<span class='T T_rebooting'>" + s_str.rebooting + "</span>", "<span class='T T_wait_reboot'>" + s_str.wait_reboot + "</span>"], 100, 1200,
                function() {
                    if (window.location.href.search(TPLINK_LOGIN_DOMAIN) == -1) {
                        $.refresh(tmpLanIp);
                    } else {
                        $.refresh();
                    }
                });
        }
    }

    function goBack() {
        bReboot = false;
        return;
    }
}

function isSameLan(lan1Ip, lan1Mask, lan2Ip, lan2Mask) {
    var count = 0;
    lan1a = lan1Ip.split('.');
    lan1m = lan1Mask.split('.');
    lan2a = lan2Ip.split('.');
    lan2m = lan2Mask.split('.');
    for (i = 0; i < 4; i++) {
        l1a_n = parseInt(lan1a[i], 10);
        l1m_n = parseInt(lan1m[i], 10);
        l2a_n = parseInt(lan2a[i], 10);
        l2m_n = parseInt(lan2m[i], 10);

        if ((l1a_n & l1m_n) == (l2a_n & l2m_n))
            count++;
    }
    if (count == 4) {
        var testIp = $.ip2num(lan1Ip);
        var lanMask = $.ip2num(lan1Mask);
        if (((testIp & (~lanMask)) == 0) || ((testIp & (~lanMask)) == (~lanMask)))
            return false;
        else
            return true;
    } else {
        return false;
    }
}

function checkParam() {
    var element;
    var lanIp = $("#lanIPAddr").tpAddress('val');
    var netMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").tpAddress('val') : $("select#lanIPSubMask").data("text");

    if ($.ifip(lanIp, true)) {
        $.alert(ERR_LAN_IP_INVAD);
        $("#lanIPAddr").tpAddress('focus');
        return false;
    }
    if ($.mask(netMask, true)) {
        $.alert(ERR_LAN_MASK_INVAD);
        $("select#lanIPSubMask").data("text") == "custom" ? ($("#lanIPSubMaskCustomInput").tpAddress('focus')) : ($("#lanIPSubMask").focus.select());

        return false;
    }

    if ($.ipmask(lanIp, netMask, true)) {
        $.alert(ERR_LAN_IPMASK_INVAD);
        $("#lanIPAddr").tpAddress('focus');
        return false;
    }

    var tmpIp1 = $("#ip1").tpAddress('val');
    var tmpIp2 = $("#ip2").tpAddress('val');
    if ($.ifip(tmpIp1, true)) {
        $.alert(ERR_DHCP_START_IP_INVAD);
        $("#ip1").tpAddress('focus');
        return false;
    }
    if ($.ifip(tmpIp2, true)) {
        $.alert(ERR_DHCP_END_IP_INVAD);
        $("#ip2").tpAddress('focus');
        return false;
    }
    if ((parseInt(tmpIp1.split(".")[3], 10) == 0) || (parseInt(tmpIp1.split(".")[3], 10) == 255)) {
        $.alert(ERR_DHCP_START_IP_INVAD_1);
        $("#ip1").tpAddress('focus');

        return false;
    }
    if ((parseInt(tmpIp2.split(".")[3], 10) == 0) || (parseInt(tmpIp2.split(".")[3], 10) == 255)) {
        $.alert(ERR_DHCP_END_IP_INVAD_1);
        $("#ip2").tpAddress('focus');

        return false;
    }
    if (!$.isOrderIp(tmpIp1, tmpIp2)) {
        $.alert(ERR_TC_IP_ORDER_INVAD);
        $("#ip2").tpAddress('focus');

        return false;
    }

    if (!isSameLan(tmpIp1, netMask, lanIp, netMask)) {
        $.alert(ERR_DHCP_POOL_INVAD);
        $("#ip1").tpAddress('focus');

        return false;
    }

    if (!isSameLan(tmpIp2, netMask, lanIp, netMask)) {
        $.alert(ERR_DHCP_POOL_INVAD);
        $("#ip2").tpAddress('focus');

        return false;
    }

    if ($.num($("#lease").val(), [1, 2880], true)) {
        $.alert(ERR_DHCP_LEASE_INVAD);
        element = $("#lease");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    var gateway = $("#gateway").tpAddress('val');
    if ((gateway != "") && (gateway != "0.0.0.0") && ($.ifip(gateway, true))) {
        $.alert(ERR_DHCP_GATEWAY_INVAD);
        $("#gateway").tpAddress('focus');

        return false;
    }
    if ((gateway != "") && (gateway != "0.0.0.0") &&
        (!isSameLan(gateway, netMask, lanIp, netMask))) {
        $.alert(ERR_GATEWAY_INVAD);
        $("#gateway").tpAddress('focus');

        return false;
    }
    if (($("#domain").val() != "") && (!$.isdomain($("#domain").val()))) {
        $.alert(ERR_DOMAIN_INVAD);
        element = $("#domain");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    var dnsserver1 = $("#dnsserver1").tpAddress('val');
    if ((dnsserver1 != "") && (dnsserver1 != "0.0.0.0") && ($.ifip(dnsserver1, true))) {
        $.alert(ERR_DHCP_DNS1_INVAD);
        $("#dnsserver1").tpAddress('focus');

        return false;
    }

    var dnsserver2 = $("#dnsserver2").tpAddress('val');
    if ((dnsserver2 != "") && (dnsserver2 != "0.0.0.0") && ($.ifip(dnsserver2, true))) {
        $.alert(ERR_DHCP_DNS2_INVAD);
        $("#dnsserver2").tpAddress('focus');

        return false;
    }

    var rmtSrv = $("#rmtSrv").tpAddress('val');
    if (($("#dhcpRelay").prop("checked") == true) && ((rmtSrv == "") || (rmtSrv == "0.0.0.0"))) {
        $.alert(ERR_DHCP_RMT_SRV_EMPTY);
        $("#rmtSrv").tpAddress('focus');
        return false;
    }
    if ((rmtSrv != "") && (rmtSrv != "0.0.0.0") && ($.ifip(rmtSrv, true))) {
        $.alert(ERR_DHCP_RMT_SRV_INVAD);
        $("#rmtSrv").tpAddress('focus');
        return false;
    }

    var secIp = $("#secIp").tpAddress('val');
    var secMask = $("#secMask").tpAddress('val');
    if ($("#secIp_en").prop("checked") == true) {
        if ($.ifip(secIp, true)) {
            $.alert(ERR_IP_FORMAT);
            $("#secIp").tpAddress('focus');

            return false;
        }
        if ($.mask(secMask, true)) {
            $.alert(ERR_MASK_INVAD);
            $("#secMask").tpAddress('focus');

            return false;
        }
        if ($.ip2ip(secIp) == $.ip2ip($("#lanIPAddr").tpAddress('val'))) {
            $.alert(ERR_LAN_SEC_IP_INVAD);
            $("#secIp").tpAddress('focus');

            return false;
        }
    }

    return true;
}


function initDhcpEdit() {

    if (hasGroup) {

        $("#formIPv6").addClass('nd');
        $("#ipVersion").addClass('nd');
        $("#cancelIPv4").css('display', 'inline-block');

        if (brLanList[groupEditIndex].bridgeName == "Default") {
            $("#formIPv6").removeClass('nd');
            $("#ipVersion").removeClass('nd');
        }
        $("#hasGroupBtn").removeClass('nd');
        $("#noGroupBtn").addClass('nd');
        initEdit(brLanList, groupEditIndex);
    } else {
        $("#cancelIPv4").css('display', 'none');
        $("#ipVersion").removeClass('nd');
        $("#hasGroupBtn").addClass('nd');
        $("#noGroupBtn").removeClass('nd');
        initEdit(brLanList, 0);
    }

	if (INCLUDE_LTEWAN && sysMode.mode == "LTE")
		$("#ipVersion").addClass('nd');
}

function changeVersion() {
    if ($("#ipVer4").prop("checked")) {
        $("#formIPv4").removeClass("nd");
        $("#formIPv6").addClass("nd");
    } else if ($("#ipVer6").prop("checked")) {
        $("#formIPv4").addClass("nd");
        $("#formIPv6").removeClass("nd");
    }
}

function setDhcpAddresses() {
    var lanIp = $("#lanIPAddr").tpAddress('val');
    var netMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").tpAddress('val') : $("select#lanIPSubMask").data("text");
    var addrParts;
    var maskParts;
    var poolStart = [];
    var poolEnd = [];
    var index;
    var pos;

    $("#ip1").tpAddress("val", '');
    $("#ip2").tpAddress("val", '');

    addrParts = lanIp.split('.');
    maskParts = netMask.split('.');


    for (index = 0; index < 4; index++) {
        poolStart[index] = addrParts[index] & maskParts[index];
    }
    poolStart[3] += 1;

    for (index = 0; index < 3; index++) {
        poolEnd[index] = poolStart[index];
    }
    pos = $.getrightfirstonebitpos(maskParts[3]);
    poolEnd[3] = poolStart[3] + Math.pow(2, pos) - 3;


    if ((poolEnd[3] >= 200) && (poolStart[3] <= 100)) {
        poolStart[3] = 100;
        poolEnd[3] = 199;
    }

    var tmp1 = '';
    var tmp2 = '';
    for (index = 0; index < 4; index++) {
        if (index == 3) {
            tmp1 = tmp1 + poolStart[index];
            tmp2 = tmp2 + poolEnd[index];

//            $("#ip1").tpAddress('val', $("#ip1").tpAddress('val') + poolStart[index]);
//            $("#ip2").tpAddress('val', $("#ip2").tpAddress('val') + poolEnd[index]);
        } else {
            tmp1 = tmp1 + poolStart[index] + '.';
            tmp2 = tmp2 + poolEnd[index] + '.';
//            $("#ip1").tpAddress('val', $("#ip1").tpAddress('val') + poolStart[index] + ".");
//            $("#ip2").tpAddress('val', $("#ip2").tpAddress('val') + poolEnd[index] + ".");
        }
    }
    $("#ip1").tpAddress('val', tmp1);
    $("#ip2").tpAddress('val', tmp2);
    $("#gateway").tpAddress('val', lanIp);
}
</script>
<div class="content-container">
    <div id="ipVersion">
        <b class="xl" id="t_ipVer">IP Version:</b>
        <input type="radio" name="ipVer" id="ipVer4" checked="checked" />
        <label id="t_ipVer4">IPv4</label>
        <input type="radio" name="ipVer" id="ipVer6" />
        <label id="t_ipVer6">IPv6</label>
    </div>

    <form class="pure-form pure-form-aligned" id="formIPv4">
        <div class="pure-control-group">
            <b class="xl T_macaddr">Mac address:</b>
            <input type="text" readonly="true" id="lanMacAddress" />
        </div>

		<div id="lanIPAddrType_div" class="nd">
            <b class="xl ">Address Type:</b>
            <select id="lanIPAddrType" class="l">
                <option value="0">Static</option>
                <option value="1">Smart IP</option>
            </select>
        </div>
		
        <div>
            <b class="xl T_ipaddr">LAN IPv4:</b>
            <input type="text" id="lanIPAddr" class="l ip-address" required />
        </div>

        <div class="inline">
            <b class="xl T_netmask">Subnet Mask:</b>
            <select id="lanIPSubMask" class="l">
                <option value="0">255.255.255.0</option>
                <option value="1">255.255.0.0</option>
                <option value="2">255.0.0.0</option>
                <option value="3" id="t_custom">custom</option>
            </select>
        </div>

        <div class="nd" id="lanIPSubMaskCustom" style="margin-left:20px">
            <input type="text" id="lanIPSubMaskCustomInput" class="l ip-address" required />
        </div>

        <div id="igmpSnooping">
            <b class="xl" id="t_snoop">IGMP Snooping:</b>
            <input type="checkbox" id="lanIGMPEn" />
            <label id="t_ensnoop">Enable IGMP Snooping</label>
        </div>

        <div>
            <b class="xl" id="t_secIp">Second IP:</b>
            <input type="checkbox" id="secIp_en" />
            <label id="t_ensecip">Enable Second IP</label>
        </div>

        <div id="secIpCont" class="nd">
            <div>
                <b class="xl T_ipaddr">IP Address:</b>
                <input type="text" class="l ip-address" maxlength="15" id="secIp" value="0.0.0.0" />
            </div>

            <div>
                <b class="xl T_netmask">Subnet Mask:</b>
                <input type="text" class="l ip-address" maxlength="15" id="secMask" value="0.0.0.0" />
            </div>
        </div>

        <div>
            <b class="xl" id="t_dhcp">DHCP:</b>
            <input type="checkbox" id="dhcpEn" />
            <label id="t_endhcp">Enable DHCP</label>
        </div>

        <div id="dhcpCont">
            <div>
                <b class="xl" id="d"></b>
                <input type="radio" name="dhcpfunc" id="dhcpServ" checked="checked" />
                <label id="t_dhcpserv">DHCP Server</label>
                <input type="radio" name="dhcpfunc" id="dhcpRelay" />
                <label id="t_relay">DHCP Relay</label>
            </div>

            <div id="dhcpSrvCont">
                <div class="inline">
                    <b class="xl" id="t_ippool">IP Address Pool:</b>
                    <input type="text" class="l ip-address" id="ip1" required />
                    <span>-</span>
                    <input type="text" class="l ip-address" id="ip2" required />
                </div>

                <div>
                    <b class="xl" id="t_leasetime">Address Lease Time:</b>
                    <input type="text" id="lease" required />
                    <div class="textbox-tips">
                        <span class="l nd" id="t_leaseval">minutes. (1-2880. The default value is 1440.)</span>
						<span class="l nd" id="t_leaseval_ap">minutes. (1-2880. The default value is 1.)</span>
                    </div>
                </div>

                <div>
                    <b class="xl T_defgw">Default Gateway:</b>
                    <input type="text" id="gateway" required class="ip-address"/>
                    <span class="T_optional">(Optional)</span>
                </div>

                <div>
                    <b class="xl" id="t_defdomain">Default Domain:</b>
                    <input type="text" id="domain" required />
                    <span class="T_optional">(Optional)</span>
                </div>

                <div>
                    <b class="xl T_dns">DNS Server:</b>
                    <input type="text" id="dnsserver1" required class="ip-address"/>
                    <span class="T_optional">(Optional)</span>
                </div>

                <div>
                    <b class="xl T_secdns">Secondary DNS Server:</b>
                    <input type="text" id="dnsserver2" required class="ip-address"/>
                    <span class="T_optional">(Optional)</span>
                </div>
            </div>

            <div id="dhcpRelayCont">
                <div>
                    <b class="xl" id="t_remote">Remote Server Address:</b>
                    <input id="rmtSrv" type="text" class="text ip-address" value="0.0.0.0" size="15" maxlength="15" />
                </div>
                <p class="xl cfg-line" id="t_relay_warn">Note: You have to disable NAT of the WAN connections. Or the DHCP Relay may not take effect!</p>
            </div>
        </div>

        <div class="inline-btn-right part-separate" id="hasGroupBtn">
            <button type='submit' class="green inline T_cancel" id="cancelIPv4">Cancel</button>
            <button type="submit" class="green inline T_save" id="saveIPv4Hg">Save</button>
        </div>

        <div id="noGroupBtn">
            <button type="submit" class="green T_save" id="saveIPv4Ng">Save</button>
        </div>
    </form>


    <form class="pure-form pure-form-aligned" id="formIPv6">
        <div id="ipv6Edit"></div>
    </form>
</div>

<script type="text/javascript">
$("#lanIPAddr").on('change', function() {
    setDhcpAddresses();
    checkParam();
});

$("#lanIPSubMaskCustomInput").on('change', function() {
    setDhcpAddresses();
    checkParam();
});

$('#secIp_en').on('click', function() {
    if ($('#secIp_en').prop('data-checked')) {
        $('#secIpCont').removeClass('nd');
    } else {
        $('#secIpCont').addClass('nd');
    }
});

$('#dhcpEn').on('click', function(e) {
    if ($('#dhcpEn').prop('data-checked')) {
        $('#dhcpCont').removeClass("nd");
    } else {
        $('#dhcpCont').addClass("nd");
    }
});

$('#dhcpServ').on('click', function() {
    $('#dhcpSrvCont').removeClass('nd');
    $('#dhcpRelayCont').addClass('nd');
});

$('#dhcpRelay').on('click', function() {
    $('#dhcpSrvCont').addClass('nd');
    $('#dhcpRelayCont').removeClass('nd');
});

$('#saveIPv4Hg').on('click', function(e) {
    $.addLoading($(this));
    clickIPv4Save();
});

$('#saveIPv4Ng').on('click', function(e) {
    $.addLoading($(this));
    clickIPv4Save();
});

$('#cancelIPv4').on('click', function(e) {
    $.reload();
});

$('#ipVer4').on('click', function(e) {
    $("#formIPv4").removeClass("nd");
    $("#formIPv6").addClass("nd");
});

$('#ipVer6').on('click', function(e) {
    $("#formIPv4").addClass("nd");
    $("#formIPv6").removeClass("nd");
});

$("select#lanIPAddrType").on('click', function(e) {

    if($("select#lanIPAddrType").data('value') == '0')
		setDhcpCfgDisable(false);
	else
		setDhcpCfgDisable(true);

});

$('#lanIGMPEn').on('click', function(e) {
    if ($('#lanIGMPEn').prop('data-checked')) {
        $('#snoopingMode').removeClass("nd");
    } else {
        $('#snoopingMode').addClass("nd");
    }
});
$.tpInit(initDhcpEdit);

$("select#lanIPSubMask").click(function() {

    var subMask = $("select#lanIPSubMask").data('text');

    if (subMask == n_str.dhcp.t_custom) {
        $("#lanIPSubMaskCustom").css('display', 'inline-block');
		if ($("#lanIPSubMaskCustomInput").tpAddress('val').length != 0)
		{
			setDhcpAddresses();
			checkParam();
		}
    } else {
        $("#lanIPSubMaskCustom").css('display', 'none');
        //$("#lanIPSubMaskCustomInput").tpAddress("val", "");
        setDhcpAddresses();
        /*$("#gateway").val(dhcpCfg.IPRouters);*/
        checkParam();
    }

});
</script>
