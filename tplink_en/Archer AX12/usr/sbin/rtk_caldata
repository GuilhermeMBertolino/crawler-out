#!/bin/sh
#
# Copyright (c) 2022 Shenzhen TP-LINK Technologies Co.Ltd.
#
# dongao@tp-link.com.hk
# 2022-11-18
# Content:
#	Create for rtk read/write cal data
. /lib/wifi/cal_data_list
export DEBUG=0
[ $DEBUG ] && STDOUT=/dev/console || STDOUT=/dev/null

cal_file=/tmp/caldata
radio_mtd=/dev/mtdblock3

usage(){
	echo $0 "<command>" "[<arguments>]"
	echo "Commands:"
	echo "        read    <key>"
	echo "        write   <key>=<value>"
	echo "        save"
	echo ""
	echo "cal_data_list:"
	for param_row in $cal_data_list; do
		key=${param_row%:*}
		size=${param_row#*:}
		band=${size#*,}
		size=${size%,*}
		echo "	$key		$size		$band"
	done
	exit 0
}

init_caldata(){
	local param_row
	local size=0
	local total_size=0
	for param_row in $cal_data_list; do
		size=${param_row#*:}
		size=${size%,*}
		let "total_size=$total_size+$size"
	done
	[ ! -f $cal_file ] && dd if=$radio_mtd of=$cal_file bs=$total_size count=1
	calfile_data=$(cat $cal_file)
	# echo "read calfile_data: $calfile_data" > $STDOUT
}

save_caldata(){
	calfile_data=$(cat $cal_file)
	dd if=$cal_file of=$radio_mtd
}

find_size_offset(){
	local param_row key size cur_offset cur_size
	conf_name=$1
	cur_offset=0
	cur_size=0
	for param_row in $cal_data_list; do
		key=${param_row%:*}
		size=${param_row#*:}
		size=${size%,*}
		[ "$conf_name" = "$key" ] && {
			cur_size=$size
			echo $cur_offset $cur_size
			break
		}
		let "cur_offset=$cur_offset+$size"
	done
}

read_caldata(){
	local offset=$1 size=$2
	echo ${calfile_data:$offset:$size}
}

write_caldata(){
	local offset=$1 size=$2 para=$3
	[ ${#para} -ne $size ] && {
		echo "error value length, exit" > /dev/console
		exit 0
	}
	prefix_cal=${calfile_data:0:$offset}
	let suffix_offect=$offset+$size
	suffix_cal=${calfile_data:$suffix_offect}
	calfile_data=${prefix_cal}${para}${suffix_cal}
	echo $calfile_data > $cal_file
	# echo "write caldata to cal_file: $calfile_data" > $STDOUT
}

main(){
	local operation=$1
	local para=$2
	local config
	local ret

	init_caldata

	case $operation in
	read)
		ret=$(find_size_offset $para)
		[ -z "$ret" ] && {
			usage
		}
		read_caldata $ret
	;;
	write)
		config=${para#*=}
		para=${para%=*}
		ret=$(find_size_offset $para)
		[ -z "$ret" ] && {
			usage
		}
		write_caldata $ret $config
	;;
	save)
		save_caldata
	;;
	*)
		usage
	;;
	esac
}

main $@