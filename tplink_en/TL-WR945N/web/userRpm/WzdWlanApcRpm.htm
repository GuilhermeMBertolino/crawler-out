<script language="JavaScript" src="../dynaform/custom.js" type="text/JavaScript"></script>
<SCRIPT language="JavaScript" src="../dynaform/common.js" type="text/JavaScript"></SCRIPT>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<SCRIPT type="text/javascript">
<!--
function Click(){ window.event.returnValue=false;}
document.oncontextmenu=Click;

var nextOrBackFlag = 0;

var key1dis = 0;
var key2dis = 0;
var key3dis = 0;
var key4dis = 0;
var keylength1 = 10;
var keylength2 = 10;
var keylength3 = 10;
var keylength4 = 10;

function getValLen(val)
{
	var len = 0;
	var i = 0;
	for (i = 0; i < val.length; i ++)
	{
		var c = val.charAt(i);
		len += ((c >= ' ') && (c <= '~')) ? 1 : 2;
	}
	return len;
}

function isBroadcast(macAddr)
{
	for (var i=0; i < macAddr.length; i++)
	{
		if ((i + 1) % 3 == 0)
				continue;
		if ((macAddr.charAt(i) != 'f')
					&& (macAddr.charAt(i) != 'F'))
					return false;
	}
	return true;
}
function isAllzero(macAddr)
{
	for (var i=0; i < macAddr.length; i++)
	{
		if ((i + 1) % 3 == 0)
				continue;
		if (macAddr.charAt(i) != '0')
					return false;
	}
	return true;
}

function isMulticast(macAddr)
{
	return ((macAddr.charAt(0) == '0') && (macAddr.charAt(1) == '1'));
}

function checkwepasiikey(szkey)
{
	var c;
	var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";

	for (var i = 0; i < szkey.length; i++)
	{
		c = szkey.charAt(i);
		if (ch.indexOf(c) == -1)
			return false;
	}
	return true;
}

function checkwephexkey(szkey)
{
	var c;
	var ch = "0123456789ABCDEFabcdef";

	for (var i = 0; i < szkey.length; i++)
	{
		c = szkey.charAt(i);
		if (ch.indexOf(c) == -1)
			return false;
	}
	return true;
}

function checkname(szname)
{
	var c;
	var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$%^&*()-=_+[]{};:\'\"\\|/?.,<>/ ";

	for (var i = 0; i < szname.length; i++)
	{
		c = szname.charAt(i);
		if (ch.indexOf(c) == -1)
			return false;
	}
	return true;
}

function doSelKeytype()
{
	var cf = document.forms[0];
	if ((cf.keytype.value == 2) || (cf.keytype.value == 3))
	{
		cf.wepindex.disabled = false;
		cf.authtype.disabled = false;
		cf.keytext.disabled = false;
		cf.keytext.maxLength = (cf.keytype.value == 2)? 16:32;
	}
	else if(cf.keytype.value == 4)
	{
		cf.keytext.disabled = false;
		cf.wepindex.disabled = true;
		cf.authtype.disabled = true;
		cf.keytext.maxLength = 64;
	     }
	else
    	    {
		cf.keytext.disabled = true;
        	cf.wepindex.disabled = true;
		cf.authtype.disabled = true;
    }

	document.getElementById("t_keytype_selected").style.display ="none";
	document.getElementById("t_keytype_unselected").style.display ="none";

	return true;
}

function doCheckPskPasswd()
{
	var cf = document.forms[0];
	len = getValLen(cf.keytext.value);
	if  (len <= 0)
	{
		alert(js_psk_empty="Empty PSK password, please input one!");
		return false;
	}
	else if ((len > 0) && (len < 8))
	{
		alert(js_psk_char="PSK password should not be less than 8 characters, please input again!");
		return false;
	}
    else if(len < 64)
        {
        var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
            var c;
            for(i = 0; i < len; i++)
            {
                c = cf.keytext.value.charAt(i);
                if(ch.indexOf(c) == -1)
                {
                alert(js_psk_hex="The PSK password include illegal characters, please input again.");
                    return false;
            }
        }
    }
	else 
	{
		var ch = "0123456789ABCDEFabcdef";
        var c;
        for(i = 0; i < len; i++)
        {
            c = cf.keytext.value.charAt(i);
            if(ch.indexOf(c) == -1)
            {
                alert(js_psk_hex="The 64 bytes PSK password include non-hexadecimal characters, please input again.");
                    return false;
                }
            }
        }
	return true;
}

function transToURL(str)
{
	for (var i = 0; i < transMatrixURL.length; i+=2)
	{
		str = str.replace(transMatrixURL[i], transMatrixURL[i+1]);
	}
	return str;
}

function doSurvey()
{
	location.href="WzdWlanSiteSurveyRpm.htm";
}

// check len of ssid
function checkssid(str)
{
	return getValLen(str);
}

function checkkey(szname,strlength)
{
	var c;
	var zeronum = 0;
	var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
	if (szname.length != strlength)
		return false;
	if	(is_Hex == 1)
		ch = ch.substring(0,22);
	for (var i = 0; i < szname.length; i++)
	{
		c = szname.charAt(i);
		if (c =="0")
			zeronum ++;
		if (ch.indexOf(c) == -1)
			return false;
		if (zeronum == strlength && is_Hex == 1)
			return false;
	}
	return true;
}

function checkWEP_sta()
{
	var cf = document.forms[0];
	if (key1dis && key2dis && key3dis && key4dis)
		return 0;
	if (key1dis == 0)	{if (checkkey(cf.key1.value,keylength1) == false)	return 1;}
	if (key2dis == 0)	{if (checkkey(cf.key2.value,keylength2) == false)	return 2;}
	if (key3dis == 0)	{if (checkkey(cf.key3.value,keylength3) == false)	return 3;}
	if (key4dis == 0)	{if (checkkey(cf.key4.value,keylength4) == false)	return 4;}
	return 5;
}
function doCheckValue()
{
	var cf = document.forms[0];
	//check WISP SSID
	brlressid = checkssid(cf.wispSsid.value);
	if(brlressid > 32)
	{
		alert(js_ssid_exe="WISP's SSID cannot exceed 32 characters. Please input correctly!");
		doSelKeytype();
		return false;
	}
	if(0 == brlressid)
	{
		alert(js_pl_ssid="Please input WISP's SSID!");
		doSelKeytype();			
		return false;
	}
	
	//check Local SSID
	ssidLen = checkssid(cf.ssid.value);
	if(ssidLen > 32)
	{
		alert(js_ssid_exe="Local SSID cannot exceed 32 characters. Please input correctly!");
		doSelKeytype();
		return false;
	}
	else if(0 == ssidLen)
	{
		alert(js_pl_ssid="Please input Local SSID!");
		doSelKeytype();			
		return false;
	}
	else if (!checkname(cf.wispSsid.value))
	{
		alert(js_ssid_ill="WISP's SSID contains illegal characters, please input another one!");
		doSelKeytype();		
		return false;
	}
	if (cf.wispSsid.value == cf.ssid.value)
	{
		alert(js_pl_bridge_ssid="Local SSID can not equal to WISP's SSID! Please change it!");
		doSelKeytype();			
		return false;
	}
	
	var bssid = cf.wispBssid.value;
	
	if (is_macaddr(bssid) == false)
	{
		doSelKeytype();
		return false;
	}
	if (isBroadcast(bssid) == true)
	{
		alert(js_bridge_broadcast="WISP's BSSID is broadcast address, please input again!");
		doSelKeytype();
		return false;
	}	
    if (isAllzero(bssid) == true)
	{
		alert(js_bridge_broadcast="WISP's BSSID is invalid, please input again!");
		doSelKeytype();
		return false;
	}
		
	if (isMulticast(bssid) == true)
	{
		alert(js_bridge_multicast="WISP's BSSID is multicast address, please input again!");
		doSelKeytype();
		return false;
	}

	if ((cf.keytype.value == 2)&&((getValLen(cf.keytext.value)!=5) && (getValLen(cf.keytext.value)!=13) && (getValLen(cf.keytext.value)!=16)))
	{
		alert(js_key_corret="The ASCII key'length must be 5,13 or 16!");
		doSelKeytype();			
		return false;
	}
	else if ((cf.keytype.value == 3)&&((getValLen(cf.keytext.value)!=10) && (getValLen(cf.keytext.value)!=26) && (getValLen(cf.keytext.value)!=32)))
	{
		alert(js_key_corret="The HEX key'length must be 10,26 or 32!");
		doSelKeytype();
		return false;
	}
	if (cf.keytype.value == 2)
	{ 
		if (checkwepasiikey(cf.keytext.value) == false)
		{
			alert(js_key_corret="The hex wep key includes illegal characters!");
			doSelKeytype();
			return false;
        }
	}	
	else if (cf.keytype.value == 3)
	{ 
		if (checkwephexkey(cf.keytext.value) == false)
		{
			alert(js_key_corret="The hex wep key includes illegal characters!");
			doSelKeytype();
			return false;
        }
	}
        else if (cf.keytype.value == 4)
	{
		if ((getValLen(cf.keytext.value) == 64) && (checkwephexkey(cf.keytext.value) == false))
		{
			alert(js_pskkey_corret="The 64 bytes PSK password include non-hexadecimal characters, please input again.");
			doSelKeytype();
			return false;
		}
	}
		
	if (!checkname(cf.ssid.value))
	{
		alert(js_ssid_ill="Local SSID contains illegal characters, please input another one!");
		doSelKeytype();		
		return false;
	}
	
	
	if (cf.keytype.value == 4)
	{
		if (doCheckPskPasswd() == false)
		{
			doSelKeytype();
			return false;
	    }
	}	
	
	if (cf.secType.value == 3)
	{
		var len = getValLen(cf.pskSecret.value);
		if (len <= 0)
		{
			alert(js_empty_psk_password="Empty password, please input one!");
			cf.pskSecret.focus();
			return false;
		}
		if ((len > 0) && (len < 8))
		{
			alert(js_psk_char="Password should not be less than 8 characters, please input again!");
			cf.pskSecret.focus();
			cf.pskSecret.select();
			return false;
		}
        else if(len < 64)
        {
			var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
            var c;
            for(i = 0; i < len; i++)
            {
                c = cf.pskSecret.value.charAt(i);
                if(ch.indexOf(c) == -1)
                {
                    alert(js_psk_hex="The PSK password include illegal characters, please input again.");
                    cf.pskSecret.focus();
                    cf.pskSecret.select();
                    return false;
                }
            }
        }
		else 
		{
			var ch = "0123456789ABCDEFabcdef";
			var c;
			for(i = 0; i < len; i++)
			{
				c = cf.pskSecret.value.charAt(i);
				if(ch.indexOf(c) == -1)
				{
					alert(js_psk_hex="The 64 bytes PSK password include non-hexadecimal characters, please input again.");
                    cf.pskSecret.focus();
                    cf.pskSecret.select();
                    return false;
                }
            }
        }
/*	if ((0 != cf.interval.value) && (cf.interval.value < 30))
		{
			if ("" != cf.interval.value)
			{
				alert(js_inv_group_per="Invalid Group Key Update Period, please input again!");
				return false;
			}
		}*/
	}
	else if(cf.secType.value == 1)
	{
			var renum;
			renum = checkWEP_sta();
			if (0 == renum)
			{
				//if (!confirm(js_no_wep_key = "The WEP key is empty, are you sure to continue?"))
				alert("The WEP key is empty, please input WEP key.");
					return false;
			}
			if (renum < 5 && renum >0)
			{
				if (is_Hex == true)
				{
					 alert (js_wep_key_inv_hex="WEP key is invalid!\nThe WEP Key Format is Hexadecimal currently.\nMake sure that all digits are Hexadecimal (zero key is illegal) and the length must be 10,26 or 32.");
				}
				else
				{
					alert (js_wep_key_inv_asc="WEP key is invalid!\nThe WEP Key Format is ASCII currently.\nMake sure that all characters are ASCII (not including any other character) and the length must be 5,13 or 16.");
				}
				
				if (renum == 1 &&cf.key1.disabled == false)				{	cf.key1.focus();	cf.key1.select();	}
				else if (renum == 2 &&cf.key2.disabled == false)		{	cf.key2.focus();	cf.key2.select();	}
				else if (renum == 3 &&cf.key3.disabled == false)		{	cf.key3.focus();	cf.key3.select();	}
				else if (renum == 4 &&cf.key4.disabled == false)		{	cf.key4.focus();	cf.key4.select();	}
				return false;
			}
		
	}
	return true;
}

function doSubmit()
{
	if(nextOrBackFlag)
		return doCheckValue();		
	else
		return true;
}

function displayPage()
{
	var cf = document.forms[0];
	cf.wispSsid.value = wzdWkModeInf[0];
	cf.wispBssid.value = wzdWkModeInf[1];
	cf.ClientId.value = wzdWkModeInf[2];
	cf.ssid.value = wzdWkModeInf[3];
	
	cf.keytype.value = wzdWkModeSecInf[0];
	cf.keytext.value = wzdWkModeSecInf[1];
	cf.wepindex.value = wzdWkModeSecInf[2];   
	cf.authtype.value = wzdWkModeSecInf[3]; 
	
	if (cf.keytype.value == 1)
	{
		cf.wepindex.disabled = true;
		cf.authtype.disabled = true;
		cf.keytext.disabled = true;
	}
}

function doBack()
{
	nextOrBackFlag = 0;
}
function doNext()
{
	nextOrBackFlag = 1;
}

function printTipMsg()
{
	var tipMsg = "";
	if(wzdWkModeInf[4] == 1)//mulitSysmode
	{
	tipMsg += "<B>Start&nbsp;&gt;&gt;&nbsp;Working Mode&nbsp;&gt;&gt;&nbsp;";
	}
	else
	{
		tipMsg += "<B>Start&nbsp;&gt;&gt;&nbsp;";
	}
	tipMsg += "WAN Connection Type&nbsp;&gt;&gt;&nbsp;</B>";
	tipMsg += "<span class=\"STYLE2\">Wireless</span><B>&nbsp;&gt;&gt;&nbsp;Finish</B>";
	document.getElementById("tips_msg").innerHTML = tipMsg;
}

function changeSecurityType()
{
	var sec_mode = document.forms[0].secType.value;
	if(sec_mode == 0)  //none sec
	{
	    document.getElementById("t_nonesec_warn").style.display = "";
	    
	    document.getElementById("t_s_wep_type").style.display = "none";
	    document.getElementById("t_s_wep_form").style.display = "none";
	    document.getElementById("t_s_wep_key").style.display = "none";
	    document.getElementById("t_warn_wep").style.display = "none";
	    
	    document.getElementById("t_s_psk").style.display = "none";
	    document.getElementById("t_warn_psk").style.display = "none";
	    
	}
	else if(sec_mode == 1)  //WEP
	{
	    document.getElementById("t_nonesec_warn").style.display = "none";
	    
	    document.getElementById("t_s_wep_type").style.display = "";
	    document.getElementById("t_s_wep_form").style.display = "";
	    document.getElementById("t_s_wep_key").style.display = "";
	    document.getElementById("t_warn_wep").style.display = "";
	    
	    document.getElementById("t_s_psk").style.display = "none";
	    document.getElementById("t_warn_psk").style.display = "none";
	}
	else if(sec_mode == 3)  //WPA
	{
	     document.getElementById("t_nonesec_warn").style.display = "none";
	    
	    document.getElementById("t_s_wep_type").style.display = "none";
	    document.getElementById("t_s_wep_form").style.display = "none";
	    document.getElementById("t_s_wep_key").style.display = "none";
	    document.getElementById("t_warn_wep").style.display = "none";
	    
	    document.getElementById("t_s_psk").style.display = "";
	    document.getElementById("t_warn_psk").style.display = "";
	}
	
}
//yong
function setKey()
{
	getdisable();
	auto_disable();
	auto_length();
}
//yong
function getdisable()
{
	var cf = document.forms[0];
	key1dis = (cf.length1.selectedIndex == 0);
	key2dis = (cf.length2.selectedIndex == 0);
	key3dis = (cf.length3.selectedIndex == 0);
	key4dis = (cf.length4.selectedIndex == 0);
}
//yong
function auto_disable()
{
	var cf = document.forms[0];
	var keychoosed;
	cf.key1.readonly = cf.keynum[0].disabled = key1dis;
	cf.key2.readonly = cf.keynum[1].disabled = key2dis;
	cf.key3.readonly = cf.keynum[2].disabled = key3dis;
	cf.key4.readonly = cf.keynum[3].disabled = key4dis;
	for (i = 0; i < cf.keynum.length; i ++)
	{
		if (cf.keynum[i].checked)
		{
			keychoosed = cf.keynum[i].value;
			break;
		}
	}
	if ((0 == key1dis) || (0 == key2dis) || (0 == key3dis) || (0 == key4dis))
	{
		if ((keychoosed == 1 && cf.length1.selectedIndex == 0) ||
			(keychoosed == 2 && cf.length2.selectedIndex == 0) ||
			(keychoosed == 3 && cf.length3.selectedIndex == 0) ||
			(keychoosed == 4 && cf.length4.selectedIndex == 0))
		{
			if (0 == key1dis)
				cf.keynum[0].checked = 1;
			else if (0 == key2dis)
				cf.keynum[1].checked = 1;
			else if (0 == key3dis)
				cf.keynum[2].checked = 1;
			else
				cf.keynum[3].checked = 1;
		}
	}
}
//yong
function auto_length()
{
	var cf = document.forms[0];

	keylength1 =(1 == key1dis) ? keylength1 :(((3 == cf.length1.selectedIndex) ? 16 : ((2 == cf.length1.selectedIndex) ? 13 : 5)) *((0 == cf.wpekeytype.selectedIndex) ? 2 : 1));
	keylength2 =(1 == key2dis) ? keylength2 :(((3 == cf.length2.selectedIndex) ? 16 : ((2 == cf.length2.selectedIndex) ? 13 : 5)) *((0 == cf.wpekeytype.selectedIndex) ? 2 : 1));
	keylength3 =(1 == key3dis) ? keylength3 :(((3 == cf.length3.selectedIndex) ? 16 : ((2 == cf.length3.selectedIndex) ? 13 : 5)) *((0 == cf.wpekeytype.selectedIndex) ? 2 : 1));
	keylength4 =(1 == key4dis) ? keylength4 :(((3 == cf.length4.selectedIndex) ? 16 : ((2 == cf.length4.selectedIndex) ? 13 : 5)) *((0 == cf.wpekeytype.selectedIndex) ? 2 : 1));

	if ((cf.key1.value.length > keylength1) && (key1dis != 1))cf.key1.value = cf.key1.value.substring(0,keylength1);
	if ((cf.key2.value.length > keylength2) && (key2dis != 1))cf.key2.value = cf.key2.value.substring(0,keylength2);
	if ((cf.key3.value.length > keylength3) && (key3dis != 1))cf.key3.value = cf.key3.value.substring(0,keylength3);
	if ((cf.key4.value.length > keylength4) && (key4dis != 1))cf.key4.value = cf.key4.value.substring(0,keylength4);

	cf.key1.maxLength =  keylength1;
	cf.key2.maxLength =  keylength2;
	cf.key3.maxLength =  keylength3;
	cf.key4.maxLength =  keylength4;

	if (cf.wpekeytype.selectedIndex == 0)
		is_Hex = true;
	else
		is_Hex = false;
}
//-->
</SCRIPT>
<style type="text/css">
<!--
.STYLE2 {color: #66CC00}
-->
</style>
</HEAD>
<BODY onload="setTagStr(document,'ntw_wzd_wlan_apc');LoadHelp('WzdWlanApcHelpRpm.htm'); resize(this);" onResize="resize(this);">
<center>
<form action="WzdWlanApcRpm.htm" enctype="multipart/form-data" method="get" onSubmit="return doSubmit()">
<TABLE id="autoWidth">
<TR><TD class=h1 colspan=2 id="t_title">Quick Setup - Wireless</TD></TR>
<TR><TD class=blue colspan=2></TD></TR>
<TR>
          <TD class=info colspan=2 STYLE1> 
			<SPAN id = "tips_msg"></SPAN>
          </TD>
     </TR>
		<br/><br/>	
<TR><TD class="h2" colspan=3 id="t_title">Client Setting</TD></TR>

<TR>
	<TD class=item style="padding-left:60px"><span id="t_wispSsid">SSID:</span></TD>
	<TD><input name="wispSsid" type="text" class="text" id = "wispSsid" size="32" maxlength="32"></TD>
</TR>

<TR>
	<TD class=item style="padding-left:60px"><span id="t_wispSsid">BSSID:</span></TD>
	<TD><input name="wispBssid" type="text" class="text" id = "wispBssid" size="32" maxlength="32">&nbsp;Example:00-1D-0F-11-22-33</TD>
</TR>

<TR>
<TD></TD>
<TD align="left"><INPUT name="survey" id="survey" type="button" class="button" value="Survey" onClick="doSurvey();"></TD>
</TR>
		<TR id="t_keytype_selected" style="display:none">
			<TD></TD>
			<TD style="color:#C11C66">Key type is selected.</TD>
		</TR>
		<TR id="t_keytype_unselected" style="display:none">
			<TD></TD>
			<TD style="color:#C11C66">The key type of AP is WEP. Please selected WEP(ASCII) or WEP(HEX), 
			<br/>meanwhile choose WEP index and auth type.</TD>
		</TR>
        <TR>
          <TD class="Item" id="t_keytype">Key type:</TD>
          <TD><SELECT name="keytype" style = "width:250px" onChange="doSelKeytype()">
              <OPTION value=1 id="t_none">None</OPTION>
              <OPTION value=2 id="t_wep_asc">WEP(ASCII)</OPTION>
              <OPTION value=3 id="t_wep_hex">WEP(HEX)</OPTION>
              <OPTION value=4  id="t_wpa">WPA-PSK/WPA2-PSK</OPTION>
            </SELECT></TD>
        </TR>
        <TR>
          <TD class="Item" size="32" id="t_wepindex">WEP Index:</TD>
          <TD><SELECT name="wepindex" style = "width:250px">
              <OPTION value=1>1</OPTION>
              <OPTION value=2>2</OPTION>
              <OPTION value=3>3</OPTION>
              <OPTION value=4>4</OPTION>
            </SELECT></TD>
        </TR>
        <TR>
          <TD class="Item" size="32" id="t_authtype">Auth type:</TD>
          <TD><SELECT name="authtype" id="authtype" style = "width:250px">
              <OPTION value=1 id="t_open">open</OPTION>
              <OPTION value=2 id="t_shared">shared</OPTION>
            </SELECT></TD>
        </TR>
        <TR>
          <TD class=Item style="padding-left:40px" id="t_keytext">Password:</TD>
          <TD colspan = "3"><INPUT name="keytext" size="32" type=text class=text id="keytext"></TD>
        </TR>
		
		<TR>
          <TD class="blue" colspan=2></TD>
        </TR>

        <TR>
          <TD class="h2" colspan=3 id="t_title">AP Setting</TD>
        </TR>

		<TR>
          <TD class="Item" id="t_ssid">Local SSID:</TD>
          <TD><INPUT class="text" id="ssid" name="ssid" maxlength=32 size=32></TD>
        </TR>
		
		<TR id="t_sec_mode" >
			<TD class="Item" style="padding-left:60px;">Wireless Security Mode:</TD>
				<TD><select name="secType" id="secType" class="listL" onChange="changeSecurityType();" style="width:210px">
					<option value="0">No Security</option>
					<SCRIPT type="text/javascript">
					document.write('<option id=\"t_wep_muilt\" value=\"1\">Secure(WEP)<\/option>');
					document.write('<option id=\"t_wpa_bridge\" value=\"3\">Most Secure(WPA/WPA2-PSK)<\/option>');
					</SCRIPT>
					</SELECT>
				</TD>
		</TR>
		<TR id=t_nonesec_warn>
			<TD class="Item" style="padding-left:60px;" disabled></TD>
			<TD style="color:gray;" disabled>If you choose No Security mode, the wireless stations will be able to connect 
			<br>the AP without encryption. It is recommened strongly that you choose one of <br>following options to enable security.</TD>
		</TR>
			
		<TR id="t_s_wep_type">
			    <TD class="Item" style="padding-left:60px;"><SPAN id="t_type">Type:</SPAN></TD>
			    
				<TD><SELECT name=wepSecOpt class="list" id=wepSecOpt>
					<OPTION value="3" id="t_auto" name="t_auto">Automatic</OPTION>
					<OPTION value="1" id="t_open_sys">Open System</OPTION>
					<OPTION value="2" id="t_shared_key">Shared Key</OPTION>
				    </SELECT>
			    </TD>
		</TR>
			
		<TR id="t_s_wep_form">
			    <TD class="Item" style="padding-left:60px;" id="t_wep_key_fmt">WEP Key Format:</TD>
			    
				<TD><SELECT name=wpekeytype class=list id=wpekeytype onChange="setKey();">
					<OPTION value=1 id="t_hex">Hexadecimal</OPTION>
					<OPTION value=2 id="t_ascii">ASCII</OPTION>
				    </SELECT>
			    </TD>
		</TR>
		<TR id="t_s_wep_key">
			<TD style="padding-left:30px"><TABLE border=0>
					<TR><TD class="Item" style="padding-left:60px;" id="t_key_sel">Key Selected</TD></TR>
					<SCRIPT type="text/javascript">
					var j;
					for (var i=1; i<5; i++)
					{
						j = i-1;
						document.write('<TR><TD class=ListC1 style="padding-left:60px"><span id="t_key">Key</span> '+i+':&nbsp;<input type=radio id=keynum name=keynum value='+i+'></TD></TR>');
					}
					</SCRIPT></TABLE>
				</TD>
				
				<TD><TABLE border=0>
					<TR>
						<TD style="font-size:13px;font-weight:bold;" id="t_wep_key">WEP Key</TD>
						<TD style="font-size:13px;font-weight:bold;" id="t_key_type">Key Type</TD>
						<TD style = "width:100%">&nbsp;</TD>
					</TR>
					<SCRIPT type="text/javascript">
					var j;
					for (var i=1; i<5; i++)
					{
						j = i-1;
						document.write('<TR><TD><input type=text class=text id=key'+i+' name=key'+i+' maxLength=32 size=32 value="" onfocus="if(key'+i+'dis) this.blur();else this.form.keynum['+j+'].checked=true;"></td>');
						document.write('<TD><select name=length'+i+'  id=length'+i+' onchange="setKey();">');
						document.write('<option value=0 id="t_disable">Disabled</option>');
						document.write('<option value=5 id="t_64">64bit</option>');
						document.write('<option value=13 id="t_128">128bit</option>');
						document.write('<option value=16 id="t_152">152bit</option>');
						document.write('</select></td>');
						document.write('<td style = "width:100%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>');
					}
					</SCRIPT>
					</TABLE>
			</TD>
		</TR>
		<TR id="t_warn_wep" >
			    <TD class="Item" style="padding-left:60px;" disabled></TD>
				<TD style="COLOR: gray;" disabled>We do not recommend using the WEP encryption if the device operates in <br>802.11n mode due to the fact that WEP is notsupported by 802.11n specification.</TD>
		</TR>
		
		<TR id="t_s_psk">
		        <TD class="Item" style="padding-left:60px;" id="t_psk_pwd">Wireless Password:</TD>
				<TD><INPUT name=pskSecret type=text class=text id="pskSecret" value="" size="32"></TD>
		</TR>
		<TR id="t_warn_psk" >
		        <TD class="Item" style="padding-left:60px;" disabled></TD>
			    <TD style="color:gray;" disabled>You can enter ASCII or Hexadecimal characters. For Hexadecimal, the length should <br>
												 be between 8 and 64 characters; for ASCII, the length should be between 8 and 63 <br>
												 characters. For good security it should be of ample length and should not be a <br>
												 commonly known pharse. </TD>
	    </TR>
        
        
        
        
        
        
<TR><TD class=blue colspan=2></TD></TR>
<TR>
	<TD class=mbtn colSpan=2>
		<INPUT name="Return" class=buttonBig id=PrevStep type="submit" value="Back" onClick="doBack()">&nbsp;&nbsp;
		<INPUT name="Next" class=buttonBig id=Submit type=submit value="Next" onClick="doNext()">&nbsp;
		<INPUT type=hidden name=ClientId>
</TD>
</TR></TABLE>
</form></center></BODY></HTML>
<SCRIPT type="text/javascript">
//printTipMsg();
var accessTypeIdx = 2;
var multiSysModeIdx = 0;
var sysModeIdx = 1;
var wlanDualBandIdx = 3;
var showStepInfoIdx = 4;

var bMultiSysMode = wzdForShowStepInfo[multiSysModeIdx];
var sysMode = wzdForShowStepInfo[sysModeIdx];
var accessType = wzdForShowStepInfo[accessTypeIdx];
var bWlanDualBand = wzdForShowStepInfo[wlanDualBandIdx];
var bShowStepInfoEnable = wzdForShowStepInfo[showStepInfoIdx];
if (bShowStepInfoEnable)
{
	showTipMsg(bMultiSysMode, sysMode, accessType, bWlanDualBand, "tips_msg", wlanStep);
}
</SCRIPT>
<script language="JavaScript"><!--//
document.forms[0].keytype.value = wzdWkModeSecInf[0];
displayPage();

if( secInf[0] == 0)
{
    document.forms[0].secType.value = 0;  //none
}
else 
{
    if( secInf[1] == 1 )
        document.forms[0].secType.value = 1; //WEP
    else if( secInf[1] == 2 || secInf[1] == 3)
        document.forms[0].secType.value = 3;//WPA
}

document.forms[0].wepSecOpt.value  = secInf[2]; //WEP Type
document.forms[0].wpekeytype.value = secInf[3]; //WEP Key Type
if(secInf[4] >0 && secInf[4]<5 )
    document.forms[0].keynum[secInf[4]-1].checked = true;
document.forms[0].length1.value = secInf[5];
document.forms[0].key1.value = secInf[6];
document.forms[0].length2.value = secInf[7];
document.forms[0].key2.value = secInf[8];
document.forms[0].length3.value = secInf[9];
document.forms[0].key3.value = secInf[10];
document.forms[0].length4.value = secInf[11];
document.forms[0].key4.value = secInf[12];
document.forms[0].pskSecret.value = secInf[13];
document.forms[0].pskSecret.maxLength = 64;

changeSecurityType();
setKey();
doSelKeytype();
if (1 == wzdWkModeSecInf[4])
{
	if ((2 == wzdWkModeSecInf[0]) || (3 == wzdWkModeSecInf[0]))
	{
		document.getElementById("t_keytype_unselected").style.display ="";
	}
	else if (1 == wzdWkModeSecInf[0] )
	{
	    document.getElementById("t_keytype_unselected").style.display ="none";
	}
	else
	{
		document.getElementById("t_keytype_selected").style.display ="";
	}
}


//--></script>
