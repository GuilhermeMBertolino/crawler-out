<script type="text/javascript">
var menuBasic = {
    'netMap': [{
        'name': menu_str['map'],
        'url': 'networkMap.htm'
    }],
    'internet': [{
        'name': menu_str['internet'],
        'url': 'wanBasic.htm'
    }],
    'wireless': [{
        'name': menu_str['wl'],
        'url': 'wirelessBasic.htm'
    }],
    'usb': [{
        'name': menu_str['usb'],
        'url': 'usbManage.htm'
    }, {
        'name': menu_str['fold'],
        'url': 'usbManage.htm'
    }, {
        'name': menu_str['printer'],
        'url': 'printSrv.htm'
    }, {
        'name': menu_str['usb3g'],
        'url': 'basic3g.htm',
    }],
    'voip': [{
        'name': menu_str['voip'],
        'url': 'voice_basic.htm'
    }],
    "homeCare":[{
        'name':menu_str['homeCare'],
        'url': 'homecare.htm',
        'autoLoad': true
    },{
        'name': menu_str['pc'],
        'url': 'parentCtrl.htm'
    },{
        'name':menu_str['qos'],
        'url':'qos.htm'
    },{
        'name':menu_str['antiVirus'],
        'url':'antiVirus.htm'
    }],
    // 'parentCtrl': [{
    //     'name': menu_str['pc'],
    //     'url': 'parentCtrl.htm'
    // }],
    'guestNtw': [{
        'name': menu_str['wlguest'],
        'url': 'wlGuestDulBandBasic.htm'
    }],
    'cloud': [{
        'name': menu_str['cloud'],
        'url': INCLUDE_CLOUD ? 'cloudBasic.htm' : 0
    }]
};

var menuAdv = {
    'status': [{
        'name': menu_str['status'],
        'url': 'status.htm'
    }],
    'sysMode': [{
        'name': menu_str['sysmod'],
        'url': INCLUDE_ROUTER_MODE? 'sysMode.htm' : 0
    }],
    'internet': [{
        'name': menu_str['network'],
        'url': 'ethWan.htm'
    }, {
        'name': menu_str['internet'],
        'url': 'ethWan.htm'
    }, {
        'name': menu_str['lan'],
        'url': 'lan.htm'
    }, {
		'name': menu_str['iptv'],
		'url': INCLUDE_IPTV ? 'iptv.htm':0
	}, {
        'name': menu_str['dhcp'],
        'url': 'dhcp.htm'
    }, {
        'name': menu_str['group'],
        'url': INCLUDE_ADSLWAN ? 'group.htm' : 0
    }, {
        'name': menu_str['ddns'],
        'url': 'ddns.htm'
    }, {
        'name': menu_str['advroute'],
        'url': 'route.htm'
    }, {
        'name': menu_str['ipsec'],
        'url': 'ipsec.htm'
    }],
    'wireless': [{
        'name': menu_str['wl'],
        'url': 'wirelessSettings.htm'
    }, {
        'name': menu_str['wlset'],
        'url': 'wirelessSettings.htm'
    }, {
        'name': menu_str['wps'],
        'url': 'wps.htm'
    }, {
        'name': menu_str['wlacl'],
        'url': 'macFilter.htm'
    }, {
        'name': menu_str['wlsche'],
        'url': 'wirelessSchedule.htm'
    }, {
        'name': menu_str['stat'],
        'url': 'wirelessStat.htm'
    } /* , {
        'name': menu_str['advset'],
        'url': 'wirelessAdv.htm'
    }*/],
    'guestNtw': [{
        'name': menu_str['wlguest'],
        'url': 'wlGuestDulBandAdv.htm'
    }],
    'voip': [{
        'name': menu_str['voip'],
        'url': 'voice_advance.htm'
    }, {
        'name': menu_str['voicetel'],
        'url': 'voice_advance.htm'
    }, {
		'name': menu_str['voicebook'],
        'url': 'voice_telebook.htm'
    }, {
		'name': menu_str['voicedev'],
        'url': 'voice_telephony.htm'
    }, {
		'name': menu_str['voicelog'],
        'url': 'voice_calllog.htm'
    }, {
		'name': menu_str['voicerule'],
        'url': 'voice_electionRule.htm'
    }, {
		'name': menu_str['voiceblock'],
        'url': 'voice_callblocks.htm'
    }, {
		'name': menu_str['voicefwd'],
        'url': 'voice_callforward.htm'
    }, {
		'name': menu_str['voiceth'],
        'url': 'voice_callthrough.htm'
    }, {
		'name': menu_str['voicedect'],
        'url': 'voice_dectadv.htm'
    }, {
		'name': menu_str['usbmail'],
        'url': 'voice_usbmail.htm'
    }],
    'fwd': [{
        'name': menu_str['fwd'],
        'url': 'alg.htm'
    }, {
		'name': menu_str['alg'],
        'url': 'alg.htm'
    }, {
        'name': menu_str['vs'],
        'url': 'virtualServer.htm'
    }, {
        'name': menu_str['pt'],
        'url': 'portTrigger.htm'
    }, {
        'name': menu_str['dmz'],
        'url': 'dmz.htm'
    }, {
        'name': menu_str['upnp'],
        'url': 'upnp.htm'
    }],
    'usb': [{
        'name': menu_str['usb'],
        'url': 'diskSettings.htm'
    }, {
        'name': menu_str['disk'],
        'url': 'diskSettings.htm'
    }, {
        'name': menu_str['fold'],
        'url': 'folderSharing.htm'
    }, {
        'name': menu_str['printer'],
        'url': 'printSrv.htm'
    }, {
        'name': menu_str['usb3g'],
        'url': 'usb3g.htm'
    }],
    'parentCtrl': [{
        'name': menu_str['pc'],
        'url': 'parentCtrl.htm'
    }],
    'qos':[{
        'name':menu_str['qos'],
        'url':'applicationPriority.htm'
    },{
        'name':menu_str['applicationPriority'],
        'url':'applicationPriority.htm'
    },{
        'name':menu_str['devicePriority'],
        'url':'devicePriority.htm'
    }],
/*
    'trafficCtrl': [{
        'name': menu_str['tc'],
        'url': 'trafficCtrl.htm'
     }],
*/
    'security': [{
        'name': menu_str['sec'],
        'url': 'antiVirus.htm'
    },{
        'name':menu_str['antiVirus'],
        'url':'antiVirus.htm'
    }, {
        'name': menu_str['settings'],
        'url': 'ddos.htm'
    }, {
        'name': menu_str['acc'],
        'url': 'accessControl.htm'
    }, {
        'name': menu_str['arp'],
        'url': 'arpBind.htm'
    }],
    'Ipv6': [{
        'name': menu_str['ipv6'],
        'url': 'ipv6.htm'
    }],
    'vpn': [{
        'name': menu_str['vpnserver'],
        'url': (INCLUDE_OPENVPN_SERVER) ? 'openvpnServer.htm' : ((INCLUDE_PPTPVPN_SERVER) ? 'pptpvpnServer.htm' : 0)
    }, {
        'name': menu_str['openvpn'],
        'url': (INCLUDE_OPENVPN_SERVER) ? 'openvpnServer.htm' : 0
    }, {
        'name': menu_str['pptpvpn'],
        'url': (INCLUDE_PPTPVPN_SERVER) ? 'pptpvpnServer.htm' : 0
    }, {
        'name': menu_str['vpnconn'],
        'url': (INCLUDE_VPN_SERVER) ? 'vpnServerStatus.htm' : 0
    }],
    'tools': [{
        'name': menu_str['tools'],
        'url': 'time.htm'
    }, {
        'name': menu_str['time'],
        'url': 'time.htm'
    }, {
        'name': menu_str['diag'],
        'url': 'diagnostic.htm'
    }, {
        'name': menu_str['softup'],
        'url': 'softup.htm'
    }, {
        'name': menu_str['bnr'],
        'url': 'backNRestore.htm'
    }, {
        'name': menu_str['admin'],
        'url': 'manageCtrl.htm'
    }, {
        'name': menu_str['log'],
        'url': 'log.htm'
    }, {
        'name': menu_str['snmp'],
        'url': 'snmp.htm'
    }, {
        'name': menu_str['stat'],
        'url': 'stat.htm'
    }, {
        'name': menu_str['sysConf'],
        'url': 'sysconf.htm'
    }, {
        'name': menu_str['ledTools'],
        'url': 'ledTools.htm'
    }]
};

var menuAP = {
    'netMap': [{
        'name': menu_str['map'],
        'url': 'networkMap.htm'
    }],
    'sysMode': [{
        'name': menu_str['sysmod'],
        'url': INCLUDE_ROUTER_MODE? 'sysMode.htm' : 0
    }],
    'internet': [{
        'name': menu_str['network'],
        'url': 'lan.htm'
    },{
        'name': menu_str['lan'],
        'url': 'lan.htm'
    }, {
        'name': menu_str['dhcp'],
        'url': 'dhcp.htm'
    }],
    'wireless': [{
        'name': menu_str['wl'],
        'url': 'wirelessSettings.htm'
    }, {
        'name': menu_str['wlset'],
        'url': 'wirelessSettings.htm'
    }, {
        'name': menu_str['wps'],
        'url': 'wps.htm'
    }, {
        'name': menu_str['wlacl'],
        'url': 'macFilter.htm'
    }, {
        'name': menu_str['wlsche'],
        'url': 'wirelessSchedule.htm'
    }, {
        'name': menu_str['stat'],
        'url': 'wirelessStat.htm'
    }],
    'usb': [{
        'name': menu_str['usb'],
        'url': 'diskSettings.htm'
    }, {
        'name': menu_str['disk'],
        'url': 'diskSettings.htm'
    }, {
        'name': menu_str['fold'],
        'url': 'folderSharing.htm'
    }, {
        'name': menu_str['printer'],
        'url': 'printSrv.htm'
    }, {
        'name': menu_str['usb3g'],
        'url': 'usb3g.htm'
    }],
    /*'cloud': [{
        'name': menu_str['cloud'],
        'url': INCLUDE_CLOUD ? 'cloudBasic.htm' : 0
	}],*/
    'tools': [{
        'name': menu_str['tools'],
        'url': 'time.htm'
    }, {
        'name': menu_str['time'],
        'url': 'time.htm'
    }, {
        'name': menu_str['diag'],
        'url': 'diagnostic.htm'
    }, {
        'name': menu_str['softup'],
        'url': 'softup.htm'
    }, {
        'name': menu_str['bnr'],
        'url': 'backNRestore.htm'
    }, {
        'name': menu_str['admin'],
        'url': 'manageCtrl.htm'
    }, {
        'name': menu_str['log'],
        'url': 'log.htm'
    }, {
        'name': menu_str['snmp'],
        'url': 'snmp.htm'
    }, {
        'name': menu_str['sysConf'],
        'url': 'sysconf.htm'
    }, {
        'name': menu_str['ledTools'],
        'url': 'ledTools.htm'
    }]
};

(function($) {
    'use strict';

    function TPMenu() {}

    TPMenu.prototype = {
        constructor: TPMenu,
        instances: [],
        init: function(id, menuargs) {
            var self = this;
            var page;
            var expr = /\w+.htm$/;
            var hasMore = 0; /* means has secondary menu */
            var inHTMLTmp = '';

            self.id = id;
            self.$menu = $("#" + id);

            if ($("#qs").hasClass("selected")) {
                $('#menu').tpMenu('destroy');
                $("#con").fadeOut(200);
                /* load quick setup clear main data */
                jQuery.cleanData($('#main').get(0).getElementsByTagName("*"));
                $('#main').empty();
                $.loadPage("quicksetup", "quicksetup.htm", function() {
                    $.emptyElem($.bak);
                    $.clearAsync();
                    $.unlock();
                });
                $("#quicksetup").fadeIn(200);
                $.curPage = "quicksetup.htm";
                return;
            } else {
                $("#con").fadeIn(200);
                $("#quicksetup").fadeOut(200);
            }

            var inHTML = '<div><ul class="mu1" id="menuTree">';

            /* Get menulist from DUT */
            $.cgi("./frame/menu.cgi", null, function(err) {
                if (err) {
                    return;
                }

                var menulistLen = menulist.length;
                for (var i = 0; i < menulistLen; i++) {
                    if (!$.local) {
                        if ((clientLocal == 0) && ((menulist[i] == 'softup.htm') || (menulist[i] == 'backNRestore.htm'))) {
                            menulist[i] = undefined;
                            continue;
                        }
                    }

                    var ret = expr.exec(menulist[i]);
                    if (ret) {
                        menulist[i] = ret[0];
                    } else {
                        menulist[i] = undefined;
                    }
                }

                self.menuFilter(menulist, menuargs);

                for (page in menuargs) {
                    inHTMLTmp = '';
                    hasMore = 0;

                    if (menuargs[page].length == 1) {
                        if (($.sysMode == "USB_3G" && menuargs[page][0].name == menu_str['internet']) ||
                            ($.sysMode != "ETH" && menuargs[page][0].name == menu_str['iptv']) || (menuargs[page][0].url == '0')) {
                            continue;
                        }
                        inHTML += '<li class="ml1"><a class="click" href="javascript:void(0);" url="' + menuargs[page][0].url + '">';
                        inHTML += '<span class="icon" id="' + page + '"></span>';
                        inHTML += '<span class="text T">' + menuargs[page][0].name + '</span></a>';
                        inHTML += '</li>';
                    } else {
                        if ($.sysMode == "USB_3G" && (menuargs[page][0].url == menu_str['wan'])) {
                            continue;
                        }
                        var flag = menuargs[page][0].autoLoad;
                        inHTMLTmp += '<li class="ml1"><a class="click more' + (flag ? " autoload" : "") + '" href="javascript:void(0);" url="' + menuargs[page][0].url + '">';
                        inHTMLTmp += '<span class="icon" id="' + page + '"></span>';
                        inHTMLTmp += '<span class="text T">' + menuargs[page][0].name + '</span></a>';
                        inHTMLTmp += '<ul class="mu2">';
                        for (var l = 1; l < menuargs[page].length; l++) {
                            if (($.sysMode == "USB_3G" && menuargs[page][l].name == menu_str['wan']) || (menuargs[page][l].url == '0')) {
                                continue;
                            }
                            hasMore = 1;
                            inHTMLTmp += '<li class="ml2"><a class="click" href="javascript:void(0);" url="' + menuargs[page][l].url + '">';
                            inHTMLTmp += '<span class="text T">' + menuargs[page][l].name + '</span></a>';
                            inHTMLTmp += '</li>';
                        }
                        inHTMLTmp += '</ul>';
                        inHTMLTmp += '</li>';
                        if (hasMore == 0) {
                            continue;
                        } else if (hasMore == 1 && inHTMLTmp !== undefined) {
                            inHTML += inHTMLTmp;
                        }
                    }
                }
                inHTML += '</ul></div>';
                $('#menu').append($(inHTML)).find('ul.mu2').hide();    //change for bug in ie11

                $("#menu").niceScroll({
                    cursorcolor: "#36444b",
                    cursoropacitymax: 0.15,
                    cursoropacitymin: 0.15,
                    touchbehavior: false,
                    cursorwidth: "8px",
                    cursorborder: "0",
                    cursorborderradius: "4px",
                    scrollspeed: 20,
                    zindex:2

                    });

                self.$a = $('a.click');
                self.$li = $('li');
                self.registerHandlers();
                self.$a.first().click();
            });
        },
        menuFilter: function(menulist, menuargs) {
            var have = 0;
            for (var page in menuargs) {
                for (var l = 0; l < menuargs[page].length; l++) {
                    have = 0;
                    $.each(menulist, function() {
                        var self = this;
                        if (this == menuargs[page][l].url) {
                            have = 1;
                            return false;
                        }
                    });
                    if ((have == 0)) {
                        menuargs[page][l].url = '0';
                    }
                }
            }
        },
        registerHandlers: function() {
            var self = this;
            var scrollAdjust = 0;
            self.$a.on('click.tpMenu', function(e) {
                var pageUrl;
                var me = $(this);
                var parentli = me.parent('li');

                if (parentli.hasClass('ml2')) {
                    //当点击二级菜单时，要关闭其它打开的二级菜单，并给当前一级菜单加上选中的样式
                    //移除所有选中样式
                    $('#menu').find('a').removeClass('sel').removeClass('clicked').parent('li.sel').removeClass('sel');

                    //给当前一级菜单加选中样式
                    var ancestorLi = parentli.closest('li.ml1');
                    ancestorLi.children('a').addClass('sel').addClass('clicked');
                    //给自己添加选中样式
                    me.addClass('sel').addClass('clicked');
                    parentli.addClass('sel');
                    //关闭除当前二级才外的所有可见的二级菜单,之后调整当前菜单的位置
                    scrollAdjust = ancestorLi.position().top;
                    $('#menu').find('li:not(:has(a.clicked)) ul.mu2:visible').slideUp('fast', function() {
                        $('#menu').scrollTop(ancestorLi.position().top - $('#menu').children(':first').position().top - scrollAdjust);
                    });
                } else if (me.hasClass('more')) {
                    //当点击有二级菜单的一级菜单时，显示或隐藏二级菜单，并隐藏其它非选中的二级菜单

                     var mu2 = me.next('ul.mu2');         //二级菜单
                    if (mu2.is(':visible')) {
                        //关闭菜单时，如果当前二级菜单没有被选中，去除一级菜单的打开样式
                        if (mu2.find('a.sel.clicked').length == 0) {
                            me.removeClass('clicked')
                        }
                        mu2.slideUp('fast', function() {
//                            $('#menu').scrollTop($('#menu')[0].scrollTop - mu2.height());
                        });
                } else {
                        //如果一级菜单有autoload属性，则load对应的page
                        if (me.hasClass("autoload")) {
                            //移除其他菜单选中样式
                            $('#menu').find('a').removeClass('sel').removeClass('clicked').parent('li.sel').removeClass('sel');
                            $('ul.mu2:visible').slideUp('fast', function() {
                                $('#menu').scrollTop(parentli.position().top - $('#menu').children(':first').position().top - scrollAdjust);
                            });
                            me.addClass("sel");
                            //加载对应页面
                            pageUrl = me.attr('url');
                            $('#scroll').scrollTop(0);
                            $.loadMain(pageUrl);
                        }


                        me.addClass('clicked');
                        mu2.slideDown('fast', function() {
                            $('#menu').scrollTop(me.position().top - $('#menu').children(':first').position().top);

                        });
                        //打开菜单时，如果有其他打开的但没有被选中的二级菜单，关闭它们
                        var tmpLi = parentli.siblings('li:has(a.clicked:not(.sel))');
                        tmpLi.find('a').removeClass('clicked');
                        tmpLi.find('ul.mu2').slideUp('fast');
                }
                    return;
                } else {
                    //当点击普通的一级菜单时
                    //移除所有选中样式
                    $('#menu').find('a').removeClass('sel').removeClass('clicked').parent('li.sel').removeClass('sel');
                    //隐藏其他二级菜单,当打开的二级菜单在当前项的前面时，滚动区域要减去ul的高度，否则会跳闪
                    scrollAdjust = parentli.position().top;
                    $('ul.mu2:visible').slideUp('fast', function() {
                        $('#menu').scrollTop(parentli.position().top - $('#menu').children(':first').position().top - scrollAdjust);
                    });
                    //给自己添加选中样式
                me.addClass('sel').addClass('clicked');
                }

                    pageUrl = me.attr('url');
                $('#scroll').scrollTop(0);
                $.loadMain(pageUrl);
            });

            //adjust menu's height, prevent menu overlapping bottom.
            function adjustMenuHeight() {
                var botHeight = $(window).height() - $('#bot').offset().top;
                botHeight = botHeight < 0 ? 0: botHeight;
                $('#menu').css('maxHeight', $(window).height() - botHeight -  $('#top').height() - parseInt($('#menu').css('marginTop').match(/\d*/)));
            }

            //when page scrolling or window resize or load a new page, need to adjust menu's height;
            $('#scroll').off('scroll.menu').on('scroll.menu', function() {
                adjustMenuHeight();
            });
            $(window).off('resize.menu loadPage.menu').on('resize.menu loadPage.menu', function() {
                adjustMenuHeight();
            });
            adjustMenuHeight();
        },
        destroy: function() {
            var self = this;
            if (self.$a) {
                self.$a.off('.tpMenu');
            }
            if (self.$li) {
                self.$li.off('.tpMenu');
            }
            delete Object.getPrototypeOf(self).instances[self.id];
        }
    };

    $.fn.tpMenu = function(options) {
        this.each(function() {
            var tpmenu = $(this).data('tpMenu');
            if (!tpmenu) {
                $(this).data('tpMenu', new TPMenu());
                $(this).data('tpMenu').init(this.id, menuargs);
            } else if (options === 'destroy' && tpmenu) {
                tpmenu.destroy();
            } else {
                tpmenu.destroy();
                $(this).data('tpMenu', new TPMenu());
                $(this).data('tpMenu').init(this.id, menuargs);
            }
        });
    };

})(jQuery);

var haveClick = false;
if ($("#advanced").hasClass("selected") || 
	$("#basic").hasClass("selected"))
	haveClick = true;

//if ($.isFD == 1 || $.isFD == 2) {
if ((haveClick == false) && ($.isFD == 1 || $.isFD == 2)) {
    $("#qs").addClass("selected");
    $("#con").fadeOut(200);
    $.loadPage("quicksetup", "quicksetup.htm", function() {
        $.curPage = "quicksetup.htm";
        $.emptyElem($.bak);
        $.clearAsync();
        $.unlock();
    });
    $("#quicksetup").css("display", "block");
} else {
    if ($("#advanced").hasClass("selected")) {
        menuargs = menuAdv;
    } else if ($("#qs").hasClass("selected")) {
        menuargs = {};
    } else if($("#APSetting").hasClass("selected")) {
        menuargs = menuAP
		 $("#base").css("background-color", "#f2f2f2");
    } else {
        menuargs = menuBasic;
        $("#basic").addClass("selected");
    }
    $('#menu').tpMenu(menuargs);
}
</script>
