<div class="stepDiv item-list nd">
    <div class="section-container">
        <div class="section-box nd">
            <input type="button" id="autoDe" >
        </div>
        <div class="section-box">
            <label class="section-labelTitle"><script type="text/html" class="trans"><%=$.tpLang.s_str.type%></script></label>
            <select class="fu" id="link_type">
                <option id="DynamicIp" value="DynamicIp"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_qsDynIp%></script></option>
                <option id="StaticIp" value="StaticIp"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_qsStaIp%></script></option>
                <option id="PPPoE" value="PPPoE"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_qsPPPoE%></script></option>
            </select>
        </div>
    </div>
    <div class="section-note mt16 nd">
        <span class="title"><script type="text/html" class="trans"><%=$.tpLang.diagnostic_nstr.t_note%></script></span>
        <p class="mt6"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_useAutoDect%></script></p>
    </div>
</div>
<script type="text/javascript">
    step1 = {};
    (function() {
        $('#autoDe').buttonMobile({
            text: $.tpLang.quicksetup_nstr.c_autoDetect
        });
        step1.styleInit = function() {
            $('#back').titleButton('show');
            $('#next').titleButton('status','next', $.tpLang.m_str.next);
            $('.titleBar').titleBar('title',$.tpLang.quicksetup_nstr.c_connType);

        }
    })();
</script>

<div class="stepDiv nd pb26">
    <div id="dynamic-ip" class="mt15 nd linkTypeDiv">
        <div class="section-note mt16">
            <span class="title"><script type="text/html" class="trans"><%=$.tpLang.diagnostic_nstr.t_note%></script></span>
            <p class="mt6"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_notCloneTips%></script></p>
        </div>
        <div id="mac-clone">
            <div  class="item-list mt15">
                <div class="section-container">
                <div class="section-box">
                    <div>
                        <span><script type="text/html" class="trans"><%=$.tpLang.ethWan_nstr.t_notclone%></script></span>
                    </div>
                    <input type="radio" name="cloneRadio" id="i-clone-n" />
                </div>
            </div>
                <div class="section-container">
                    <div class="section-box single">
                    <div>
                        <span><script type="text/html" class="trans"><%=$.tpLang.ethWan_nstr.t_clonecus%></script></span>
                    </div>
                    <input type="radio" name="cloneRadio" id="i-clone-c" />
                </div>
                <div class="section-box nd" id="radio2Div">
                    <input id="i-clone-mac" type="text" />
                </div>
            </div>
            </div>
            <div class="section-note mt16 nd" id="radio2Note">
                <span class="title"><script type="text/html" class="trans"><%=$.tpLang.diagnostic_nstr.t_note%></script></span>
                <p class="mt6"><script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_cloneTips%></script></p>
            </div>
        </div>
    </div>

    <div id="static-ip" class="mt15 nd linkTypeDiv">
        <p class="section-note">
            <script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_staicTips%></script>
        </p>
        <div class="item-list mt15">
            <div class="section-container" id="static-info">
            <div class="section-box">
                <input id="i-a-ip" type="text" />
            </div>
            <div class="section-box">
                <input id="i-a-mask" type="text" />
            </div>
            <div class="section-box">
                <input id="i-a-gateway" type="text" />
            </div>
            <div class="section-box">
                <input id="i-a-pdns" type="text" />
            </div>
            <div class="section-box">
                <input id="i-a-sdns" type="text" />
            </div>
        </div>
        </div>
    </div>
    <div id="pppoe-conn" class="mt15 linkTypeDiv">
        <p class="section-note">
            <script type="text/html" class="trans"><%=$.tpLang.quicksetup_nstr.c_pppoeTips%></script>
        </p>
        <div class="item-list mt15">
            <div class="section-container" id="pppoe-info">
            <div class="section-box">
                <input id="i-p-username" type="text" maxlength="255"/>
            </div>
            <div class="section-box">
                <input id="i-p-password" type="password" maxlength="255"/>
            </div>
        </div>
    </div>
</div>
</div>
<script type="text/javascript">
step2 = {};
(function() {
    //Clone MAC config
    $('#i-clone-n').radioMobile({
        'hasTitle': true,
        'checked': true
    }).bind('check.radioMobile', function() {
        $('#radio2Div').hide();
        $('#radio2Note').hide();
    });
    $('#i-clone-c').radioMobile({
        'hasTitle': true
    }).bind('check.radioMobile', function() {
        $('#radio2Div').show();
        $('#radio2Note').show();

    });
    $('#i-clone-mac').inputBoxMobile({
        'ipOrMac': 'mac',
        'warnings': [{
            func: function() {
                var err = $.mac($(this).val(), true);
                if (err !== 0) {
                    return e_str[err];
                } else {
                    return true;
                }
            }
        }]
    });

    //Static IP config
    $('#i-a-ip').inputBoxMobile({
        'title': $.tpLang.s_str.ipaddr,
        'ipOrMac': 'ip',
        'warnings': [{
            func: function() {
                var err = $.ifip($(this).val(), true);
                if (err !== 0) {
                    return e_str[err];
                } else {
                    return true;
                }
            }
        }]

    });
    $('#i-a-mask').inputBoxMobile({
        'title': $.tpLang.s_str.netmask,
        'ipOrMac': 'ip',
        'warnings': [{
            func: function() {
                var temp_mask = $(this).val();
                var err = $.mask(temp_mask, true);
                if (err !== 0) {
                    return e_str[err];
                }
                return true;
            }
        }]
    });
    $('#i-a-gateway').inputBoxMobile({
        'title': $.tpLang.s_str.defgw,
        'ipOrMac': 'ip',
        'warnings': [{
            func: function() {
                var gate = $(this).val();
                return e_str[$.ifip(gate, true)];
            }
        }]
    });
    $('#i-a-pdns').inputBoxMobile({
        'title': $.tpLang.s_str.dns,
        'ipOrMac': 'ip',
        'warnings': [{
            func: function() {
                var err = $.ifip($(this).val(), true);
                if (err !== 0) {
                    return e_str[ERR_WAN_DNSADDR_INVAD];
                } else {
                    return true;
                }
            }
        }]
    });
    $('#i-a-sdns').inputBoxMobile({
        'title': $.tpLang.s_str.secdns,
        'ipOrMac': 'ip',
        'placeholder': $.tpLang.s_str.optional,
        'warnings': [{
            func: function() {
                var temp_secdnsaddr = $(this).val();
                if ((temp_secdnsaddr != "") && (temp_secdnsaddr != "0.0.0.0") && ($.ifip(temp_secdnsaddr, true))) {
                    return e_str[ERR_WAN_SECDNS_INVAD];
                }
                return true;
            }
        }]
    });

    //PPPoE config
    $('#i-p-username').inputBoxMobile({
        'title': $.tpLang.s_str.username,
        'warnings': [{
            func: function() {
                if ($(this).val() == "") {
                    return e_str[ERR_USERNAME_INVAD];
                }
                return true;
            }
        }]
    });
    $('#i-p-password').inputBoxMobile({
        'title': $.tpLang.s_str.passwd
    });

    (function() {
        var showType;
        var wanTypes, wanIPList, wanPPPList, wanL2tpList, wanPptpList;
        var pStk, staticStk, staticEnable, dynStk, dynEnable, PPPoEStk, PPPoEEnable, staticName, dynName, PPPoEName;
        var l2tpStk, l2tpEnable, pptpStk, pptpEnable;
        var ethWan, wan_iplist_sta, wan_iplist_dyn, wan_pppoelist, wan_l2tp_list, wan_pptp_list;
        var pcMacAddr;

        function init() {
            var type = '';
            wanTypes = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
            wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "X_TP_IPv4Enabled", "addressingType", "name"]);
            wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "X_TP_IPv4Enabled", "transportType", "name"]);
            //            在linktype中加入pptp和l2tp
            if (INCLUDE_L2TP) {
                $("#linkType").append("<option value='l2tp'>L2TP</option>");
                wanL2tpList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "addressingType", "transportType"]);
            }
            if (INCLUDE_PPTP) {
                $("#linkType").append("<option value='pptp'>PPTP</option>");
                wanPptpList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "addressingType", "transportType"]);
            }

            if (!$.exe()) {
                $.each(wanTypes, function() {
                    if (this.WANAccessType == "Ethernet") {
                        pStk = this.__stack;
                    }
                });
                ethWan = $.act(ACT_GET, WAN_ETH_INTF, pStk, null, ["enable", "X_TP_lastUsedIntf"]);
                $.each(wanIPList, function() {
                    var tmpStk = $.stkPop(this.__stack, 2);
                    if (pStk == tmpStk && this.X_TP_IPv4Enabled == 1) {
                        if (this.addressingType == "Static") {
                            staticStk = this.__stack;
                            staticEnable = this.enable;
                            staticName = this.name;
                            if (this.enable == 1) type = "StaticIp";
                            wan_iplist_sta = $.act(ACT_GET, WAN_IP_CONN, this.__stack, null, null);
                        }
                        if (this.addressingType == "DHCP") {
                            dynStk = this.__stack;
                            dynEnable = this.enable;
                            dynName = this.name;
                            if (this.enable == 1) type = "DynamicIp";
                            wan_iplist_dyn = $.act(ACT_GET, WAN_IP_CONN, this.__stack, null, null);
                        }
                    }
                });
                $.each(wanPPPList, function() {
                    var tmpStk = $.stkPop(this.__stack, 2);
                    if (pStk == tmpStk && this.X_TP_IPv4Enabled == 1) {
                        if (this.transportType == "PPPoE") {
                            PPPoEStk = this.__stack;
                            PPPoEEnable = this.enable;
                            PPPoEName = this.name;
                            if (this.enable == 1) type = "PPPoE";
                            wan_pppoelist = $.act(ACT_GET, WAN_PPP_CONN, this.__stack, null, null);
                        }
                    }
                });
                if (INCLUDE_L2TP) {
                    $.each(wanL2tpList, function() {
                        var tmpStk = $.stkPop(this.__stack, 1);
                        if (pStk == tmpStk) {
                            l2tpStk = this.__stack;
                            l2tpEnable = this.enable;
                            wan_l2tp_list = $.act(ACT_GET, WAN_L2TP_CONN, this.__stack, null, null);
                            if (this.enable == 1) type = "l2tp";
                        }
                    });
                }
                if (INCLUDE_PPTP) {
                    $.each(wanPptpList, function() {
                        var tmpStk = $.stkPop(this.__stack, 1);
                        if (pStk == tmpStk) {
                            pptpStk = this.__stack;
                            pptpEnable = this.enable;
                            wan_pptp_list = $.act(ACT_GET, WAN_PPTP_CONN, this.__stack, null, null);
                            if (this.enable == 1) type = "pptp";
                        }
                    });
                }
                if (!$.exe()) {
                    showLnkType(type);
                }
            }
        }

        function initMacClone(wanConn) {
            $.act(ACT_CGI, "/cgi/info");
            $.exe(function() {
                if (wanConn.MACAddressOverride == 1) {
                    $("#i-clone-mac").inputBoxMobile('option', 'value', wanConn.X_TP_ClonedMACAddress);
                    $("#i-clone-n").radioMobile("option", 'checked', false);
                    $("#i-clone-c").radioMobile("option", 'checked', true);
                    $('#radio2Div').show();
                    $('#radio2Note').show();
                } else {
                    $("#i-clone-n").radioMobile("option", 'checked', true);
                    $("#i-clone-mac").inputBoxMobile('option', 'value', "");
                }
            });
        }

        function initDynamicIP() {
            initMacClone(wan_iplist_dyn);
        }

        function initStaticIP() {
            var dns1 = wan_iplist_sta.DNSServers.split(",")[0];
            var dns2 = wan_iplist_sta.DNSServers.split(",")[1];

            $("#i-a-ip").inputBoxMobile('option', 'value', wan_iplist_sta.externalIPAddress);
            $("#i-a-mask").inputBoxMobile('option', 'value', wan_iplist_sta.subnetMask);
            $("#i-a-gateway").inputBoxMobile('option', 'value', wan_iplist_sta.defaultGateway);
            $("#i-a-pdns").inputBoxMobile('option', 'value', dns1 ? dns1 : "0.0.0.0");
            $("#i-a-sdns").inputBoxMobile('option', 'value', dns2 ? dns2 : "0.0.0.0");

        }

        function initPPPoE() {
            $('#i-p-username').val(wan_pppoelist.username);
            $('#i-p-password').val(wan_pppoelist.password);
        }

        function initL2TP() {
            $("#i-s-type span").text('L2TP');
        }

        function initPPTP() {
            $("#i-s-type span").text('PPTP');
        }

        function showLnkType(type) {
            $('#link_type').selectMobile('value', type);
            initPPPoE();
            initStaticIP();
            initDynamicIP();
            if (INCLUDE_L2TP) {
                initL2TP();
            }
            if (INCLUDE_PPTP) {
                initPPTP();
            }
        }

        function doSave() {
            var linkType = $("#link_type").selectMobile('value');
            var wanConnArg = {};
            switch (linkType) {
                case "PPPoE":
                case "PPPoA":
                    wanConnArg = addAttrsPPP(linkType);
                    break;
                case "StaticIp":
                case "IPoA":
                    wanConnArg = addAttrsStaIpoa(linkType);
                    break;
                case "Pptp":
                case "L2tp":
                    wanConnArg = addAttrsPptpL2tp(linkType);
                    break;
                case "DynamicIp":
                    wanConnArg = addAttrsDynIp();
                    break;
                case "Bridge":
                    wanConnArg = {
                        enable: 1,
                        connectionType: "IP_Bridged"
                    };
                    break;
                default:
                    break;
            }
            if (wanConnArg == null) {
                return false;
            }

            doSaveEth(linkType, wanConnArg);

            return true;
        }

        function doSaveEth(linkType, wanConnArg) {
            var l3ForwardingObj = {
                __ifAliasName: '',
                __ifName: "",
                defaultConnectionService: ""
            };

            $.act(ACT_SET, WAN_IP_CONN, staticStk, null, ["enable=0"]);
            $.act(ACT_SET, WAN_IP_CONN, dynStk, null, ["enable=0"]);
            $.act(ACT_SET, WAN_PPP_CONN, PPPoEStk, null, ["enable=0"]);
            if (INCLUDE_L2TP) {
                $.act(ACT_SET, WAN_L2TP_CONN, l2tpStk, null, ["enable=0"]);
            }
            if (INCLUDE_PPTP) {
                $.act(ACT_SET, WAN_PPTP_CONN, pptpStk, null, ["enable=0"]);
            }
            var ipConn;
            switch (linkType) {
                case "PPPoE":
                    l3ForwardingObj.__ifAliasName = PPPoEName;
                    $.act(ACT_SET, WAN_PPP_CONN, PPPoEStk, null, wanConnArg);
                    break;
                case "DynamicIp":
                    l3ForwardingObj.__ifAliasName = dynName;
                    $.act(ACT_SET, WAN_IP_CONN, dynStk, null, wanConnArg);
                    break;
                case "StaticIp":
                    l3ForwardingObj.__ifAliasName = staticName;
                    $.act(ACT_SET, WAN_IP_CONN, staticStk, null, wanConnArg);
                    break;
                //                case "Pptp":
                //                    l3ForwardingObj.__ifAliasName = ethParam.pptp.name;
                //                    $.act(ACT_SET, WAN_PPTP_CONN, ethParam.pptp.stack, null, wanConnArg);
                //                    diagStack = ethParam.pptp.stack;
                //                    break;
                //                case "L2tp":
                //                    l3ForwardingObj.__ifAliasName = ethParam.l2tp.name;
                //                    $.act(ACT_SET, WAN_L2TP_CONN, ethParam.l2tp.stack, null, wanConnArg);
                //                    diagStack = ethParam.l2tp.stack;
                //                    break;
                //                default:
                //                    l3ForwardingObj.__ifAliasName = ethParam.dynamicIp.name;
                //                    $.act(ACT_SET, WAN_IP_CONN, ethParam.dynamicIp.stack, null, wanConnArg);
                //                    diagStack = ethParam.dynamicIp.stack;
                //                    break;
            }

            $.act(ACT_SET, L3_FORWARDING, null, null, l3ForwardingObj);
            $.exe(function(err) {
                if (!err) {
                    $.stopWaitingMobile();
                    step2.styleInitSaveSuccess();
                }
            });
        }

        function doCheck() {
            var linkType = $("#link_type").selectMobile('value');
            switch (linkType) {
                case "PPPoE":
                    if (!$("#i-p-username").inputBoxMobile('checkValue')) {
                        return false;
                    }
                    break;
                case "DynamicIp":
                    if ($('#i-clone-c').radioMobile('option', 'checked')) {
                        if (!$('#i-clone-mac').inputBoxMobile('checkValue')) {
                            return false;
                        }
                    }
                    break;
                case "StaticIp":
                    if (!$("#i-a-ip").inputBoxMobile('checkValue')) {
                        return false;
                    }
//                        mask
                    if (!$("#i-a-mask").inputBoxMobile('checkValue')) {
                        return false;
                    }
                    var temp_ip = $("#i-a-ip").val();
                    var temp_mask = $("#i-a-mask").val();
                    if ($.ipmask(temp_ip, temp_mask)) {
                        $("#i-a-mask").focus().select();
                        return false;
                    }

//                    gw
                    if (!$("#i-a-gateway").inputBoxMobile('checkValue')) {
                        return false;
                    }
                    var temp_gateway = $("#i-a-gateway").val();
                    if (!$.isSameLan(temp_gateway, temp_mask, temp_ip, temp_mask)) {
                        $.alert(ERR_GATEWAY_INVAD);
                        $("#i-a-gateway" ).focus().select();
                        return false;
                    }
//                        dns
                    if (!$("#i-a-pdns").inputBoxMobile('checkValue')) {
                        return false;
                    }
                    if (!$("#i-a-sdns").inputBoxMobile('checkValue')) {
                        return false;
                    }
                    break;
            }
            return true;
        }

        function addAttrsPPP(type) {
            var wanArg = {
                enable: 1,
                transportType: type,
                username: $("#i-p-username").val(),
                password: $("#i-p-password").val()
            };

            //            if (!$("#i-p-username").inputBoxMobile('checkValue')) {
            //                return null;
            //            }
            return wanArg;
        }
        //ethWan 中添加dyn的参数和macclone参数的方法

        function addAttrsDynIp() {
            var defaultHostname = $.getDefaultHostname();
            var wanArg = {
                enable: 1,
                connectionType: "IP_Routed",
                addressingType: "DHCP",
                NATEnabled: 1,
                X_TP_Hostname: defaultHostname
            }
            //            mac Clone
            if ($('#i-clone-n').radioMobile('option', 'checked')) {
                wanArg.MACAddressOverride = 0;
            } else if ($('#i-clone-c').radioMobile('option', 'checked')) {
                wanArg.MACAddressOverride = 1;
                //                if (!$('#i-clone-mac').inputBoxMobile('checkValue')) {
                //                    return null;
                //                } else {
                wanArg.X_TP_ClonedMACAddress = $('#i-clone-mac').val();
                //                }
            }
            return wanArg;
        }

        //        添加静态ip的参数

        function addAttrsStaIpoa(type) {
            var temp_ip = $("#i-a-ip").val();
            var temp_mask = $("#i-a-mask").val();
            var temp_gateway = $("#i-a-gateway").val();
            //            if (!$("#i-a-ip").inputBoxMobile('checkValue')) {
            //                return null;
            //            }
            //            if (!$("#i-a-mask").inputBoxMobile('checkValue')) {
            //                return null;
            //            }
            //
            //            if ($.ipmask(temp_ip, temp_mask)) {
            //                return null;
            //            }
            //
            //            if (!$("#i-a-gateway").inputBoxMobile('checkValue')) {
            //                return null;
            //            }



            var temp_dnsaddr = $("#i-a-pdns").val();
            var temp_secdnsaddr = $("#i-a-sdns").val();
            var temp_dnsServers = "";
            //            if (!$("#i-a-pdns").inputBoxMobile('checkValue')) {
            //                return null;
            //            }
            //            if (!$("#i-a-sdns").inputBoxMobile('checkValue')) {
            //                return null;
            //            }
            temp_dnsaddr = (temp_dnsaddr) ? $.ip2ip(temp_dnsaddr) : "0.0.0.0";
            temp_secdnsaddr = (temp_secdnsaddr) ? $.ip2ip(temp_secdnsaddr) : "0.0.0.0";
            temp_dnsServers = temp_dnsaddr + "," + temp_secdnsaddr;

            var wanArg = {
                enable: 1,
                connectionType: "IP_Routed",
                addressingType: "Static",
                NATEnabled: 1,
                externalIPAddress: $.ip2ip(temp_ip),
                subnetMask: $.ip2ip(temp_mask),
                defaultGateway: (temp_gateway) ? $.ip2ip(temp_gateway) : "0.0.0.0",
                DNSOverrideAllowed: (temp_dnsServers == "0.0.0.0,0.0.0.0") ? 0 : 1,
                DNSServers: temp_dnsServers
            };
            return wanArg;
        }

        step1.init = function() {
            init();
        }
        step2.init = function() {
            var linkType = $('#link_type').selectMobile('value');
            $('.linkTypeDiv').hide();
            switch (linkType) {
                case 'DynamicIp':
                    $('#dynamic-ip').show();
                    break;
                case 'StaticIp':
                    $('#static-ip').show();
                    break;
                case 'PPPoE':
                    $('#pppoe-conn').show();
                    break;
            }
        }
        step2.check = function() {
            return doCheck();
        }
        step2.save = function() {
            $.startWaitingMobile()
            doSave();
        }
        step2.styleInit = function() {
            $('#back').titleButton('show');
            $('#next').titleButton('status', 'unSave',$.tpLang.m_str.next);
            $('.titleBar').titleBar('title',$.tpLang.quicksetup_nstr.c_connType);
        }
        step2.styleInitSaveSuccess = function() {
            $('#next').titleButton('status', 'next', $.tpLang.m_str.next);
            $('#next').click();
        }
    })();
})();

// controller
//INCLUDE_GERMANY_SPEC = 0;
(function() {
    $.tpLocal('trans', $.tpLang);
    $('.titleBar').titleBar();
    $('select').selectMobile();


//德国的话省略步骤0
    if (INCLUDE_GERMANY_SPEC) {
        $('#qs-processFlow').processFlow({
            stepsArr: [null,'1', '2', '3', '4', '5'],
            //        步骤的初始位置
            stepCount: 1
        });
        step1.styleInit = function() {
            $('#back').titleButton('hide');
            $('#next').titleButton('status','next', $.tpLang.m_str.next);
            $('.titleBar').titleBar('title',$.tpLang.quicksetup_nstr.c_connType);

        }
        step1.styleInit();
        step1.init();
        showStepDiv(1);
        $.hideBlock('sumRegion');
        $.hideBlock('sumTZ');
    } else {
        $('#qs-processFlow').processFlow({
            stepCount: 0
        });
        step0.styleInit();
        step0.init();
        showStepDiv(0);
    }
    function showStepDiv(step) {
        $('.stepDiv').hide();
        $('.stepDiv:eq(' + step + ')').show();

    }

    function clearData() {
        step0 = null;
        step1 = null;
        step2 = null;
        step3 = null;
        step4 = null;
        step5 = null;
    }

//给a绑定事件，一定要在titleBar初始化之后，或调用$('#next').titleButton()手动初始化

    step4.save = function sumSave() {
        $.startWaitingMobile();
        if (!INCLUDE_GERMANY_SPEC) {
            step0.save();
        }
//            step2.save();
        step3.save();
        $.exe(function(err) {
            if (!err) {
                step4.styleInitSaveSuccess();
                $.stopWaitingMobile();
            }
        });
    }

    $('#next').on('click', function () {
        var step = $('#qs-processFlow').processFlow('option', 'stepCount');
        switch (step) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                if ($('#next').titleButton('status') == 'unSave') {
                    if (!step2.check()) {
                        return;
                    }
                    step2.save();
                    return;
                }

                break;
            case 3:
                if (!step3.check()) {
                    return;
                }
                break;
            case 4:
                if ($('#next').titleButton('status') == 'unSave') {
                    step4.save();
                    return;
                } else if ($('#next').titleButton('status') == 'reconnect') {
                    step4.reconnect();
                    return;
                }
                break;
            case 5:
                clearData();
                $.loadPhoneMain('networkMap.mobile.htm');
                return;
        }
        $('#qs-processFlow').processFlow('nextStep');
        step = $('#qs-processFlow').processFlow('option', 'stepCount');
        showStepDiv(step);
        switch (step) {
            case 0:
                break;
            case 1:
                step1.styleInit();
                step1.init();
                break;
            case 2:
                step2.styleInit();
                step2.init();
                break;
            case 3:
                step3.styleInit();
                step3.init();
                break;
            case 4:
                step4.styleInit();
                step4.init();
                break;
            case 5:
                step5.styleInit();
                step5.init();
                break;
            default:
                break;
        }
    });

    $('#back').on('click', function() {
        $('#qs-processFlow').processFlow('lastStep');
        var step = $('#qs-processFlow').processFlow('option', 'stepCount');
        showStepDiv(step);
        switch (step) {
            case 0:
                step0.styleInit();
                break;
            case 1:
                step1.styleInit();
                break;
            case 2:
                step2.styleInit();
                step2.init();
                break;
            case 3:
                step3.styleInit();
                break;
            case 4:
                step4.styleInit();
                step4.init();
                break;
            case 5:
                break;
            default:
                break;
        }
    });

})();
</script>