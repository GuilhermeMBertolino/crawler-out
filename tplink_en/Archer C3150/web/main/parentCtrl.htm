<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Status</title>
</head>

<body>
    <div class="content-container">
        <form id="outter-elem" class="pure-form pure-form-aligned">
            <div id="children-list">
                <p class="page-title" data-string="CHILD_LIST"></p>
                <div>
                    <div class="table-op" id="addItem">
                        <div class="table-btn">
                            <span id="addConnIcon" class="btn-add"></span>
                            <label class="T_add table-icon-text">Add</label>
                        </div>
                    </div>
                    <table id="children-grid">
                        <thead></thead>
                        <tbody id="children-grid-body">
                            <tr id="editContainer" class="nd">
                                <td colspan="7">
                                    <!-- <div id="divPage"></div> -->
                                    <div id="editor-container">
                                        <div id="tab-container" class="show-edit">
                                            <span id="basicInfoTab" data-key="basicInfo" data-string='BASIC_INFO'>Basic Info</span>
                                            <span class="switched" data-key="filter" data-string="FILTER_LEVEL">Filter Level</span>
                                            <span data-key="timelimit" data-string="TIME_CONTROL">Time Controls</span>
                                        </div>
                                        <div id="flow-process-container" class="show-add">
                                            <div class="flow-process-wrap">
                                                <span class="step current" data-key="basicInfo">
                                                    <span class="text" data-string="BASIC_INFO">Basic Infomation</span>
                                                </span>
                                                <span class="flow-bar"></span>
                                                <span class="step" data-key="filter">
                                                    <span class="text up" data-string="FILTER_LEVEL">Filter Level</span>
                                                </span>
                                                <span class="flow-bar"></span>
                                                <span class="step" data-key="timelimit">
                                                    <span class="text" data-string="TIME_CONTROL">Time Controls</span>
                                                </span>
                                            </div>
                                        </div>
                                        <div id="basicInfo">
                                            <div id="childname-container">
                                                <div class="input-container-label" data-string="LABEL_NAME">Name:</div>
                                                <div class="input-container">
                                                    <div class="before"></div>
                                                    <!-- <span class="user-icon"></span> -->
                                                    <div class="input-wrapper-container input-empty">
                                                        <span class="placeholder" data-string="ENTER_CHILD_NAME">Placeholder</span>
                                                        <input type="text">
                                                        <span class="showingText">showing</span>
                                                    </div>
                                                    <div id="childname-tips" class="input-tips">This field is required.</div>
                                                    <div class="after"></div>
                                                </div>
                                            </div>
                                            <div data-string="DEVICES_LIST">Devices List:</div>
                                            <div id="device-list">
                                                <div id="device-container">
                                                    <div class="devices-list-wrap">
                                                        <div class="devices"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="filter" style="display:none;">
                                            <div id="filter-level-container">
                                                <div id="filter-level">
                                                    <div id="tyke">
                                                        <div class="button-click"></div>
                                                        <div class="text">
                                                            <span data-string="TYKE">Pre-Kid</span>
                                                            <br />
                                                            <span>(0-7)</span>
                                                        </div>
                                                    </div>
                                                    <div id="pre_teen">
                                                        <div class="button-click"></div>
                                                        <div class="text">
                                                            <span data-string="PRE_TEEN">Pre-Kid</span>
                                                            <br />
                                                            <span>(8-12)</span>
                                                        </div>
                                                    </div>
                                                    <div id="teen">
                                                        <div class="button-click"></div>
                                                        <div class="text">
                                                            <span data-string="TEEN">Pre-Kid</span>
                                                            <br />
                                                            <span>(13-17)</span>
                                                        </div>
                                                    </div>
                                                    <div id="adult">
                                                        <div class="button-click"></div>
                                                        <div class="text">
                                                            <span data-string="ADULT">Pre-Kid</span>
                                                            <br />
                                                            <span>(>17)</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="select-filter-level" class="show-add info" data-string="SELECT_FILTER_LEVEL_INFO"></div>
                                            <div id="filterInfo" class="info">
                                                <span data-string="FILTER_INFO1"></span>
                                                <span id="pre-filter"></span>
                                                <span data-string="FILTER_INFO2"></span>
                                                <span id="select-child"></span>
                                                <span data-string="FILTER_INFO3"></span>
                                            </div>
                                            <div id="filter-content-container">
                                                <div id="selected-content">
                                                    <div id="filter-title">
                                                        <span data-string="FILTER_CONTENT">Filter Content:</span>
                                                        <span class="add-tab"></span>
                                                    </div>
                                                    <div id="filter-selected"></div>
                                                </div>
                                                <div id="available-content">
                                                    <div id="available-title" data-string="AVAILABLE_CATAGORIES">Available Catagories:</div>
                                                    <div id="filter-all"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="timelimit" style="display:none;">
                                            <div class="label" data-string="TIME_LIMITS">Time Limits</div>
                                            <div id="timelimit-container">
                                                <div id="workday-limit">
                                                    <label data-string="MON_TO_FRI">Mon to Fri</label>
                                                    <div class="checkbox"></div>
                                                    <div class="timebar-container"></div>
                                                </div>
                                                <div id="weekend-limit">
                                                    <label data-string="SAT_AND_SUN">Sat & Sun</label>
                                                    <div class="checkbox"></div>
                                                    <div class="timebar-container"></div>
                                                </div>
                                            </div>
                                            <div id="bedtimelimit-container">
                                                <div class="label" data-string="BED_TIME">BedTime:</div>
                                                <div id="workday-bedtime-limit">
                                                    <label data-string="MON_TO_FRI">Mon to Fri</label>
                                                    <div class="checkbox"></div>
                                                    <span class="time-setting-label" data-string="FROM">from</span>
                                                    <div class="start"></div>
                                                    <span class="time-setting-label" data-string="TO">to</span>
                                                    <div class="end"></div>
                                                </div>
                                                <div id="weekend-bedtime-limit">
                                                    <label data-string="SAT_AND_SUN">Sat & Sun</label>
                                                    <div class="checkbox"></div>
                                                    <span class="time-setting-label" data-string="FROM">from</span>
                                                    <div class="start"></div>
                                                    <span class="time-setting-label" data-string="TO">to</span>
                                                    <div class="end"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="editor-button" class="inline-btn-right">
                                            <button type="submit" class="green btn-cancel" id="btn-cancel" data-string="CANCEL">Cancel1</button>
                                            <button type="submit" class="green btn-prev" id="btn-prev" data-string="PREV">Prev1</button>
                                            <button type="submit" class="green btn-next" id="btn-next" data-string="NEXT" disabled>Next1</button>
                                            <button type="submit" class="green btn-save" id="btn-save" data-string="SAVE" disable>Save1</button>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

            </div>
            <table>
                <tr id="insights-container" class="nd not-paging">
                    <td colspan="7">
                        <div id="insights-content">
                            <div id="history-select">
                                <span id="history-detail"></span>
                                <select id="history-date"></select>

                            </div>
                            <div id="collection-info-container">
                                <div id="canvas-container">
                                    <div id="canvas-title" data-string="SPENT_ONLINE">SpentTime</div>
                                    <div id="total">
                                        <span id="total-times"></span>
                                    </div>
                                </div>
                                <div id="history-collection-container">
                                    <table id="history-collection"></table>
                                </div>
                            </div>
                            <div id="collection-empty-container">
                                <div class="icon"></div>
                                <div class="text" data-string="HISTORY_EMPTY_TIPS"></div>
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
            <div id="pover-container" style="display:none;">
                <div class="mask"></div>
                <div id="pover-area">
                    <div class="border position-top-left"></div>
                    <div class="border position-top"></div>
                    <div class="border position-top-right"></div>
                    <div class="border position-left"></div>
                    <div class="border position-right"></div>
                    <div class="border position-bottom-left"></div>
                    <div class="border position-bottom"></div>
                    <div class="border position-bottom-right"></div>
                    <div id="pover-content">
                        <div id="history-content">
                            <div class="pover-title" data-string="HISTORY">History</div>
                            <div id="history-table-container">
                                <table id="history-table">
                                    <thead>
                                        <th width="11%"></th>
                                        <th width="6%"></th>
                                        <th width="75%"></th>
                                        <th width="8%"></th>
                                    </thead>
                                    <tbody id="history-table-body"></tbody>
                                </table>
                            </div>
                            <div id="empty-history-container">
                                <div class="empty-icon"></div>
                                <div class="empty-text" data-string="HISTORY_EMPTY_TIPS"></div>
                            </div>
                        </div>
                        <div id="device-list-content">
                            <div class="pover-title" data-string="ADD_DEV"></div>
                            <div class="info" data-string="ADD_DEV_INFO"></div>
                            <div class="device-table-container">
                                <table id="device-table">
                                    <thead>
                                        <th width="10%"></th>
                                        <th width="20%" data-string="DEV_TYPE">Device Type</th>
                                        <th width="40%" data-string="DEV_NAME">Device Name</th>
                                        <th width="30%" data-string="MAC_ADDR">MAC Address</th>
                                    </thead>
                                    <tbody id="device-table-body"></tbody>
                                </table>
                            </div>
                            <div id="devices-table-page-divider">
                                <div class="table-bottom-pages">
                                    <span class="page gray paging-btn" data-index="prev"></span>
                                    <span class="number-container"></span>
                                    <span class="page right gray paging-btn" data-index="next"></span>
                                </div>
                            </div>
                            <div id="dev-button-container" class="inline-btn-right">
                                <button type="submit" class="green btn-dev-cancel" data-string="CANCEL">Cancel</button>
                                <button type="submit" class="green btn-dev-add" data-string="ADD">Add</button>
                            </div>
                        </div>
                    </div>
                    <span class="close-icon"></span>
                </div>
                <div id="pover-add-keyword">
                    <div class="border position-top-left"></div>
                    <div class="border position-top"></div>
                    <div class="border position-top-right"></div>
                    <div class="border position-left"></div>
                    <div class="border position-right"></div>
                    <div class="border position-bottom-left"></div>
                    <div class="border position-bottom"></div>
                    <div class="border position-bottom-right"></div>
                    <h1 data-string="ADD_KEYWORD">Add a New Keyword</h1>
                    <div id="custom-filter-container" class="input-container">
                        <div class="before"></div>
                        <div class="input-wrapper-container input-empty">
                            <span class="placeholder" data-string="KEYWORD_EG">Placeholder</span>
                            <input id="custom-filter" type="text" autocomplete="off" />
                            <span class="showingText">showing</span>
                        </div>
                        <div class="after"></div>
                        <div id="keyword-tips" class="input-tips">This field is required.</div>
                        <div id="keyword-hint-container"></div>
                    </div>
                    <div class="widget-container button-container submit">
                        <!-- <button id="btn-add-filter" class="editor-btn button-button btn-add-filter" type="button">
                        <span class="button-button-before"></span>
                        <span class="button-text text" data-string="ADD">Add</span>
                    </button> -->
                        <button type="submit" class="green btn-cancel" id="btn-add-filter" data-string="ADD">1</button>
                    </div>
                    <span class="close-icon"></span>
                </div>
            </div>
            <div id="help_parental_control"></div>
        </form>
    </div>
</body>
<script>
(function($) {
    $.su.clone = function(obj) {
        var type = Object.prototype.toString.call(obj);
        switch (type) {
            case "[object Array]":
                var result = [];
                for (var index = 0; index < obj.length; index++) {
                    result[index] = $.su.clone(obj[index]);
                }
                return result;
            case "[object Object]":
                var result = {};
                for (var index in obj) {
                    if (index == "__node") {
                        continue;
                    }
                    result[index] = $.su.clone(obj[index]);
                }
                return result;
            case "[object Function]":
                return obj;
            case "[object String]":
                var result = obj;
                return result;
            case "[object Number]":
                var result = obj;
                return result;
            case "[object Boolean]":
                if (!obj) {
                    return false;
                } else {
                    return true;
                }
            default:
                return undefined;
        }
    };
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(elt /*, from*/ ) {
            var len = this.length >>> 0;
            var from = Number(arguments[1]) || 0;
            from = (from < 0) ? Math.ceil(from) : Math.floor(from);
            if (from < 0)
                from += len;
            for (; from < len; from++) {
                if (from in this &&
                    this[from] === elt)
                    return from;
            }
            return -1;
        };
    }
})(jQuery);
$(document).ready(function() {
    /*文案本地化*/

    function localify() {
        $('[data-string]').each(function(i, obj) {
            $(obj).text($.tpLang.parent_control_nstr[$(obj).data('string')]);
        });
    }
    localify();
    /*-------------------------------Init DOM--------------------------------------------------------------------*/

    function initTimebar(elem) {
        var scaleUnit = '';
        for (var i = 0; i < 16; i++) {
            scaleUnit += '<span class="scale-unit"></span>';
        }
        var htmlString = '<div class="time-bar-container">\
            <div class="timebar">\
                <div class="slider">\
                    <div class="text">0.5h</div>\
                    <div class="icon"></div>\
                    </div>\
            </div>\
                <div class="scale">' + scaleUnit + '</div>\
                <div class="mark"><span class="lfloat">30' + $.tpLang.parent_control_nstr.MINS + '</span><span class="rfloat">8' + $.tpLang.parent_control_nstr.HOUR + '</span></div>\
            </div>';
        $(elem).html(htmlString);
    }

    function initCheckBox(elem, textString, status, disable) {
        var htmlString = '';
        var className = 'checkbox-wrap';
        var text = textString || '';
        if (status) {
            className += ' checked';
        }
        if (disable) {
            className += ' disable';
        }
        htmlString += '<div class="' + className + '"><span class="icon"></span><span class="text">' + text + '</span></div>';
        if (elem) {
            $(elem).empty().append(htmlString);
        }
        return htmlString;
    }
    $('div#editor-container .checkbox').each(function(i, obj) {
        initCheckBox($(obj), $.tpLang.parent_control_nstr.ENABLE);
    });
    $('.timebar-container').each(function(i, obj) {
        initTimebar($(this));
    });
    $('.start,.end').each(function(i, obj) {
        renderTimeSetting($(this));
    });

    // editor DOM init
    $('.timebar-container div.slider').draggabilly({
        axis: 'x',
        containment: true,
        handle: '.icon',
        grid: [21, 25]
    });
    $('div.slider').on('dragMove', function(event, pointer, moveVector) {
        var draggie = $(event.target).data('draggabilly');
        var count = parseInt(draggie.position.x / 21 + 1, 10);
        var times = count * 30;
        var hours = parseInt(times / 60, 10);
        var mins = parseInt(times % 60, 10);
        var htmlString;
        if (times < 60) {
            htmlString = mins + $.tpLang.parent_control_nstr.MINS;
        } else {
            htmlString = hours + $.tpLang.parent_control_nstr.HOUR + (mins ? mins + $.tpLang.parent_control_nstr.MINS : "");
        }
        $(event.target).find('div.text').text(htmlString);
    });

    var headArray = [{
        text: $.tpLang.parent_control_nstr.NAME,
        width: "10%"
    }, {
        text: $.tpLang.parent_control_nstr.FILTER_LEVEL,
        width: "18%"
    }, {
        text: $.tpLang.parent_control_nstr.TIME_LIMITS,
        width: "18%"
    }, {
        text: $.tpLang.parent_control_nstr.DEVICES,
        width: "10%"
    }, {
        text: $.tpLang.parent_control_nstr.INSIGHT,
        width: "12%"
    }, {
        text: $.tpLang.parent_control_nstr.INTERNET_ACCESS,
        width: "20%"
    }, {
        text: table_str.modify,
        width: "12%"
    }];

    function getLevel(level) {
        var result = "";
        switch (level) {
            case "tyke":
                result = $.tpLang.parent_control_nstr.TYKE;
                break;
            case "pre_teen":
                result = $.tpLang.parent_control_nstr.PRE_TEEN;
                break;
            case "teen":
                result = $.tpLang.parent_control_nstr.TEEN;
                break;
            case "adult":
                result = $.tpLang.parent_control_nstr.ADULT;
                break;
            default:
                break;
        }
        return result;
    }

    function getTimelimits(data) {
        var nowDayIndex = (new Date(currentTimestamp)).getDay();
        var isWorkday = (nowDayIndex >= 1 && nowDayIndex <= 5) ? true : false;
        var limits;
        if (isWorkday) {
            if (data.workday_limits_enable == 1) {
                limits = data.workday_limits;
            } else {
                limits = -1;
            }
        } else {
            if (data.weekend_limits_enable == 1) {
                limits = data.weekend_limits;
            } else {
                limits = -1;
            }
        }
        if (limits <= 0) {
            return "--";
        } else if (limits < 60) {
            return limits + $.tpLang.parent_control_nstr.MINS;
        } else {
            var mins = limits % 60;
            return parseInt(limits / 60, 10) + $.tpLang.parent_control_nstr.HOUR + (mins ? mins + $.tpLang.parent_control_nstr.MINS : "");
        }
    }

    function initTable() {
        var data = $.act(ACT_GL, PC_OWNER, null, null, null);
        $.exe();
        getOnlineDevices(function() {
            for (var i = 0; i < data.length; i++) {
                data[i].categories_list = $.act(ACT_GS, PC_CATEGORIES, null, data[i].__stack, ["category"]);
                data[i].website_list = $.act(ACT_GS, PC_WEBSITE_APPS, null, data[i].__stack, ["WebsiteOrApp"]);
                data[i].client_list = [];
                for (var j = 0; j < onlineDevices.length; j++) {
                    if (onlineDevices[j].ownerId == data[i].ownerId) {
                        data[i].client_list.push({
                            mac: onlineDevices[j].mac,
                            devType: onlineDevices[j].devType,
                            devName: onlineDevices[j].devName
                        });
                    }
                }
            }
            $.exe();
            // $.ajax({
            //     url: "smart_network?form=patrol_owner_list",
            //     success: function(data) {
            //         var data = data.data;
            gridItemArray = data;
            var array = [];
            for (var i = 0; i < data.length; i++) {
                var name = data[i].ownerName;
                var level = getLevel(data[i].filterLevel);
                var timelimit = getTimelimits(data[i]);
                var devices = data[i].client_list.length;
                var insights = (function(item) {
                    var inHTML = "<div class=\"button-container\">";
                    inHTML += "<a href=\"javascript:void(0);\" class=\"insights-icon\" data-key=\"" + item.__stack + "\">";
                    inHTML += "<span class=\"icon\"></span>";
                    inHTML += "<span class=\"text\"></span>";
                    inHTML += "</a>";
                    inHTML += "</div>";
                    return inHTML;
                })(data[i]);
                var pause = (function(item) {
                    var inHTML = "<div class=\"button-container\">";
                    inHTML += "<a href=\"javascript:void(0);\" class=\"internet-pause-icon" + (item.blocked === "1" ? ' pause' : '') + "\" data-key=\"" + item.__stack + "\">";
                    inHTML += "<span class=\"icon\"></span>";
                    inHTML += "<span class=\"text\">" + $.tpLang.parent_control_nstr.PAUSE + "</span>";
                    inHTML += "</a>";
                    inHTML += "</div>";
                    return inHTML;
                })(data[i]);
                var modify = "<span class='a table-grid-icon btn-edit' data-key='" + data[i].__stack + "'></span>&nbsp;<span class='a table-grid-icon btn-delete' data-key='" + data[i].__stack + "'></span>";
                array.push([{
                    text: name,
                    width: "20%"
                }, {
                    text: level,
                    width: ""
                }, {
                    text: timelimit,
                    width: "20%"
                }, {
                    text: devices,
                    width: "10%"
                }, {
                    text: insights,
                    width: "15%"
                }, {
                    text: pause,
                    width: "15%"
                }, {
                    text: modify,
                    width: "15%"
                }]);
            }
            if (array.length == 0) {
                var body = $("#children-grid").children("tbody");
                body.find('tr:not(.nd)').remove();
            }
            $.initTableBody($("#children-grid"), array);
            $.tablePages("#children-grid", 5);
        });

        // },
        // async: false
        // });
    }
    $.initTableHead($("#children-grid"), headArray);

    var time = $.act(ACT_GET, HOUR, null, null, null);
    $.exe();
    // var currentTimestamp = (new Date(time.year, time.month - 1, time.day, 0, 0, 0)).valueOf();
    var currentTimestamp = time.todayZeroClockTimestamp * 1000;

    function dateToString(date) {
        return [date.getFullYear(), date.getMonth() + 1, date.getDate()].join('-');
    }

    function initDateSelectOption(currentTimestamp) {
        var inHTML = "";
        inHTML += '<option value="0">' + $.tpLang.parent_control_nstr.TODAY + '</option>';
        inHTML += '<option value="1">' + $.tpLang.parent_control_nstr.YESTERDAY + '</option>';
        for (var i = 2; i < 7; i++) {
            inHTML += '<option value="' + i + '">' + convertLocalString(new Date(currentTimestamp - 24 * 60 * 60 * 1000 * (i))) + '</option>';
        }
        $("#history-date").html(inHTML);
    }
    initDateSelectOption(currentTimestamp);
    //history-container DOM init
    $("#history-date").on('click', function(e) {
        var value = $("#history-date").data("value");
        if (!historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex]) {
            return;
        }
        renderHistoryCollection(historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex][value]);
        renderHistoryChart(historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex][value].timeUsed);
    });

    var canvas = document.createElement('canvas');
    canvas.width = 148;
    canvas.height = 148;
    canvas.id = 'canvas';
    if (!canvas.getContext) {
        G_vmlCanvasManager.initElement(canvas);
    }
    $('#canvas-container').append(canvas);
    /*-------------------------------Data Storage--------------------------------------------------------------------*/
    /*status flag or record*/
    var editorStep = 1;
    var onlineDevicesShowingIndex = 1;
    var onlineDevicesPageLength = 1;

    /*data*/
    var gridItemArray = null; //data for grid item;
    var tmpGridItemArray = null; //block history后需要更新child list数据，为了更好的用户体验，用另外一个变量先保存最新的值，编辑时再从中取值。
    var historyCollectionArrayMgr = {
        showingIndex: 0,
        data: [] //collection of history for each grid item,every instance has 7 days data.
    };

    var historyDetailArray = []; //detail history data for each grid item,every instance has 7 days data.

    // var labelTotalArray = ['Online Communication And Search', 'Sex Education', 'Social Networking', 'Pay to Surf', 'Media', 'Download', 'Intimate Apparel', 'Abortion', 'Gambling'];
    var labelTotalArray = {};

    var grid = $("#children-grid"); //DOM element that listening the event of the grid.
    var insights = $('#insights-container');
    var editor = $("#editor-container");
    var outterElem = $('#outter-elem');
    var onlineDevices = []; //all the devices available

    var editorSnapshot = null; //all the data of the editor.

    var defaultFilter = {
        "tyke": [],
        "pre_teen": [],
        "teen": [],
        "adult": []
    };
    var preFilter = {
        "tyke": [],
        "pre_teen": [],
        "teen": [],
        "adult": []
    };

    var keywordList = [];
    var profileLimit = {};
    /*-------------------------------Public Interface--------------------------------------------------------------------*/

    function showLoading(name) {
        $.addLoading();
    }

    function hideLoading(name) {
        $.removeLoading();
    }
    /*-------------------------------Public Code--------------------------------------------------------------------*/

    function chkChildName() {
        var value = inputWrapper($("#childname-container"), "get");
        if (value.length <= 0) {
            $("#childname-tips").text($.tpLang.parent_control_nstr.MUST_NOT_BLANK);
            return false;
        } else if (value.length > 64) {
            $("#childname-tips").text($.tpLang.parent_control_nstr.CHILD_NAME_LENGTH_ERROR);
            return false;
        }
        return true;
    }

    function chkFilterLevel() {
        if (!editorSnapshot.filterLevel) {
            return false;
        }
        return true;
    }

    function chkKeyword(value) {
        if (!value) {
            $("#keyword-tips").text($.tpLang.parent_control_nstr.MUST_NOT_BLANK);
            return false;
        }
        /*check keyword match*/
        for (var i = 0; i < keywordList.length; i++) {
            if (value == keywordList[i].name) {
                return true;
            }
        }
        // if (keywordList.indexOf(value) >= 0) {
        //     return true;
        // }
        $("#keyword-tips").text($.tpLang.parent_control_nstr.KEYWORD_ERROR);
        return false;
    }

    function isURL(str_url) {
        // var strRegex = '^((https|http|ftp|rtsp|mms)?://)' + '?(([0-9a-z_!~*\'().&=+$%-]+: )?[0-9a-z_!~*\'().&=+$%-]+@)?' + '(([0-9]{1,3}.){3}[0-9]{1,3}' // IP形式的URL- 199.194.52.184 
        // + '|' // 允许IP和DOMAIN（域名） 
        // + '([0-9a-z_!~*\'()-]+.)*' // 域名- www. 
        // + '([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].' // 二级域名 
        // + '[a-z]{2,6})' // first level domain- .com or .museum 
        // + '(:[0-9]{1,4})?' // 端口- :80 
        // + '((/?)|' // a slash isn't required if there is no file name 
        // + '(/[0-9a-z_!~*\'().;?:@&=+$,%#-]+)+/?)$';
        var regex = /^([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?$/i;
        var re = new RegExp(regex);
        if (re.test(str_url)) {
            return (true);
        } else {
            return (false);
        }
    }

    function chkUrlFormat(value) {
        if (!isURL(value)) {
            $("#keyword-tips").text($.tpLang.parent_control_nstr.KEYWORD_ERROR);
            return false;
        }
        return true;
    }

    function getHistoryCollection(index, callback) {
        showLoading("historyCollection");
        var insightsArray = [];
        var insights = $.act(ACT_GS, PC_INSIGHTS_DAYS, null, gridItemArray[index].__stack, null);
        $.exe();
        for (var startInsightIndex = 0; startInsightIndex < insights.length; startInsightIndex++) {
            if (insights[startInsightIndex].timestampLastSaved * 1000 < currentTimestamp + 86400000) {
                break;
            }
        }
        var insightsIndex = startInsightIndex;
        for (var i = 0; i < 7; i++) {
            insightsArray[i] = {
                website_list: [],
                timeUsed: 0
            };
            if (insights[insightsIndex] && (insights[insightsIndex].timestampLastSaved * 1000 < currentTimestamp - 86400000 * (i - 1)) && (insights[insightsIndex].timestampLastSaved * 1000 > currentTimestamp - 86400000 * i)) {
                insightsArray[i].website_list = $.act(ACT_GS, PC_INSIGHTS_WEBAPPS, null, insights[insightsIndex].__stack, null);
                insightsArray[i].timeUsed = insights[insightsIndex].timeUsed;
                insightsIndex++;
            }
        }
        $.exe();
        historyCollectionArrayMgr.data[index] = insightsArray;
        if (callback) {
            callback();
        }
        // },
        // error: function() {
        //     historyCollectionArrayMgr.data[index] = [];
        //     renderHistoryChart(0);
        // },
        // complete: function() {
        hideLoading("historyCollection");
        // }
        // });
    }

    function getDetailHistoryList(index, callback) {
        showLoading("detailHistory");
        var history = $.act(ACT_GS, PC_INSIGHTS_HISTORIES, null, gridItemArray[index].__stack, null);
        $.exe();

        historyDetailArray[index] = history;
        if (callback) {
            callback();
        }
        // historyDetailArray[index] = [];
        hideLoading("detailHistory");
    }

    function getOnlineDevices(callback) {
        showLoading("onlineDevices");
        /*
        $.act(ACT_SET, HOMECARE_CLI_MGMT, null, null, {
            updateCliInfoNow: "1"
        });
        $.exe(); */
        $.act(ACT_OP, ACT_HOMECARE_UPDATE_CLIINFO_PC);
        $.exe();
        // var index = 0;
        // setTimeout(function() {
        //     index++;
        //     var status = $.act(ACT_GET, HOMECARE_CLI_MGMT, null, null, ["updateCliInfoResult"]);
        //     $.exe();
        //     if (status.updateCliInfoResult == "1" || status.updateCliInfoResult == "2" || index == 6) {
        onlineDevices = $.act(ACT_GL, HOMECARE_CLI_INFO, null, null, null);
        if (!$.exe()) {
            if (callback) {
                callback();
            }
        }
        hideLoading("onlineDevices");
        //     } else {
        //         setTimeout(arguments.callee, 500);
        //     }
        // }, 500);
    }

    function getDefaultLimit() {
        showLoading("getProfileSetting");
        // var patrolLimit = $.act(ACT_GET, PC_PATROL_LIMIT, null, null, null);
        // $.exe(function(err) {
        //     if (err) {
        //         profileLimit = {
        //             profileLength: 16,
        //             devicesLength: 16,
        //             categoryLength: 32
        //         };
        //     } else {
        //         profileLimit = {
        //             profileLength: patrolLimit.profileLength,
        //             devicesLength: patrolLimit.devicesLength,
        //             categoryLength: patrolLimit.categoryLength
        //         };
        //     }
        //     hideLoading("getProfileSetting");
        // });

        //固定限制长度，当数据从后台获取长度限制时，注释掉此处代码。
        profileLimit = {
            profileLength: 16,
            devicesLength: 16,
            categoryLength: 32
        };
    }

    function getDefaultFilterTab() {
        showLoading("defaultFilter");
        var filter_list = $.act(ACT_GL, PC_DEFAULT_FILTER, null, null, null);
        $.exe();
        for (var i = 0; i < filter_list.length; i++) {
            filter_list[i].categoriesList = (filter_list[i].categoriesList.length > 0) ? filter_list[i].categoriesList.split(",") : [];
            filter_list[i].removableCatList = (filter_list[i].removableCatList.length > 0) ? filter_list[i].removableCatList.split(",") : [];
            defaultFilter[filter_list[i].filterLevel] = filter_list[i].categoriesList;
            preFilter[filter_list[i].filterLevel] = filter_list[i].removableCatList;
        }
        if (defaultFilter.all) {
            labelTotalArray = {};
            for (var i = 0; i < defaultFilter.all.length; i++) {
                labelTotalArray[defaultFilter.all[i]] = $.tpLang.parent_control_nstr[defaultFilter.all[i]] || defaultFilter.all[i];
            }
        }
        hideLoading("defaultFilter");
    }
    getDefaultFilterTab();
    getDefaultLimit();

    function getPresetKeyword() {
        showLoading("defaultKeyword");
        /*in production mode,use $.cgi to get app filter,
        in simulator,use a javascript array.*/
        $.act(ACT_CGI, "/cgi/getTmPcFilAppsDb");
        $.exe();

        //simulator mode 

        var appFilterList = g_tmPcFilAppsList;

        // $.ajax("smart_network?form=filter_apps_list", {
        //     method: "post",
        //     data: {
        //         operation: "get"
        //     },
        //     success: function(data) {
        keywordList = [];
        for (var i = 0; i < appFilterList.length; i++) {
            keywordList.push({
                name: appFilterList[i][3]
            });
        }
        // keywordList = data.data;
        renderKeywordHint(keywordList);
        // },
        // error: function() {

        // },
        // complete: function() {
        hideLoading("defaultKeyword");
        //     }
        // });
    }
    getPresetKeyword();

    function changePauseStatus(index, flag, callback) {
        showLoading("changePause");
        var obj = {
            blocked: flag ? "1" : "0"
        };
        $.act(ACT_SET, PC_OWNER, gridItemArray[index].__stack, null, obj);
        if (!$.exe()) {
            if (callback) {
                callback();
            }
        }

        hideLoading("changePause");
    }

    function changInsightBlockStatus(index, stack, flag, historyOrCollectionFlag, callback) {
        showLoading("changeWebBlock");
        var obj = {
            blocked: flag ? "1" : "0"
        };
        if (historyOrCollectionFlag) {
            $.act(ACT_SET, PC_INSIGHTS_HISTORIES, stack, null, obj);
        } else {
            $.act(ACT_SET, PC_INSIGHTS_WEBAPPS, stack, null, obj);
        }
        if (!$.exe()) {
            if (callback) {
                callback();
            }
        }

        hideLoading("changeWebBlock");
    }

    function getUpdateChildListData() {
        tmpGridItemArray = $.act(ACT_GL, PC_OWNER, null, null, null);
        $.exe();
        for (var i = 0; i < tmpGridItemArray.length; i++) {
            tmpGridItemArray[i].categories_list = $.act(ACT_GS, PC_CATEGORIES, null, tmpGridItemArray[i].__stack, ["category"]);
            tmpGridItemArray[i].website_list = $.act(ACT_GS, PC_WEBSITE_APPS, null, tmpGridItemArray[i].__stack, ["WebsiteOrApp"]);
        }
        $.exe();
    }

    function getEditorData() {
        editorSnapshot.name = inputWrapper($("#childname-container"), "get");
        editorSnapshot.weekend_bedtime_enable = checkBox($("#weekend-bedtime-limit"), "get") ? "1" : "0";
        editorSnapshot.workday_bedtime_enable = checkBox($("#workday-bedtime-limit"), "get") ? "1" : "0";
        editorSnapshot.weekend_limits_enable = checkBox($("#weekend-limit"), "get") ? "1" : "0";
        editorSnapshot.workday_limits_enable = checkBox($("#workday-limit"), "get") ? "1" : "0";

        var tmp;
        tmp = timeBoard($("#weekend-bedtime-limit .start"), "get");
        editorSnapshot.weekend_bedtime_begin = tmp[0] % 12 * 60 + tmp[1] * 1 + (tmp[2] == "AM" ? 0 : 720);

        tmp = timeBoard($("#weekend-bedtime-limit .end"), "get");
        editorSnapshot.weekend_bedtime_end = tmp[0] % 12 * 60 + tmp[1] * 1 + (tmp[2] == "AM" ? 0 : 720);

        tmp = timeBoard($("#workday-bedtime-limit .start"), "get");
        editorSnapshot.workday_bedtime_begin = tmp[0] % 12 * 60 + tmp[1] * 1 + (tmp[2] == "AM" ? 0 : 720);

        tmp = timeBoard($("#workday-bedtime-limit .end"), "get");
        editorSnapshot.workday_bedtime_end = tmp[0] % 12 * 60 + tmp[1] * 1 + (tmp[2] == "AM" ? 0 : 720);

        editorSnapshot.weekend_limits = timeBar($("#weekend-limit"), "get") * 60;
        editorSnapshot.workday_limits = timeBar($("#workday-limit"), "get") * 60;

        var defaultFilterArray = defaultFilter[editorSnapshot.filterLevel];
        var filterArray = editorSnapshot.categories_list;
        for (var i = 0; i < defaultFilterArray.length; i++) {
            if (filterArray.indexOf(defaultFilterArray[i]) < 0) {
                filterArray.push(defaultFilterArray[i]);
            }
        }
    }

    function renderHistoryChart(totalTimes) {
        totalTimes = parseInt(totalTimes, 10);
        // if(insights.)
        if (!$("#canvas").is(":visible")) {
            return;
        }
        var data = [{
            value: totalTimes || 1, //IE8下0会变灰，因此设置1避免此情况，1相对于1440很小，几乎没有影响
            color: "#4acbd6"
        }, {
            value: 1440 - totalTimes,
            color: "#A7A9AC"
        }];
        var options = {
            percentageInnerCutout: 90,
            showTooltips: false,
            animationSteps: 50
        };
        new Chart(document.getElementById('canvas').getContext("2d")).Doughnut(data, options);
        // var computeTimes = parseInt(totalTimes / 60) * 60 + parseInt(totalTimes % 60 / 30) * 30;
        if (totalTimes < 60) {
            $('#total-times').html(totalTimes + $.tpLang.parent_control_nstr.MINS);
        } else {
            var mins = totalTimes % 60;
            $('#total-times').html(parseInt(totalTimes / 60) + $.tpLang.parent_control_nstr.HOUR + (mins ? mins + $.tpLang.parent_control_nstr.MINS : ""));
        }

    }

    function renderHistoryCollection(data) {
        var items = data.website_list;
        var history = '';
        if (!$.isArray(items)) {
            items = [];
        }

        if (items.length == 0) {
            $("#collection-empty-container").show();
            $("#collection-info-container").hide();
            return;
        } else {
            $("#collection-empty-container").hide();
            $("#collection-info-container").show();
        }
        for (var j = 0; j < items.length; j++) {
            var timeString = "";
            if (items[j].timeUsed < 60) {
                timeString = items[j].timeUsed + $.tpLang.parent_control_nstr.MINS;
            } else {
                var mins = items[j].timeUsed % 60;
                timeString = parseInt(items[j].timeUsed / 60) + $.tpLang.parent_control_nstr.HOUR + (mins ? mins + $.tpLang.parent_control_nstr.MINS : "")
            }

            history += "<tr>";
            history += "<td class='url'>";
            // history += "<a target=_blank href='http://www.google.com/search?&as_epq=" + items[j].website + "'>" + items[j].website + "</a></td>";
            history += '<span class="website">' + items[j].websiteOrApp + '</span>';
            history += "<td class='time'>" + timeString + "</td>";
            history += "<td class='block'><span class='block-icon" + (items[j].blocked == "1" ? " blocked" : "") + "' target='" + items[j].__stack + "'><span class='icon-hint'>" + ((items[j].blocked == "1") ? $.tpLang.parent_control_nstr.UNBLOCK : $.tpLang.parent_control_nstr.BLOCK) + "</span></span></td></tr>";
        }
        $('#history-collection').html(history);
    }

    function convertLocalString(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        if (month < 10) {
            month = '0' + month;
        }
        if (day < 10) {
            day = '0' + day;
        }
        return [month, day, year].join("/");
    }

    function renderHistoryTable() {
        var array = historyDetailArray[historyCollectionArrayMgr.showingIndex] || [],
            htmlString = '';
        if (!$.isArray(array)) {
            array = [];
        }
        var tmpArray = [];
        var count = 0;
        if (array.length <= 0) {
            $("#history-table-container").hide();
            $("#empty-history-container").show();
            return;
        } else {
            $("#history-table-container").show();
            $("#empty-history-container").hide();
        }

        function transferHistory(count, obj) {
            if (!tmpArray[count]) {
                tmpArray[count] = {
                    date: convertLocalString((new Date(obj.timestampLastUsed * 1000))),
                    data: []
                };
            }
            var objDate = new Date(obj.timestampLastUsed * 1000);
            if (convertLocalString(objDate) != tmpArray[count].date) {
                count++;
                transferHistory(count, obj);
            } else {
                var hour = (objDate.getHours() > 12) ? (objDate.getHours() - 12) : objDate.getHours();
                var minute = (objDate.getMinutes() < 10 ? ("0" + objDate.getMinutes()) : objDate.getMinutes());
                var halfday = (objDate.getHours() > 12) ? "PM" : "AM";
                tmpArray[count].data.push({
                    site: obj.websiteOrApp,
                    time: hour + ":" + minute + " " + halfday,
                    blocked: obj.blocked,
                    stack: obj.__stack
                });
            }
        }
        for (var i = 0; i < array.length; i++) {
            transferHistory(count, array[i]);
        }

        var now = new Date(currentTimestamp);
        var today = convertLocalString(now);
        var yesterday = convertLocalString((new Date(now.getTime() - 24 * 60 * 60000)));
        for (var i = 0; i < tmpArray.length; i++) {
            htmlString += '<tr>';
            if (tmpArray[i].date == today) {
                htmlString += '<td colspan="4" class="title">' + $.tpLang.parent_control_nstr.TODAY + '</td></tr>';
            } else if (tmpArray[i].date == yesterday) {
                htmlString += '<td colspan="4" class="title">' + $.tpLang.parent_control_nstr.YESTERDAY + '</td></tr>';
            } else {
                htmlString += '<td colspan="4" class="title">' + tmpArray[i].date + '</td></tr>';
            }
            for (var j = 0; j < tmpArray[i].data.length; j++) {
                var tmpClass = '';
                if (j == 0) {
                    htmlString += '<tr class="blank-top"><td colspan="4"></td></tr>';
                    tmpClass = ' first-history';
                } else if (j == tmpArray[i].data.length - 1) {
                    tmpClass = ' last-history';
                }
                if (tmpArray[i].data.length == 1) {
                    tmpClass += ' only-one';
                }
                htmlString += '<tr>\
                <td class="time">' + tmpArray[i]['data'][j]['time'] + '</td>\
                <td><span class="split-icon' + tmpClass + '"></span></td>\
                <td>' + tmpArray[i]['data'][j]['site'] + '</td>\
                <td><span class="history-detail block-icon' + (tmpArray[i]['data'][j].blocked == "1" ? " blocked" : "") + '" target="' + tmpArray[i]['data'][j]['stack'] + '"><span class="icon-hint">' + ((tmpArray[i]['data'][j].blocked == "1") ? $.tpLang.parent_control_nstr.UNBLOCK : $.tpLang.parent_control_nstr.BLOCK) + '</span></span></td>\
                </tr>';
            }
            htmlString += '</tr>';
            if (i < array.length - 1) {
                htmlString += '<tr class="blank-bottom"><td colspan="4"></td></tr>';
            }
        }
        $('#history-table-body').html(htmlString);
    }

    function renderDevicesList(devices) {
        var htmlString = '';
        for (var i = 0; i < devices.length; i++) {
            var className = devices[i]['devType'];
            className += ' icon';
            htmlString += '<div class="devices"><div class="icon-wrap" data-index="' + i + '"><span class="' + className + '"></span><span class="close-icon" data-index="' + i + '"></span></div><div class="text">' + devices[i].devName + '</div></div>';
        }
        htmlString += '<div class="add-button"><span class="icon"></span><span class="text">' + $.tpLang.parent_control_nstr.ADD_HIS_HER_DEV + '</span></div>';
        editor.find('.devices-list-wrap').html(htmlString);
    }

    function renderDevicesListTable(owner) {
        var nameArray = {};
        var store = gridItemArray;
        for (var i = 0; i < store.length; i++) {
            nameArray[store[i].ownerId] = store[i].ownerName;
        }
        var htmlString = '';
        var flag;
        for (var i = 0; i < onlineDevices.length; i++) {
            flag = (onlineDevices[i].ownerId != -1 && onlineDevices[i].ownerId != owner) ? true : false;
            htmlString += '<tr name="' + onlineDevices[i].mac + '">\
            <td><div class="checkbox">' + initCheckBox(null, null) + '</div></td>\
            <td><span class="dev-icon ' + onlineDevices[i].devType + ' " data-val="' + onlineDevices[i].devType + '"></span></td>\
            <td><span class="name" title="' + onlineDevices[i].devName + '">' + onlineDevices[i].devName + '</span>' + (flag ? '<span class="ownerInfo"><span class="text" title="' + nameArray[onlineDevices[i].ownerId] + '">' + nameArray[onlineDevices[i].ownerId] + '</span></span>' : '') + '</td>\
            <td>' + onlineDevices[i].mac + '</td>\
            </tr>';
        }
        if (onlineDevices.length <= 0) {
            htmlString += "<tr><td></td><td>--</td><td>--</td><td>--</td></tr>";
            $("#devices-table-page-divider").hide();
        } else {
            $("#devices-table-page-divider").show();
        }
        $('#pover-container #device-table-body').html(htmlString);
        for (var i = 0; i < editorSnapshot.client_list.length; i++) {
            checkBox($('#pover-container #device-table-body').find('[name="' + editorSnapshot.client_list[i].mac + '"]'), "checked");
        }
        renderDevicesListTablePageDivider();
    }

    function renderDevicesListTablePageDivider() {
        var length = onlineDevices.length;
        var pages = parseInt((length - 1) / 5, 10) + 1;
        onlineDevicesPageLength = pages;
        var inHTML = "";
        for (var i = 1; i <= onlineDevicesPageLength; i++) {
            inHTML += '<span href="javascript:void(0);" class="paging-btn paging-btn-num" data-index="' + i + '">' + i + '</span><span class="dots">...</span>';
        }
        $("#devices-table-page-divider .number-container").html(inHTML);
        changePageIndex(1);
    }

    function updatePageNumber(num) {
        var currentPage = parseInt(num, 10);
        var container = $("#devices-table-page-divider");
        var btns = container.find("span.paging-btn-num");
        var dots = container.find("span.dots");

        dots.removeClass("more");

        if (onlineDevicesPageLength > 7) {
            var gap1 = 0 + currentPage - 2,
                gap2 = 0 + currentPage + 3 - (onlineDevicesPageLength - 1),

                minNum = 0,
                maxNum = 0;

            if (gap1 > 0) {
                if (gap2 > 0) {
                    minNum = 0 + currentPage - 2 - gap2;
                    maxNum = 0 + onlineDevicesPageLength;
                } else {
                    minNum = 0 + currentPage - 2;
                    maxNum = 0 + currentPage + 3;
                }
            } else {
                if (gap2 > 0) {
                    minNum = 0;
                    maxNum = 0 + onlineDevicesPageLength;
                } else {
                    minNum = 0;
                    maxNum = 0 + currentPage + 3 - gap1;
                }
            }

            btns.addClass("nd");

            for (var index = minNum; index < maxNum; index++) {
                btns.eq(index).removeClass("nd");
            }

            if (gap1 > 1) {
                btns.eq(minNum).prev("span.dots").addClass("more");
            }

            if (gap2 < 0) {
                btns.eq(maxNum).next("span.dots").addClass("more");
            }

            btns.filter(":first").removeClass("nd");
            btns.filter(":last").removeClass("nd");
        }
    }

    function changePageIndex(index) {
        onlineDevicesShowingIndex = index;
        var target = $("#device-table-body");
        var divider = $("#devices-table-page-divider");
        var trs = $(target).find("tr");
        trs.hide();
        trs.slice((index - 1) * 5, index * 5).show();
        $(divider).find("span.paging-btn").removeClass("click-page");
        $(divider).find("span.paging-btn[data-index=" + index + "]").addClass("click-page");
        if (onlineDevicesPageLength == 1) {
            $(divider).find("span.paging-btn[data-index='next']").addClass("gray");
            $(divider).find("span.paging-btn[data-index='prev']").addClass("gray");
            updatePageNumber(index);
            return;
        }
        if (index == 1) {
            $(divider).find("span.paging-btn[data-index='next']").removeClass("gray");
            $(divider).find("span.paging-btn[data-index='prev']").addClass("gray");
        } else if (index == onlineDevicesPageLength) {
            $(divider).find("span.paging-btn[data-index='prev']").removeClass("gray");
            $(divider).find("span.paging-btn[data-index='next']").addClass("gray");
        } else {
            $(divider).find("span.paging-btn[data-index='prev']").removeClass("gray");
            $(divider).find("span.paging-btn[data-index='next']").removeClass("gray");
        }
        updatePageNumber(index);
    }

    function renderFilterTab(selected, filter) {
        var totalString = '',
            selectedString = '',
            total = labelTotalArray,
            selected = selected || [],
            filter = filter || [];
        var tmpSelected = selected;
        // for (var i = 0; i < selected.length; i++) {
        //     tmpSelected.push(selected[i].websiteOrApp || selected[i].category || selected[i]);
        // }
        for (var i in total) {
            if (filter.indexOf(i) >= 0) {
                continue;
            }
            var status = (tmpSelected.indexOf(i) >= 0) ? 'selected' : '';
            totalString += '<label class="filter-tab ' + status + '"value="' + i + '"><span class="text">' + total[i] + '</span><span class="status-icon"></span>';
            if ($.tpLang.parent_control_nstr[i + '_tips']) {
                totalString += '<div class="filter-tips">' + $.tpLang.parent_control_nstr[i + '_tips'] + '</div>';
            }
            totalString += '</label>';
        }
        for (var i = 0; i < filter.length; i++) {
            selectedString += '<label class="filter-tab pre-filter"><span class="text">' + (labelTotalArray[filter[i]] || filter[i]) + '</span><span class="status-icon"></span>';
            if ($.tpLang.parent_control_nstr[filter[i] + '_tips']) {
                selectedString += '<div class="filter-tips">' + $.tpLang.parent_control_nstr[filter[i] + '_tips'] + '</div>';
            }
            selectedString += '</label>';
        }
        for (var i = 0; i < tmpSelected.length; i++) {
            if (filter.indexOf(tmpSelected[i]) >= 0) {
                // selected.splice(i, 1);
                // i--;
                continue;
            }
            selectedString += '<label class="filter-tab" value="' + tmpSelected[i] + '"><span class="text">' + ($.tpLang.parent_control_nstr[tmpSelected[i]] || tmpSelected[i]) + '</span><span class="status-icon"></span>';
            if ($.tpLang.parent_control_nstr[selected[i] + '_tips']) {
                selectedString += '<div class="filter-tips">' + $.tpLang.parent_control_nstr[selected[i] + '_tips'] + '</div>';
            }
            selectedString += '</label>';
        }
        editor.find('#filter-selected').html(selectedString);
        editor.find('#filter-all').html(totalString);
    }

    function renderKeywordHint(array) {
        var inHTML = "";
        inHTML += "<ul>";
        for (var i = 0; i < array.length; i++) {
            inHTML += '<li class="keyword-hint" data-keyword="' + array[i].name + '">' + array[i].name + '</li>';
        }
        inHTML += "</ul>";
        // inHTML += '<div class="border position-top-left"></div>';
        // inHTML += '<div class="border position-top"></div>';
        // inHTML += '<div class="border position-top-right"></div>';
        // inHTML += '<div class="border position-left"></div>';
        // inHTML += '<div class="border position-right"></div>';
        // inHTML += '<div class="border position-bottom-left"></div>';
        // inHTML += '<div class="border position-bottom"></div>';
        // inHTML += '<div class="border position-bottom-right"></div>';
        $("#keyword-hint-container").empty().append(inHTML);
    }

    function renderTimeSetting(elem, hour, minute, halfday) {
        var htmlString = '',
            hours = hour || '00',
            minutes = minute || '00',
            halfdays = halfday || 'AM';
        htmlString += '<div class="time-setting-container" data-target=".hour">\
                            <div class="time-board">\
                                <input type="text" class="hour" maxLength=2 value="' + hours + '">:\
                                <input type="text" class="minute" maxLength=2 value="' + minutes + '">\
                                <input type="text" class="halfday" maxLength=2 value="' + halfdays + '">\
                            </div>\
                        </div>\
                        <div class="controller">\
                            <div class="up"></div>\
                            <div class="down"></div>\
                        </div>';

        $(elem).html(htmlString);
    }

    function renderFilterLevelSelected(level) {
        editor.find('#filter-level .button-click').removeClass('clicked');
        if (!level) {
            return;
        }
        editor.find('#filter-level #' + level + ' div.button-click').addClass('clicked');
    }

    function renderEditor(snapshot) {
        inputWrapper(editor.find('#childname-container .input-wrapper-container'), 'set', snapshot.ownerName);
        if (!$.isArray(snapshot.categories_list)) {
            snapshot.categories_list = [];
        }
        if (!$.isArray(snapshot.website_list)) {
            snapshot.website_list = [];
        }
        if (!$.isArray(snapshot.client_list)) {
            snapshot.client_list = [];
        }

        //record filter item and replace them
        var tmpCatoryList = [];
        for (var i = 0; i < snapshot.categories_list.length; i++) {
            tmpCatoryList.push(snapshot.categories_list[i].category);
        }
        snapshot.originCatory = editorSnapshot.categories_list;
        snapshot.categories_list = tmpCatoryList;

        var tmpWebAppList = [];
        for (var i = 0; i < snapshot.website_list.length; i++) {
            tmpWebAppList.push(snapshot.website_list[i].websiteOrApp);
        }
        snapshot.originWebAppList = editorSnapshot.website_list;
        snapshot.website_list = tmpWebAppList;

        snapshot.originDevices = snapshot.client_list.slice(0);
        //end

        renderDevicesList(snapshot.client_list);

        renderFilterLevelSelected(snapshot.filterLevel);
        renderFilterTab(snapshot.categories_list.concat(snapshot.website_list), defaultFilter[snapshot.filterLevel]);
        checkBox(editor.find("#workday-limit .checkbox"), "set", snapshot.workday_limits_enable);
        checkBox(editor.find("#weekend-limit .checkbox"), "set", snapshot.weekend_limits_enable);
        checkBox(editor.find("#workday-bedtime-limit .checkbox"), "set", snapshot.workday_bedtime_enable);
        checkBox(editor.find("#weekend-bedtime-limit .checkbox"), "set", snapshot.weekend_bedtime_enable);

        timeBar(editor.find("#workday-limit .timebar-container"), "set", snapshot.workday_limits / 60);
        timeBar(editor.find("#weekend-limit .timebar-container"), "set", snapshot.weekend_limits / 60);

        function getTimeBoardArray(time) {
            var hour = parseInt(time % 720 / 60);
            var minute = time % 60;
            var halfday = time >= 720 ? (time == 1440) ? "AM" : "PM" : "AM";
            if (hour == 0) {
                hour = 12;
            }
            if (hour < 10 && hour > 0) {
                hour = "0" + hour;
            }
            if (minute < 10) {
                minute = "0" + minute;
            }
            return [hour, minute, halfday];
        }

        var work_bed_time_start = getTimeBoardArray(snapshot.workday_bedtime_begin);
        timeBoard(editor.find("#workday-bedtime-limit .start"), "set", work_bed_time_start);

        var work_bed_time_end = getTimeBoardArray(snapshot.workday_bedtime_end);
        timeBoard(editor.find("#workday-bedtime-limit .end"), "set", work_bed_time_end);

        var week_bed_time_start = getTimeBoardArray(snapshot.weekend_bedtime_begin);
        timeBoard(editor.find("#weekend-bedtime-limit .start"), "set", week_bed_time_start);

        var week_bed_time_end = getTimeBoardArray(snapshot.weekend_bedtime_end);
        timeBoard(editor.find("#weekend-bedtime-limit .end"), "set", week_bed_time_end);

        if (snapshot.workday_limits_enable == "1") {
            timeBar(editor.find("#workday-limit .timebar-container"), "enable");
        } else {
            timeBar(editor.find("#workday-limit .timebar-container"), "disable");
        }
        if (snapshot.weekend_limits_enable == "1") {
            timeBar(editor.find("#weekend-limit .timebar-container"), "enable");
        } else {
            timeBar(editor.find("#weekend-limit .timebar-container"), "disable");
        }
        if (snapshot.weekend_bedtime_enable == "1") {
            // timeBoard(editor.find("#weekend-bedtime-limit .time-setting-container"), "enable");
            editor.find("#weekend-bedtime-limit div.start,#weekend-bedtime-limit div.end,#weekend-bedtime-limit span.time-setting-label").removeClass("visible-hide");
        } else {
            // timeBoard(editor.find("#weekend-bedtime-limit .time-setting-container"), "disable");
            editor.find("#weekend-bedtime-limit div.start,#weekend-bedtime-limit div.end,#weekend-bedtime-limit span.time-setting-label").addClass("visible-hide");
        }
        if (snapshot.workday_bedtime_enable == "1") {
            // timeBoard(editor.find("#workday-bedtime-limit .time-setting-container"), "enable");
            editor.find("#workday-bedtime-limit div.start,#workday-bedtime-limit div.end,#workday-bedtime-limit span.time-setting-label").removeClass("visible-hide");
        } else {
            // timeBoard(editor.find("#workday-bedtime-limit .time-setting-container"), "disable");
            editor.find("#workday-bedtime-limit div.start,#workday-bedtime-limit div.end,#workday-bedtime-limit span.time-setting-label").addClass("visible-hide");
        }
    }

    grid.delegate('#history-detail', 'click', function(e) {
        $('#history-content').show();
        $('#device-list-content').hide();
        $('#pover-area').show();
        $('#pover-add-keyword').hide();
        // if (historyDetailArray[historyCollectionArrayMgr.showingIndex] == undefined) {
        getDetailHistoryList(historyCollectionArrayMgr.showingIndex, function() {
            renderHistoryTable();
            $('#pover-container').show();
            adjustPover();
        });
        // }       
    });

    function getIndexByKey(key, array) {
        for (var i = 0; i < array.length; i++) {
            if (array[i].__stack == key) {
                return i;
            }
        }
    }
    var currentPage = 1;
    $("#children-list").delegate("div.table-bottom-pages>span", "click", function(e) {
        if((currentPage == 1 && $(e.currentTarget).hasClass("left")) || 
            currentPage == (parseInt(gridItemArray.length/5,10) + 1) && $(e.currentTarget).hasClass("right")){
            return;
        } else {
            currentPage = $("span.click-page").text();
        }
        $('.insights-icon.showing').removeClass('showing');
        insights.detach().addClass("nd");
        // $("#children-grid").trigger("repaginate");
    });
    //为了在editor显示前完成DOM的修改，
    grid.delegate('.internet-pause-icon,.insights-icon,.btn-edit,#addItem', 'click', function(e) {
        var target = $(e.currentTarget);
        if (target.hasClass('insights-icon')) {
            if ($("#children-list").hasClass("editing")) {
                return;
            }
            if (!target.hasClass('showing')) {
                var key = target.data('key');
                var index = getIndexByKey(key, gridItemArray);
                historyCollectionArrayMgr.showingIndex = index;

                // if (historyCollectionArrayMgr.data[index] == undefined) {
                insights.insertAfter(target.parents('tr:eq(0)')).removeClass("nd");
                getHistoryCollection(index, function() {
                    $("#history-date").data('value', '0');
                    renderHistoryCollection(historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex][0]);
                    renderHistoryChart(historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex][0].timeUsed);
                });
                // }
                $('.insights-icon.showing').removeClass('showing');
                target.addClass('showing');
            } else {
                target.removeClass('showing');
                insights.detach().addClass("nd");
            }
            return;
        } else {
            $('.insights-icon.showing').removeClass('showing');
            insights.detach().addClass("nd");
        }
        if (target.hasClass('btn-edit')) {
            var key = target.data('key'),
                index = getIndexByKey(key, gridItemArray);
            if ($("#children-list").hasClass("editing")) {
                return;
            }
            $("#children-list").addClass("editing");
            editor.find(".input-container").removeClass("error");
            // gridItemArray[index].__node = null;
            editorSnapshot = $.su.clone(gridItemArray[index]);

            if (tmpGridItemArray) {
                var tmpIndex = getIndexByKey(key, tmpGridItemArray);
                editorSnapshot.categories_list = tmpGridItemArray[tmpIndex].categories_list;
                editorSnapshot.website_list = tmpGridItemArray[tmpIndex].website_list;
            }
            renderEditor(editorSnapshot);
            fillFilterLevelTips();

            editor.removeClass('adding').addClass('editing');
            editor.find('#editor-container #filter,#editor-container #timelimit').hide();
            editor.find('#editor-container #basicInfo').show();
            editor.find('#tab-container span').removeClass('switched');
            editor.find('#tab-container span').first().addClass('switched');
            editor.find('.btn-prev').parents(".button-container").hide();
            editor.find('.btn-next').parents(".button-container").hide();
            editor.find('.btn-save').parents(".button-container").css("display", "inline-block");

            $("#editContainer").insertAfter(target.parents('tr:eq(0)')).removeClass("nd");
            target.parents('tr:eq(0)').addClass("disable");
            var tpTable = $("#children-grid").data('tpTable');
            tpTable.showEditArea(target.parents('tr:eq(0)'));
            return;
        }
        if (target.hasClass('internet-pause-icon')) {
            if ($("#children-list").hasClass("editing")) {
                return;
            }
            var stack = target.data('key');
            var index = getIndexByKey(stack, gridItemArray);
            changePauseStatus(index, !target.hasClass("pause"), function() {
                target.toggleClass('pause');
            });
        }
    });
    grid.delegate(".btn-cancel", "click", function(e) {
        $.hideEditArea(grid);
        $("#children-list").removeClass("editing");
        $("#children-grid tr.disable").removeClass("disable");
    });
    $("#addItem").click(function(e) {
        var target = $(e.currentTarget);
        editorStep = 1;
        if ($("#children-list").hasClass("editing")) {
            return;
        }
        if (gridItemArray.length >= profileLimit.profileLength) {
            $.alert($.tpLang.parent_control_nstr.PROFILE_LIMIT.replace("%1$d", profileLimit.profileLength));
            e.stopPropagation();
            return;
        }
        $("#children-list").addClass("editing");
        editorSnapshot = {
            ownerName: '',
            client_list: [],
            filterLevel: '',
            categories_list: [],
            website_list: [],
            "workday_limits_enable": false,
            "workday_limits": 120,
            "weekend_limits_enable": false,
            "weekend_limits": 120,
            "workday_bedtime_enable": false,
            "workday_bedtime_begin": 1320,
            "workday_bedtime_end": 420,
            "weekend_bedtime_enable": false,
            "weekend_bedtime_begin": 1320,
            "weekend_bedtime_end": 420
        };
        renderEditor(editorSnapshot);
        insights.detach().addClass("nd");
        editor.find('#filter,#timelimit').hide();
        editor.find('#basicInfo').show();
        editor.find('.step,.flow-bar').removeClass('past').removeClass('current');
        editor.find('.step').first().addClass('current');
        editor.find('#select-filter-level').removeClass('temporary-hide');
        editor.find('#filterInfo,#filter-content-container').addClass('temporary-hide');
        editor.find('.btn-next').prop("disabled", true).parents(".button-container").css('display', 'inline-block');
        editor.find('.btn-prev').parents(".button-container").hide();
        editor.find('.btn-save').parents(".button-container").hide();
        editor.addClass('adding').removeClass('editing');
        editor.find(".input-container").removeClass("error");

        if ($("#children-grid tr.space-tr").length == 0) {
            $.addEmptyBody($("#children-grid"), 7);
        }
        $("#editContainer").insertAfter($("#children-grid").find('tr.space-tr:eq(0)')).removeClass("nd");
        $("#children-grid").find('tr.space-tr:eq(0)').addClass("disable");
        var tpTable = $("#children-grid").data('tpTable');
        tpTable.showEditArea($("#children-grid").find('tr.space-tr:eq(0)'));
        return;
    })

    grid.delegate(".btn-delete", "click", function(e) {
        if ($("#children-list").hasClass("editing")) {
            return;
        }
        showLoading("delete-item");
        var index = getIndexByKey($(e.target).data("key"), gridItemArray);
        $.act(ACT_DEL, PC_OWNER, gridItemArray[index].__stack, null, null);
        $.exe(function(ret) {
            if (!ret) {
                initTable();
            }
            hideLoading("delete-item");
        });
    })

    function doAddProfile(snapshot) {
        var profileObj = {
            filterLevel: snapshot.filterLevel,
            ownerName: snapshot.name,
            weekend_bedtime_enable: snapshot.weekend_bedtime_enable,
            weekend_bedtime_begin: snapshot.weekend_bedtime_begin,
            weekend_bedtime_end: snapshot.weekend_bedtime_end,
            weekend_limits_enable: snapshot.weekend_limits_enable,
            weekend_limits: snapshot.weekend_limits,
            workday_bedtime_enable: snapshot.workday_bedtime_enable,
            workday_bedtime_begin: snapshot.workday_bedtime_begin,
            workday_bedtime_end: snapshot.workday_bedtime_end,
            workday_limits_enable: snapshot.workday_limits_enable,
            workday_limits: snapshot.workday_limits
        };

        var newProfile = $.act(ACT_ADD, PC_OWNER, null, null, profileObj);
        if (!$.exe()) {
            newProfile = $.act(ACT_GET, PC_OWNER, newProfile.__stack, null, ["ownerId"]);
            if (!$.exe()) {
                return newProfile;
            }
        }
        return null;

    }

    function doSaveProfile(snapshot) {
        var profileObj = {
            filterLevel: snapshot.filterLevel,
            ownerName: snapshot.name,
            weekend_bedtime_enable: snapshot.weekend_bedtime_enable,
            weekend_bedtime_begin: snapshot.weekend_bedtime_begin,
            weekend_bedtime_end: snapshot.weekend_bedtime_end,
            weekend_limits_enable: snapshot.weekend_limits_enable,
            weekend_limits: snapshot.weekend_limits,
            workday_bedtime_enable: snapshot.workday_bedtime_enable,
            workday_bedtime_begin: snapshot.workday_bedtime_begin,
            workday_bedtime_end: snapshot.workday_bedtime_end,
            workday_limits_enable: snapshot.workday_limits_enable,
            workday_limits: snapshot.workday_limits
        };

        $.act(ACT_SET, PC_OWNER, snapshot.__stack, null, profileObj);
    }

    function searchDevices(mac) {
        for (var i = 0; i < onlineDevices.length; i++) {
            if (onlineDevices[i].mac === mac) {
                return onlineDevices[i].__stack;
            }
        }
        return "";
    }

    function doSaveDevices(snapshot, stack, ownerId) {
        var stack = stack || snapshot.__stack;
        var ownerId = ownerId || snapshot.ownerId;
        for (var i = 0; i < snapshot.originDevices.length; i++) {
            var devStack = searchDevices(snapshot.originDevices[i].mac);
            if (devStack != "") {
                $.act(ACT_SET, HOMECARE_CLI_INFO, devStack, null, {
                    ownerId: "-1"
                })
            }
        }
        for (var i = 0; i < snapshot.client_list.length; i++) {
            var devStack = searchDevices(snapshot.client_list[i].mac);
            if (devStack != "") {
                $.act(ACT_SET, HOMECARE_CLI_INFO, devStack, null, {
                    ownerId: snapshot.ownerId
                })
            }
        }
    }

    function doSaveCatory(snapshot, stack) {
        var stack = stack || snapshot.__stack;
        for (var i = 0; i < snapshot.originCatory.length; i++) {
            $.act(ACT_DEL, PC_CATEGORIES, snapshot.originCatory[i].__stack, null, null);
        }
        for (var i = 0; i < snapshot.categories_list.length; i++) {
            $.act(ACT_ADD, PC_CATEGORIES, null, stack, {
                category: snapshot.categories_list[i]
            });
        }
    }

    function doSaveWebFilter(snapshot, stack) {
        var stack = stack || snapshot.__stack;
        for (var i = 0; i < snapshot.originWebAppList.length; i++) {
            $.act(ACT_DEL, PC_WEBSITE_APPS, snapshot.originWebAppList[i].__stack, null);
        }
        for (var i = 0; i < snapshot.website_list.length; i++) {
            $.act(ACT_ADD, PC_WEBSITE_APPS, null, stack, {
                websiteOrApp: snapshot.website_list[i]
            });
        }
    }
    grid.delegate('.btn-save', 'click', function(e) {
        getEditorData();
        if (editor.hasClass("editing")) {
            doSaveProfile(editorSnapshot);
            doSaveDevices(editorSnapshot);
            doSaveCatory(editorSnapshot);
            doSaveWebFilter(editorSnapshot);
            $.exe(function(ret) {
                $.reload();
            });
        } else {
            var newProfile = doAddProfile(editorSnapshot);
            if (newProfile) {
                editorSnapshot.ownerId = newProfile.ownerId;
                doSaveDevices(editorSnapshot, newProfile.__stack, newProfile.ownerId);
                doSaveCatory(editorSnapshot, newProfile.__stack);
                doSaveWebFilter(editorSnapshot, newProfile.__stack);
                $.exe(function(ret) {
                    $.reload();
                });
            }
        }
    });
    grid.delegate('#tab-container span', 'click', function(e) {
        $('#editor-container #basicInfo,#editor-container #filter,#editor-container #timelimit').hide();
        $('#' + $(e.target).data('key')).show();
        $('#tab-container span').removeClass('switched');
        $(e.target).addClass('switched');
    });

    grid.delegate('#editor-container .btn-prev', 'click', function(e) {
        var prev = $('span.step.past').last();
        $('span.step.current').removeClass('current');
        prev.addClass('current').removeClass('past');
        $('.flow-bar.past').last().removeClass('past');
        if ($('.step.past').length == 0) {
            $('.btn-prev').parents(".button-container").hide();
        }
        $('.btn-next').prop("disabled", false).parents(".button-container").show();
        $('#editor-container #basicInfo,#editor-container #filter,#editor-container #timelimit').hide();
        $('#' + $(prev).data('key')).show();
        $(".btn-save").parents(".button-container").hide();
        editorStep--;
    }).delegate('#editor-container .btn-next', 'click', function(e) {
        if (editorStep == 1) {
            // if (!chkChildName()) {
            //     return;
            // }
            if (!chkFilterLevel()) {
                $(".btn-next").prop("disabled", true).parents(".button-container");
            }
        } else if (editorStep == 2) {
            // if (!chkFilterLevel()) {
            //     return;
            // }
            $('.btn-save').parents(".button-container").show();
        }
        var next = $('.step:not(.current,.past)').first();
        $('.current').removeClass('current').addClass('past');
        next.addClass('current');
        $('.flow-bar').not('.past').first().addClass('past');
        if ($('.flow-bar').not('.past').length == 0) {
            $('.btn-next').parents(".button-container").hide();
        }
        $('.btn-prev').parents(".button-container").show();
        $('#editor-container #basicInfo,#editor-container #filter,#editor-container #timelimit').hide();
        $('#' + $(next).data('key')).show();
        editorStep++;
    });
    grid.delegate('.add-button', 'click', function(e) {
        $('#history-content').hide();
        $('#device-list-content').show();
        $('#pover-area').show();
        $('#pover-add-keyword').hide();
        getOnlineDevices(function() {
            renderDevicesListTable(editorSnapshot.owner_id);
            $('#pover-container').show();
            adjustPover();
        });

    }).delegate('.icon-wrap .close-icon', 'click', function(e) {
        var index = $(e.currentTarget).data('index');
        editorSnapshot.client_list.splice(index, 1);
        renderDevicesList(editorSnapshot.client_list);
    });
    grid.delegate('#filter-all label.filter-tab span.status-icon', 'click', function(e) {
        e.stopPropagation();
        if ($(e.currentTarget).hasClass('selected') || !$(e.target).hasClass('status-icon')) {
            return;
        }
        var string = $(e.currentTarget).parent().attr("value");
        editorSnapshot.categories_list.unshift(string);
        $(e.currentTarget).parent().addClass('selected').removeClass("show-tips");
        if ($.tpLang.parent_control_nstr[string + "_tips"]) {
            $('#filter-selected').append('<label class="filter-tab" value="' + string + '"><span class="text">' + $.tpLang.parent_control_nstr[string] + '</span><span class="status-icon"></span><div class="filter-tips">' + $.tpLang.parent_control_nstr[string + "_tips"] + '</div></label>');
        } else {
            $('#filter-selected').append('<label class="filter-tab" value="' + string + '"><span class="text">' + $.tpLang.parent_control_nstr[string] + '</span><span class="status-icon"></span></label>');
        }

    }).delegate('#filter-selected label.filter-tab span.status-icon', 'click', function(e) {
        e.stopPropagation();
        var string = $(e.currentTarget).parent().attr("value");
        var tab = $('#filter-all').find('[value="' + string + '"]');
        if (tab.length != 0) {
            tab.removeClass('selected');
        }
        var index = editorSnapshot.categories_list.indexOf(string);
        if (index < 0) {
            index = editorSnapshot.website_list.indexOf(string);
            editorSnapshot.website_list.splice(index, 1);
        } else {
            editorSnapshot.categories_list.splice(index, 1);
        }
        $(e.currentTarget).parent().remove();
    }).delegate('#filter-selected label.filter-tab', 'click', function(e) {
        if ($(e.currentTarget).hasClass("show-tips")) {
            $(e.currentTarget).removeClass("show-tips");
        } else {
            $('#filter-selected label.filter-tab.show-tips').removeClass("show-tips");
            $(e.currentTarget).addClass("show-tips");
        }
    }).delegate('#filter-all label.filter-tab', 'click', function(e) {
        if ($(e.currentTarget).hasClass("show-tips")) {
            $(e.currentTarget).removeClass("show-tips");
        } else {
            $('#filter-all label.filter-tab.show-tips').removeClass("show-tips");
            $(e.currentTarget).addClass("show-tips");
        }
    }).delegate('.add-tab', 'click', function(e) {
        $('#pover-area').hide();
        $('#pover-add-keyword').show();
        $('#pover-container').show();
        adjustPover("pover-add-keyword");

    });
    outterElem.delegate('#btn-add-filter', 'click', function(e) {
        if ($(e.target).prop("disabled")) {
            return;
        }
        if (editorSnapshot.website_list.length >= profileLimit.categoryLength) {
            $("#keyword-tips").text($.tpLang.parent_control_nstr.DEV_CATEGORY_LIMIT.replace("%1$d", profileLimit.categoryLength));
            $("#custom-filter-container.input-container").addClass("error");
            return;
        }
        var string = $('#custom-filter').val();
        var keywordChkFlag = chkKeyword(string);
        var urlChkFlag = chkUrlFormat(string);
        if (!(keywordChkFlag || urlChkFlag)) {
            $("#custom-filter-container").addClass("error");
            return;
        }
        var index = -1;
        var existsTabArray = editorSnapshot.website_list;
        for (var i = 0; i < existsTabArray.length; i++) {
            if (existsTabArray[i] == string) {
                index = i;
                break;
            }
        }
        if (index >= 0) {
            $("#keyword-tips").text($.tpLang.parent_control_nstr.KEYWORD_EXIST);
            $("#custom-filter-container.input-container").addClass("error");
            return;
        } else {
            /*此段应该可去*/
            // var tab = $('#filter-all').find('[value="' + string + '"]');
            // if (tab.length > 0) {
            //     tab.addClass('selected');
            // }
            /*------------*/

            // if (keywordChkFlag) {
            //     editorSnapshot.categories_list.push(string);
            // } else {
            editorSnapshot.website_list.push(string);
            // }

            $('#filter-selected').append('<label class="filter-tab"><span class="text">' + string + '</span><span class="status-icon"></span></label>');
        }
        $('#custom-filter').val('');
        inputWrapper($('#custom-filter').parent(), 'clear');
        $('#pover-container').hide();
    });

    function fillFilterLevelTips() {
        var filterString = "";
        var filterArray = defaultFilter[editorSnapshot.filterLevel];
        if (filterArray) {
            for (var i = 0; i < filterArray.length; i++) {
                filterString += $.tpLang.parent_control_nstr[filterArray[i]] || filterArray[i];
                if (i < filterArray.length - 1) {
                    filterString += ",";
                }
            }
        }

        editor.find('#pre-filter').text(filterString || $.tpLang.parent_control_nstr.NOTHING + ' ');
        editor.find("#select-child").text(editorSnapshot.name);
    }

    grid.delegate('#filter-level div.button-click', 'click', function(e) {
        $('#filter-level div.button-click').removeClass('clicked');
        $('#filter-tips').hide();
        $(".btn-next").prop("disabled", false).parents(".button-container");
        $(e.currentTarget).addClass('clicked');

        if (editorSnapshot.filterLevel != $(e.currentTarget).parent()[0].id) {
            editorSnapshot.filterLevel = $(e.currentTarget).parent()[0].id;
            var pre = preFilter[editorSnapshot.filterLevel];
            editorSnapshot.categories_list = pre.slice(0);
            // for (var i = 0; i < pre.length; i++) {
            //     if (editorSnapshot.categories_list.indexOf(pre[i]) < 0) {
            //         editorSnapshot.categories_list.push(pre[i]);
            //     }
            // }
        }

        fillFilterLevelTips();

        if (editor.hasClass('adding')) {
            editor.find('#select-filter-level').addClass('temporary-hide');
            editor.find('#filterInfo,#filter-content-container').removeClass('temporary-hide');
        }

        renderFilterTab(editorSnapshot.categories_list.concat(editorSnapshot.website_list), defaultFilter[editorSnapshot.filterLevel])
    });

    $.su.parCtrl = $.su.parCtrl || {};
    $.su.parCtrl.mousepressTimeoutId = 0;

    function changeValue() {
        var focusElem = $.su.parCtrl.target.find($.su.parCtrl.target.data('target'));
        var initValue = focusElem.val();
        var newValue;
        if (initValue == 'AM' || initValue == 'PM') {
            focusElem.val((initValue == 'AM') ? 'PM' : 'AM');
        } else {
            if ($.su.parCtrl.direction == 'up') {
                newValue = parseInt(initValue, 10) + 1;
            } else {
                newValue = parseInt(initValue, 10) - 1;
            }
            if ($.su.parCtrl.target.data('target') == '.hour') {
                if (newValue == 13) {
                    newValue = 1;
                } else if (newValue == 0) {
                    newValue = 12;
                }
            } else {
                if (newValue == 60) {
                    newValue = 0;
                } else if (newValue == -1) {
                    newValue = 59;
                }
            }
            focusElem.val(newValue < 10 ? '0' + newValue : newValue);
        }
        $.su.parCtrl.mousepressTimeoutId = setTimeout(arguments.callee, 200);
    }
    grid.delegate('.time-setting-container input', 'focus', function(e) {
        var target = $(e.currentTarget);
        var container = target.parents('.time-setting-container');
        if (target.hasClass('hour')) {
            container.data('target', '.hour');
        } else if (target.hasClass('minute')) {
            container.data('target', '.minute');
        } else {
            container.data('target', '.halfday');
        }
    }).delegate('.time-setting-container input', 'blur', function(e) {
        var value = parseInt($(e.currentTarget).val(), 10) || 0;
        if ($(e.currentTarget).hasClass('hour')) {
            if (value > 12 || value < 1) {
                value = '12';
            } else if (value < 10) {
                value = '0' + value;
            }
        } else if ($(e.currentTarget).hasClass('minute')) {
            if (value > 59 || value < 0) {
                value = '00';
            } else if (value < 10) {
                value = '0' + value;
            }
        } else if ($(e.currentTarget).hasClass('halfday')) {
            value = $(e.currentTarget).val();
            if (value != 'AM' && value != 'PM') {
                value = 'AM';
            }
        }
        $(e.currentTarget).val(value);
    });
    grid.delegate('.controller .up,.controller .down', 'mousedown mouseup mouseout', function(e) {
        $.su.parCtrl.target = $(e.target).parents(".start,.end").find('.time-setting-container');
        if ($.su.parCtrl.target.hasClass('disable')) {
            return;
        }
        if (e.type == 'mousedown') {
            if ($(e.currentTarget).hasClass('up')) {
                $.su.parCtrl.direction = 'up';
            } else {
                $.su.parCtrl.direction = 'down';
            }
            changeValue();
        } else if (e.type == 'mouseup' || e.type == 'mouseout') {
            clearTimeout($.su.parCtrl.mousepressTimeoutId);
        }
    });
    $('#pover-container').delegate('.close-icon', 'click', function(e) {
        $('#pover-container').hide();
    }).delegate('.checkbox', 'click', function(e) {
        checkBox(e.currentTarget, 'toggle');
    }).delegate('.paging-btn', "click", function(e) {
        if ($(e.currentTarget).hasClass("gray")) {
            return;
        }

        var index = $(e.currentTarget).data("index");
        if (index == "prev") {
            changePageIndex(onlineDevicesShowingIndex - 1);
        } else if (index == "next") {
            changePageIndex(onlineDevicesShowingIndex + 1);
        } else {
            changePageIndex(index);
        }
    });

    $('#pover-container,#insights-container').delegate('span.block-icon', 'click', function(e) {
        var index = historyCollectionArrayMgr.showingIndex;
        var stack = $(e.currentTarget).attr("target");
        var flag = ($(e.currentTarget).hasClass('blocked')) ? false : true;
        if (flag) {
            if ((tmpGridItemArray && tmpGridItemArray[index].website_list >= profileLimit.categoryLength) ||
                (!tmpGridItemArray && gridItemArray[index].website_list >= profileLimit.categoryLength)) {
                $.alert($.tpLang.parent_control_nstr.DEV_CATEGORY_LIMIT.replace("%1$d", profileLimit.categoryLength));
                e.stopPropagation();
                return;
            }
        }
        var historyOrCollectionFlag = $(e.currentTarget).hasClass("history-detail");
        changInsightBlockStatus(index, stack, flag, historyOrCollectionFlag, function() {
            getHistoryCollection(historyCollectionArrayMgr.showingIndex, function() {
                renderHistoryCollection(historyCollectionArrayMgr.data[historyCollectionArrayMgr.showingIndex][$("#history-date").data("value")]);
            });
            if ($(e.currentTarget).hasClass("history-detail")) {
                getDetailHistoryList(historyCollectionArrayMgr.showingIndex, function() {
                    renderHistoryTable();
                });
            }
            getUpdateChildListData();
        });
    });
    $('.btn-dev-add').on('click', function(e) {
        var $selected = $('#device-table-body .checkbox-wrap.checked').not('.disable');
        if ($selected.length > profileLimit.devicesLength) {
            $.alert($.tpLang.parent_control_nstr.DEV_CATEGORY_LIMIT.replace("%1$d", profileLimit.devicesLength));
            e.stopPropagation();
            return;
        }
        var devices = [];
        $selected.each(function(i, obj) {
            var $tr = $(obj).parents('tr'),
                $td = $tr.find('td');
            devices.push({
                devType: $td.eq(1).find('span').data('val'),
                devName: $td.eq(2).find("span").eq(0).text(),
                mac: $td.eq(3).text()
            })
        });
        renderDevicesList(devices);
        editorSnapshot.client_list = devices;
        $('#pover-container').hide();
    });
    $('.btn-dev-cancel').on("click", function(e) {
        $('#pover-container').hide();
    })

    grid.delegate('#timelimit-container .checkbox', 'click', function(e) {
        checkBox(e.currentTarget, 'toggle');
        var action = checkBox(e.currentTarget, 'get') ? 'enable' : 'disable';
        timeBar($(e.currentTarget).siblings('.timebar-container'), action);
    }).delegate('#bedtimelimit-container .checkbox', 'click', function(e) {
        checkBox(e.currentTarget, 'toggle');
        // var action = checkBox(e.currentTarget, 'get') ? 'enable' : 'disable';
        // timeBoard($(e.currentTarget).siblings('div').find('.time-setting-container'), action);
        if (checkBox(e.currentTarget, 'get')) {
            $(e.currentTarget).siblings('span,div').removeClass("visible-hide");
        } else {
            $(e.currentTarget).siblings('span,div').addClass("visible-hide");
        }

    });

    /*input wrapper event binding*/
    outterElem.delegate('.input-wrapper-container', 'click', function(e) {
        inputWrapper(e.currentTarget, 'focus');
        $(e.currentTarget).parents(".input-container").removeClass("error");
    }).delegate('.input-wrapper-container', 'blur', function(e) {
        inputWrapper(e.currentTarget, 'show');
    });

    function getCursortPosition(ctrl) {
        var CaretPos = 0; // IE Support
        if (document.selection) {
            var Sel = document.selection.createRange();
            Sel.moveStart('character', -ctrl.value.length);
            CaretPos = Sel.text.length;
        }
        // Firefox support
        else if (ctrl.selectionStart || ctrl.selectionStart == '0')
            CaretPos = ctrl.selectionStart;
        return (CaretPos);
    }

    grid.delegate("#childname-container .input-wrapper-container", "blur", function(e) {
        var val = inputWrapper(e.currentTarget, 'get');
        if (!chkChildName()) {
            $("#childname-container .input-container").addClass("error");
        }
        editorSnapshot.name = val;
        fillFilterLevelTips();
    }).delegate("#childname-container .input-wrapper-container", "keyup", function(e) {
        if (chkChildName()) {
            $(".btn-save,.btn-next").prop("disabled", false).parents(".button-container");
        } else {
            $(".btn-save,.btn-next").prop("disabled", true).parents(".button-container");
        }
    }).delegate("input.hour", "keydown", function(e) {
        var keyCode = e.keyCode || e.which || e.charCode;
        if (!(keyCode >= 48 && keyCode <= 57) && !(keyCode >= 96 && keyCode <= 105) && keyCode != 8 && keyCode != 46 &&
            keyCode != 37 && keyCode != 39) {
            e.preventDefault();
            return;
        }

        var hour = $(e.target).val();
        if (keyCode == 8 || keyCode == 46 || keyCode == 37 || keyCode == 39) {
            return;
        }

        // hour = hour + e.key;
        var pos = getCursortPosition($(e.target)[0]);
        // if (hour) {
        hour = parseInt(hour, 10) || 0;
        var key = e.key || (keyCode < 58 ? (keyCode - 48) : (keyCode - 96));
        var keyNum = parseInt(key, 10);
        var num = 0;
        if (pos == 0) {
            num = keyNum * 10 + hour;
        } else {
            num = hour * 10 + keyNum;
        }
        if ((num > 12) || (hour == 0 && keyNum == 0 && pos == 1)) {
            e.preventDefault();
            return;
        }
        // } else {
        // if (e.key > 1) {
        //     e.preventDefault();
        //     return;
        // }
        // }
    }).delegate("input.minute", "keydown", function(e) {
        var keyCode = e.keyCode || e.which || e.charCode;
        if (!(keyCode >= 48 && keyCode <= 57) && !(keyCode >= 96 && keyCode <= 105) && keyCode != 8 && keyCode != 46 &&
            keyCode != 37 && keyCode != 39) {
            e.preventDefault();
            return;
        }

        var hour = $(e.target).val();
        if (keyCode == 8 || keyCode == 46 || keyCode == 37 || keyCode == 39) {
            return;
        }

        var pos = getCursortPosition($(e.target)[0]);
        hour = parseInt(hour, 10) || 0;
        var key = e.key || (keyCode < 58 ? (keyCode - 48) : (keyCode - 96));
        var keyNum = parseInt(key, 10);
        var num = 0;
        if (pos == 0) {
            num = keyNum * 10 + hour;
        } else {
            num = hour * 10 + keyNum;
        }
        if ((num > 60) || (hour == 0 && keyNum == 0 && pos == 1)) {
            e.preventDefault();
            return;
        }
    }).delegate("input.halfday", "keydown", function(e) {
        var keyCode = e.keyCode || e.which || e.charCode;
        if (keyCode == 8 || keyCode == 46 || keyCode == 37 || keyCode == 39) {
            return;
        } else if (keyCode != 65 && keyCode != 80 && keyCode != 77) {
            e.preventDefault();
            return;
        }
        var pos = getCursortPosition($(e.target)[0]);
        if (pos == 0 && keyCode != 65 && keyCode != 80) {
            e.preventDefault();
            return;
        } else if (pos == 1 && keyCode != 77) {
            e.preventDefault();
            return;
        }
    });

    $('#pover-container').delegate("#custom-filter-container .input-wrapper-container", "focus", function(e) {
        if (!$("#keyword-hint-container").hasClass("showing")) {
            // $("#keyword-hint-container .keyword-hint").removeClass("unmatch");
            renderKeywordHint(keywordList);
            $("#keyword-hint-container").addClass("showing");
        }
    }).delegate("#custom-filter-container .input-wrapper-container", "blur", function(e) {
        // var val = inputWrapper($("#custom-filter-container .input-wrapper-container"), "get");
        // if (!(chkKeyword(val) || chkUrlFormat(val))) {
        //     $("#custom-filter-container").addClass("error");
        //     $("#btn-add-filter").parent().addClass("disabled");
        // } else {
        //     $("#btn-add-filter").parent().removeClass("disabled");
        // }
        $("#keyword-hint-container").removeClass("showing");
    }).delegate("#custom-filter-container .input-wrapper-container input", "keyup", function(e) {
        //可以添加setTimeout 函数节流改善性能
        clearTimeout($.su.parCtrl.searchHintTimeout);
        $.su.parCtrl.searchHintTimeout = setTimeout(function() {
            var val = $(e.target).val();
            var hints = $("#keyword-hint-container .keyword-hint");
            var reg1 = new RegExp("^" + val, "i");
            var reg2 = new RegExp(val, "i");
            var firstMatch = [];
            var contain = [];
            for (var i = 0; i < keywordList.length; i++) {
                if (reg1.test(keywordList[i].name)) {
                    firstMatch.push(keywordList[i]);
                    continue;
                } else if (reg2.test(keywordList[i].name)) {
                    contain.push(keywordList[i]);
                    continue
                }
            }
            renderKeywordHint(firstMatch.concat(contain));
        }, 200);
    }).delegate("#custom-filter-container .input-wrapper-container input", "keyup", function(e) {
        var showingHint = $(".keyword-hint").not(".unmatch");
        var length = showingHint.length;
        var selected = null;
        var selectedIndex;
        showingHint.each(function(i, obj) {
            if ($(obj).hasClass("selected")) {
                selected = $(obj);
                selectedIndex = i;
            }
        });
        if (e.keyCode == 38 || e.keyCode == 40) {
            clearTimeout($.su.parCtrl.searchHintTimeout);
            if (!selected) {
                showingHint.eq(0).addClass("selected");
            } else {
                if (e.keyCode == 40 && selectedIndex < length - 1) {
                    selected.removeClass("selected");
                    showingHint.eq(selectedIndex + 1).addClass("selected");
                }
                if (e.keyCode == 38 && selectedIndex > 0 && length > 1) {
                    selected.removeClass("selected");
                    showingHint.eq(selectedIndex - 1).addClass("selected");
                }
            }
        } else if (e.keyCode == 13) {
            clearTimeout($.su.parCtrl.searchHintTimeout);
            if ($("#keyword-hint-container .selected").length == 0) {
                $("#custom-filter-container .input-wrapper-container input").blur();
                $("#btn-add-filter").trigger("click");
                return;
            }
            if (selected) {
                inputWrapper($("#custom-filter-container .input-wrapper-container"), "set", selected.data("keyword"));
                $("#keyword-hint-container").removeClass("showing");
                $("#keyword-hint-container .selected").removeClass("selected");
                // $("#custom-filter-container .input-wrapper-container input").blur();
            }
        } else {
            if (!$("#keyword-hint-container").hasClass("showing")) {
                $("#custom-filter-container").addClass("input-editing");
                $("#keyword-hint-container").addClass("showing");
            }
        }
        $("#custom-filter-container").removeClass("error");
    }).delegate(".keyword-hint", "mousedown", function(e) {
        var val = $(e.currentTarget).data("keyword");
        inputWrapper($("#custom-filter-container .input-wrapper-container"), "set", val);
        $("#keyword-hint-container").removeClass("showing");
    }).delegate("#keyword-hint-container", "mouseenter", function(e) {
        $(".keyword-hint").removeClass("selected");
    }).delegate("#keyword-hint-container,.keyword-hint", "mousedown", function(e) {
        e.stopPropagation();
        e.preventDefault();
    })

    function inputWrapper(elem, op, data) {
        switch (op) {
            case 'get':
                return $(elem).find('input').val();
                break;
            case 'focus':
                $(elem).find('input').focus();
                $(elem).addClass('input-editing');
                $(elem).parents('.input-container').addClass("input-editing");
                break;
            case 'set':
                $(elem).find('input').val(data || '');
                if (data) {
                    $(elem).addClass('input-showing').removeClass('input-empty');
                } else {
                    $(elem).addClass('input-empty').removeClass('input-showing');
                }
                inputWrapper(elem, 'show');
                break;
            case 'clear':
                inputWrapper(elem, 'Set', '');
                $(elem).addClass('input-empty').removeClass('input-showing');
                break;
            case 'show':
                var val = $(elem).find('input').val();
                if (val) {
                    if (val.length > 20) {
                        val = val.slice(0, 17) + '...';
                    }
                    $(elem).find('span.showingText').text(val);
                    $(elem).addClass('input-showing').removeClass('input-editing').removeClass('input-empty');
                    $(elem).parents('.input-container').removeClass("input-editing");
                } else {
                    $(elem).addClass('input-empty').removeClass('input-editing').removeClass('input-showing');
                    $(elem).parents(".input-container").addClass("error");
                }
                break;
            default:
                break;
        }
    }
    /*checkbox event binding*/

    function checkBox(elem, op, data) {
        if ($(elem).hasClass('checkbox-wrap')) {

        } else {
            elem = $(elem).find('.checkbox-wrap');
        }
        if ($(elem).hasClass('disable') && (!(op == 'set' || op == 'get'))) {
            return;
        }
        switch (op) {
            case 'checked':
                $(elem).addClass('checked');
                break;
            case 'unchecked':
                $(elem).removeClass('checked');
                break;
            case 'enable':
                $(elem).removeClass('disable');
                break;
            case 'disable':
                $(elem).addClass('disable');
                break;
            case 'toggle':
                $(elem).toggleClass('checked');
                break;
            case 'get':
                return $(elem).hasClass('checked');
                break;
            case 'set':
                if (data == "1") {
                    checkBox(elem, 'checked');
                } else {
                    checkBox(elem, 'unchecked');
                }
                break;
            default:
                break;
        }
    }
    /*timebar event binding*/

    timeBar = function timeBar(elem, op, data) {
        switch (op) {
            case 'enable':
                $(elem).removeClass('disabled');
                $(elem).find('.slider').draggabilly('enable');
                break;
            case 'disable':
                $(elem).addClass('disabled');
                $(elem).find('.slider').draggabilly('disable');
                break;
            case 'get':
                return parseInt($(elem).find('.slider').data('draggabilly').position.x / 21 + 1, 10) * 0.5;
                break;
            case 'set':
                var pos = parseInt((data * 2 - 1) * 21, 10);
                if (pos < 0) {
                    pos = 0;
                }
                $(elem).find('.slider').css('left', pos + 'px').each(function(i, obj) {
                    $(obj).data('draggabilly').position.x = pos;
                });
                $(elem).find('.slider').trigger('dragMove');
                break;
            default:
                break;
        }
    }

    /*time setting event binding*/

    timeBoard = function timeBoard(elem, op, data) {
        switch (op) {
            case 'enable':
                $(elem).removeClass('disable');
                break;
            case 'disable':
                $(elem).addClass('disable');
                break;
            case 'get':
                var result = [$(elem).find('.hour').val(), $(elem).find('.minute').val(), $(elem).find('.halfday').val()];
                return result;
                break;
            case 'set':
                $(elem).find('.hour').val(data[0]);
                $(elem).find('.minute').val(data[1]);
                $(elem).find('.halfday').val(data[2]);
                break;
            default:
                break;
        }
    }
    //adjust pover position

    function adjustPover(pover) {
        if (pover) {
            pover = "#" + pover;
        } else {
            pover = "#pover-area"
        }
        var wh = $(window).height();
        var ph = $(pover).height();
        // if ((wh - ph - 55) < 150) {
        var diff = ph > wh ? 0 : (wh - ph - 55) / 2
        $(pover).css("margin-top", diff);

        //for pover area not add key word
        $("#pover-content").css({
            "max-height": (wh - 55),
            "overflow-y": "auto",
            "overflow-x": "hidden"
        });
        // }
    }
    $.tpInit();
    $("#children-grid").tpTable(initTable);
    
});
</script>

</html>
