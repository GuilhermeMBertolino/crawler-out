<script type="text/javascript">
var wlanObj_2g,
    wlanObj_5g,
    vapObj_2g,
    vapObj_5g,
    guestnetObj_2g,
    guestnetObj_5g;

function isHex(str, arg) {
    str = str.toLowerCase();
    for (var i = 0; i < str.length; i++) {
        if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') || (str.charAt(i) >= 'a' && str.charAt(i) <= 'f'))
            continue;
        else {
            if (arg != 0)
                $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
            return false;
        }
    }
    if (parseInt(str, 16) == 0) {
        if (arg != 0)
            $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
        return false;
    }
    return true;
}

function checkSSID(band) {
    var s = $('#ssid' + band);
    var ssidLen = $.realLen(s.prop('value'));

    if (INCLUDE_LAN_WLAN_MSSID) {
        /*var index = 1;

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid").value;
            var cp2 = $.id("ssid" + index).value;
            if (cp1 == cp2) {
                $.alert(CMM_WLAN_SSID_CONFLICTE);
                s.focus();
                s.select();
                return false;
            }
        }

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid" + index).value;
            var loop = 0;
            for (loop = index + 1; loop < ssidNum; loop++) {
                var cp2 = $.id("ssid" + loop).value;
                if (cp1 == cp2) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }
        }*/

        if (INCLUDE_LAN_WLAN_GUESTNETWORK) {
            if (s.prop('value') == wlanObj_2g.SSID || s.prop('value') == wlanObj_5g.SSID) {
                $.alert(CMM_WLAN_SSID_CONFLICTE);
                s.focus();
                s.select();
                return false;
            }
            /*            for (index = 1; index < ssidNum; index++) {
                if ($.id("ssid" + index).value == guestVap.ssid) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE_WITH_GUESTNET);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }*/
        }
    }
    if (ssidLen <= 0) {
        $.alert(ERR_WLAN_SSID_IS_EMPTY);
        s.focus();
        s.select();
        return false;
    } else if (ssidLen > 32) {
        $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
        s.focus();
        s.select();
        return false;
    }
    /* else if (INCLUDE_LAN_WLAN_MSSID) {
        for (index = 1; index < ssidNum; index++) {
            var s2 = $.id("ssid" + index);
            var ssidLen2 = $.realLen(s2.value);
            if (ssidLen2 <= 0) {
                $.alert(ERR_WLAN_SSID_IS_EMPTY);
                s2.focus();
                s2.select();
                return false;
            } else if (ssidLen2 > 32) {
                $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
                s2.focus();
                s2.select();
                return false;
            }
        }
    }*/

    return true;
}

function checkPersonal(band) {
    var t = $('#wpa2PersonalPwd' + band);
    var pwd = t.prop('value');

    if (pwd.length == 0) {
        $.alert(ERR_WLAN_WPA_PSK_EMPTY);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length < 8) {
        $.alert(ERR_WLAN_WPA_PSK_LENGTH_INVALID);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length >= 64) {
        if (!isHex(pwd, 0)) {
            $.alert(ERR_WLAN_WPA_PSK_HEX_INVALID);
            t.focus();
            t.select();
            return false;
        }
        t.prop('value') = t.prop('value').substr(0, 64);
    } else {
        if ($.asc(pwd, true)) {
            $.alert(ERR_WLAN_WPA_PSK_ASCII_INVALID);
            t.focus();
            t.select();
            return false;
        }
    }

    return true;
}

function init() {
    var basicList = $.act(ACT_GL, LAN_WLAN, null, null, ["Enable", "SSID", "X_TP_Band"]);
    if (!$.exe()) {
        $.each(basicList, function() {
            if ("2.4GHz" == this.X_TP_Band) {
                wlanObj_2g = this;
            }
            if ("5GHz" == this.X_TP_Band) {
                wlanObj_5g = this;
            }
        });

        mssidObj_2g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_2g.__stack, null, ["MultiSSIDEnable"]);
        mssidObj_5g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_5g.__stack, null, ["MultiSSIDEnable"]);
        vapList_2g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_2g.__stack, ["Name", "Enable", "SSID", "SSIDAdvertisementEnable", "isolateClients", "BeaconType", "BasicAuthenticationMode", "WEPKeyIndex", "BasicEncryptionModes", "WPAEncryptionModes", "WPAAuthenticationMode", "IEEE11iEncryptionModes", "IEEE11iAuthenticationMode", "PreSharedKey", "GroupKeyUpdateInterval", "RadiusServerIP", "RadiusServerPort", "RadiusServerPassword"]);
        vapList_5g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_5g.__stack, ["Name", "Enable", "SSID", "SSIDAdvertisementEnable", "isolateClients", "BeaconType", "BasicAuthenticationMode", "WEPKeyIndex", "BasicEncryptionModes", "WPAEncryptionModes", "WPAAuthenticationMode", "IEEE11iEncryptionModes", "IEEE11iAuthenticationMode", "PreSharedKey", "GroupKeyUpdateInterval", "RadiusServerIP", "RadiusServerPort", "RadiusServerPassword"]);

        guestnetObj_2g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_2g.__stack, null, ["Enable", "Name", "IsModified", "LANAccessEnable", "USBAccessEnable", "TCEnable", "TCMaxUpBW", "TCMinUpBW", "TCMaxDownBW", "TCMinDownBW", "TCRuleID"]);
        guestnetObj_5g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_5g.__stack, null, ["Enable", "Name", "IsModified", "LANAccessEnable", "USBAccessEnable", "TCEnable", "TCMaxUpBW", "TCMinUpBW", "TCMaxDownBW", "TCMinDownBW", "TCRuleID"]);

        if (!$.exe()) {
            $.each(vapList_2g, function(arg, index) {
                if (this.name == guestnetObj_2g.name)
                    vapObj_2g = this;
            });
            $.each(vapList_5g, function(arg, index) {
                if (this.name == guestnetObj_5g.name)
                    vapObj_5g = this;
            });
            if (guestnetObj_2g.enable == true) {
                /*                vapObj = vapObj2g;
                guestnetObj = guestnetObj2G;*/
            }
            if (guestnetObj_2g.enable == true) {
                /*                vapObj = vapObj5g;
                guestnetObj = guestnetObj_5g;*/
            }
        }
        initParamShow(vapObj_2g, '_2g');
        initParamShow(vapObj_5g, '_5g');
        initAdvancedShow(vapObj_2g, guestnetObj_2g);
        initSecShow(vapObj_2g, '_2g');
        initSecShow(vapObj_5g, '_5g');
    }
}

function initParamShow(vapObj, band) {
    if (vapObj.enable == 1) {
        $('#wlEn' + band).prop('checked', 'checked');
    }
    if (band == '_2g' && wlanObj_2g.enable == 0) {
        $.errorTip('wlEn_2g', ERR_WLAN_DISABLED);
    } else if (band == '_5g' && wlanObj_5g.enable == 0) {
        $.errorTip('wlEn_5g', ERR_WLAN_DISABLED);
    }

    $('#ssid' + band).prop('value', vapObj.SSID);

    if (vapObj.SSIDAdvertisementEnable == 0) {
        $('#hideSSID' + band).prop('checked', 'checked');
    }
}

function initAdvancedShow(vapObj, guestnetObj) {
    if (vapObj.isolateClients == 1) {
        $('#seeEachOther').prop('checked', 'checked');
    }
    if (guestnetObj.LANAccessEnable == 1) {
        $('#accessLocal').prop('checked', 'checked');
    }
    if (guestnetObj.USBAccessEnable == 1) {
        $('#accessUSB').prop('checked', 'checked');
    }
}

function initSecShow(wlanObj, band) {
    if (initSecType(wlanObj, band) === false) {
        $('#save').prop('disabled', 'disabled');
    } else {
        initWpa2Personal(wlanObj, band);
    }

}

function initSecType(wlanObj, band) {
    if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'None') {
        $('#wpa2PersonalPwd' + band).prop('value', '');
        $('#notice' + band).find('span').html('You have no password, please go to Advanced -> Guest Network to change.');
        return false;
    } else if (wlanObj.beaconType == 'WPA') {
        if (wlanObj.WPAAuthenticationMode == 'PSKAuthentication') {
            return true;
        } else {
            $('#wpa2PersonalPwd' + band).prop('value', '');
            $('#notice' + band).find('span').html('You use WPA/WPA2 Enterprise, please go to Advanced -> Guest Network to change.');
            return false;
        }
    } else if (wlanObj.beaconType == '11i' || wlanObj.beaconType == 'WPAand11i') {
        if (wlanObj.IEEE11iAuthenticationMode == 'PSKAuthentication') {
            return true;
        } else {
            $('#wpa2PersonalPwd' + band).prop('value', '');
            $('#notice' + band).find('span').html('You use WPA/WPA2 Enterprise, please go to Advanced -> Guest Network to change.');
            return false;
        }
    } else if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'WEPEncryption') {
        $('#wpa2PersonalPwd' + band).prop('value', '');
        $('#notice' + band).find('span').html('You use WEP security, please go to Advanced -> Guest Network to change.');
        return false;
    }
}

function initWpa2Personal(wlanObj, band) {
    $('#wpa2PersonalPwd' + band).prop('value', wlanObj.preSharedKey);
}

function check(band) {
    if (checkSSID(band) == false) {
        return false;
    }
    if (checkPersonal(band) == false) {
        return false;
    }
}

function clickSave(wlanObj, guestnetObj, band) {
    var wlSettings = {};
    var guestSettings = {};
    var type;

    wlSettings.enable = $('#wlEn' + band).prop('data-checked') ? 1 : 0;
    wlSettings.SSID = $('#ssid' + band).prop('value');
    wlSettings.SSIDAdvertisementEnable = $('#hideSSID' + band).prop('data-checked') ? 0 : 1;
    wlSettings.preSharedKey = $('#wpa2PersonalPwd' + band).prop('value');

    guestSettings.LANAccessEnable = $('#accessLocal').prop('data-checked') ? 1 : 0;
    guestSettings.USBAccessEnable = $('#accessUSB').prop('data-checked') ? 1 : 0;

    $.act(ACT_SET, LAN_WLAN_MSSIDENTRY, wlanObj.__stack, null, wlSettings);

    $.act(ACT_SET, LAN_WLAN_GUESTNET, guestnetObj.__stack, null, guestSettings);

    $.exe();
}

$('#save').on('click.wlBasic', function(e) {
    if (check('_2g') == false || check('_5g') == false) {
        return;
    }
    clickSave(vapObj_2g, guestnetObj_2g, '_2g');
    clickSave(vapObj_5g, guestnetObj_5g, '_5g');
});
</script>
<h3>Settings</h3>

<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div>
            <b>See each other:</b>
            <input type="checkbox" id="seeEachOther" />
            <label>Allow guests to see each other</label>
        </div>
        <div>
            <b>Access my local network:</b>
            <input type="checkbox" id="accessLocal" />
            <label>Allow guests to access to my local network</label>
        </div>
        <div>
            <b>USB Storage Sharing:</b>
            <input type="checkbox" id="accessUSB" />
            <label>Allow Guests to access my USB Storage Sharing</label>
        </div>
        <div class="part-separate">
            <b>2.4GHz:</b>
            <input type="checkbox" id="wlEn_2g" />
            <label>Enable Wireless Radio</label>
        </div>
        <div class="inline">
            <b>Name(SSID):</b>
            <input type="text" class="xl" id="ssid_2g" />
        </div>
        <div class="inline">
            <input type="checkbox" id="hideSSID_2g" />
            <label>Hide SSID</label>
        </div>
        <div class="pure-control-group inline">
            <label class="label_title"><b>Password:</b>
            </label>
            <input type="text" maxlength="64" class="tp-input-text xl" id="wpa2PersonalPwd_2g" />
        </div>
        <div class="inline">
            <p class="cfg-line" id="notice_2g">
                <span></span>
            </p>
        </div>

        <div class="part-separate">
            <b>5GHz:</b>
            <input type="checkbox" id="wlEn_5g" />
            <label>Enable Wireless Radio</label>
        </div>
        <div class="inline">
            <b>Name(SSID):</b>
            <input type="text" class="xl" id="ssid_5g" />
        </div>
        <div class="inline">
            <input type="checkbox" id="hideSSID_5g" />
            <label>Hide SSID</label>
        </div>
        <div class="pure-control-group inline">
            <label class="label_title"><b>Password:</b>
            </label>
            <input type="text" maxlength="64" class="tp-input-text xl" id="wpa2PersonalPwd_5g" />
        </div>
        <div class="inline">
            <p class="cfg-line" id="notice_5g">
                <span></span>
            </p>
        </div>
        <button type="submit" class="green" id="save">Save</button>
    </form>
</div>

<script type="text/javascript">
$.tpInit(init);
</script>
