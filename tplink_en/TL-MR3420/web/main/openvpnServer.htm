<script language="javascript" type="text/javascript">
var curOvpnObj;
var newOvpnObj;
var curUserObj;
var cloudDns;
var dynCfg;
var noipCfg;
var userDnsCfg;
var wanConn;
var updateFlag;

var OVPN_CA_NOT_GENERATED = 0;
var OVPN_CA_GENERATED = 1;
var OVPN_CA_GENERATING = 2;

var fakeLink;
var needToGen = false;
var isConfirmWindow = false;
var DMVS_CONNECTING = "Connecting";
var DMVS_CONNECTED = "Connected";
var DYNDNS_STATE_DISCONNECTED = 0;
var DYNDNS_STATE_CONNECTING = 1;
var DYNDNS_STATE_CONNECTED = 2;
var NOIPDNS_STATE_DISCONNECTED = 3;
var NOIPDNS_STATE_CONNECTING = 4;
var NOIPDNS_STATE_CONNECTED = 5;
var USERDNS_STATE_DISCONNECTED = 0;
var USERDNS_STATE_CONNECTING = 1;
var USERDNS_STATE_CONNECTED = 2;
// ddns not set will be noticed when enable openvpn and export config file 
// wan ip not up will be noticed when customer export config file.

function checkThenExportCliOvpn() {

    needToGen = false;
    isConfirmWindow = false;

    var l3Forward = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
    var ipList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["Enable", "Name", "ConnectionStatus"]);
    var pppList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["Enable", "Name", "ConnectionStatus"]);
    var found = false;
    /*
    if (INCLUDE_IPV6)
        var l3ForwardIpv6 = $.act(ACT_GET, L3_IP6_FORWARDING, null, null, ["__ifAliasName"]);
*/
    if (INCLUDE_PPTP)
        var pptpList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["Enable", "Name", "ConnectionStatus"]);
    if (INCLUDE_L2TP)
        var l2tpList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["Enable", "Name", "ConnectionStatus"]);

    if ($.exe())
        return false;

    $.each(ipList, function() {
        if (this.enable == 1 && (this.name == l3Forward.__ifAliasName)) {
            wanConn = this;
            found = true;
        }
    });
    if (found == false) {
        $.each(pppList, function() {
            if (this.enable == 1 && (this.name == l3Forward.__ifAliasName)) {
                wanConn = this;
                found = true;
            }
        });
    }
    if (INCLUDE_PPTP && found == false) {
        $.each(pptpList, function() {
            if (this.enable && this.name == l3Forward.__ifAliasName) {
                wanConn = this;
                found = true;
            }
        });
    }
    if (INCLUDE_L2TP && found == false) {
        $.each(l2tpList, function() {
            if (this.enable && this.name == l3Forward.__ifAliasName) {
                wanConn = this;
                found = true;
            }
        });
    }
    /*
    if (found == false) {
        $.each(ipList, function() {
            if (this.enable == 1 && (INCLUDE_IPV6 && this.name == l3ForwardIpv6.__ifAliasName)) {
                wanConn = this;
                found = true;
            }
        });
    };

    if (found == false) {
        $.each(pppList, function() {
            if (this.enable == 1 && (INCLUDE_IPV6 && this.name == l3ForwardIpv6.__ifAliasName)) {
                wanConn = this;
                found = true;
            }
        });
    };
*/

    /*相关内容采用宏INCLUDE_DYNDNS控制*/
    if (INCLUDE_DYNDNS) {
        dynCfg = $.act(ACT_GET, DYN_DNS_CFG, null, null);
    }

    /*相关内容采用宏INCLUDE_NOIPDNS控制*/
    if (INCLUDE_NOIPDNS) {
        noipCfg = $.act(ACT_GET, NOIP_DNS_CFG, null, null);
    }

    /*相关内容采用宏INCLUDE_DDNS_USERDEFINE控制，逻辑与noipCfg相似*/
    if (INCLUDE_DDNS_USERDEFINE) {
        userDnsCfg = $.act(ACT_GET, USERDEFINE_DDNS_CFG, null, null);
    }

    if (INCLUDE_CLOUD_ACCOUNT) {
        curUserObj = $.act(ACT_GET, CURRENT_USER, null, null);
        cloudDns = $.act(ACT_GET, CLOUD_DDNS, null, null);
        if ($.exe()) {
            return;
        }
        if (curUserObj.userSetting == 2 && cloudDns.enable == 1) {
            $.act(ACT_SET, CLOUD_DDNS, null, null, ["action=5", "status=0"]);
            if ($.exe()) {
                return;
            }


            var count = 0;
            var timesMax = 10;
            setTimeout(function() {
                count++;
                cloudDns = $.act(ACT_GET, CLOUD_DDNS, null, null);
                if ($.exe()) {
                    return;
                }

                if (cloudDns.status == 2 /*CLOUD_DDNS_QUERY_SUCC = 2*/ ) {
                    //获取成功
                    execute();
                } else if (cloudDns.status >= 20000) {
                    //登录失败
                    execute();
                } else if (count < timesMax) {
                    //
                    setTimeout(arguments.callee, 1000);
                } else {
                    //超时
                    execute();
                }

            }, 1000);
        }
    } else {
        execute();
    }

    function execute() {
        $.exe(function(ret) {
            if (ret) {
                $.alert(ret);
                return;
            }

            function ok() {
                $("#export_openvpn").prop("disabled", false);
                $("#exportSt").html("");
                fakeLink.click();
                //$.removeLoading();
            }

            function back() {
                $.reload();
            }

            /*      $.alert() cannot be called sequently twice, use following judgmental array 
             *                  DDNS_NOT_EN, EN_DISCONN, EN_CONN
             *      WAN_DISCONN
             *      WAN_CONN
             */
            if (wanConn == null) {
                //$.alert(ERR_OVPN_WAN_DISCONN); 
                $.alert(ERR_OVPN_WAN_DISCONN);
                needToGen = false;
            } else if (((INCLUDE_CLOUD_ACCOUNT && cloudDns.enable != 1) || !(INCLUDE_CLOUD)) &&
                ((INCLUDE_DYNDNS && dynCfg.enable == 1 && dynCfg.state == DYNDNS_STATE_CONNECTING) ||
                    (INCLUDE_NOIPDNS && noipCfg.enable == 1 && noipCfg.state == NOIPDNS_STATE_CONNECTING) ||
                    (INCLUDE_DDNS_USERDEFINE && userDnsCfg.enable == 1 && userDnsCfg.state == USERDNS_STATE_CONNECTING) ||
                    (wanConn.connectionStatus == DMVS_CONNECTING))) {
                needToGen = false;
                $("#export_openvpn").prop("disabled", true);
                $("#exportSt").html("Exporting"); //$("#export_openvpn") 's click funtion has addLoading,no need here
                setTimeout(checkThenExportCliOvpn, 1000);

            } else if (wanConn.connectionStatus != DMVS_CONNECTED) {
                //$.alert(ERR_OVPN_WAN_DISCONN); 
                $.alert(ERR_OVPN_WAN_DISCONN);
                needToGen = false;

            } else if (((INCLUDE_DYNDNS && dynCfg.enable != 1) || !(INCLUDE_DYNDNS)) &&
                ((INCLUDE_NOIPDNS && noipCfg.enable != 1) || !(INCLUDE_NOIPDNS)) &&
                ((INCLUDE_DDNS_USERDEFINE && userDnsCfg.enable != 1) || !(INCLUDE_DDNS_USERDEFINE)) &&
                ((INCLUDE_CLOUD_ACCOUNT && cloudDns.enable != 1) || !(INCLUDE_CLOUD)) &&
                (wanConn.connectionStatus == DMVS_CONNECTED)) {
                needToGen = true;
                isConfirmWindow = true;
                $.confirm(c_str.ovpnDDNSNotEnWanConn, ok, back);

            } else if (((INCLUDE_DYNDNS && dynCfg.enable == 1 && dynCfg.state == DYNDNS_STATE_CONNECTED) ||
                    (INCLUDE_NOIPDNS && noipCfg.enable == 1 && noipCfg.state == NOIPDNS_STATE_CONNECTED) ||
                    (INCLUDE_DDNS_USERDEFINE && userDnsCfg.enable == 1 && userDnsCfg.state == USERDNS_STATE_CONNECTED) ||
                    (INCLUDE_CLOUD_ACCOUNT && cloudDns.enable == 1 && cloudDns.status == 2 /*CLOUD_DDNS_QUERY_SUCC*/ && !! cloudDns.boundDomain)) &&
                (wanConn.connectionStatus == DMVS_CONNECTED)) {
                needToGen = true;

            } else if (((INCLUDE_DYNDNS && dynCfg.enable == 1 && dynCfg.state == DYNDNS_STATE_DISCONNECTED) ||
                    (INCLUDE_NOIPDNS && noipCfg.enable == 1 && noipCfg.state == NOIPDNS_STATE_DISCONNECTED) ||
                    (INCLUDE_DDNS_USERDEFINE && userDnsCfg.enable == 1 && userDnsCfg.state == USERDNS_STATE_DISCONNECTED) ||
                    (INCLUDE_CLOUD_ACCOUNT && cloudDns.enable == 1 && (cloudDns.status != 2 /*CLOUD_DDNS_QUERY_SUCC*/ || !cloudDns.boundDomain))) &&
                (wanConn.connectionStatus == DMVS_CONNECTED)) {
                needToGen = true;
                isConfirmWindow = true;
                $.confirm(c_str.ovpnDDNSDisconnWanConn, ok, back);

            } else {
                needToGen = true;
            }

            if (needToGen == true && isConfirmWindow == false) {
                $("#export_openvpn").prop("disabled", false);
                $("#exportSt").html("");
                location.href = fakeLink.href;
                $.removeLoading();
            }
        });
    }


}

var timeOutID;

function checkServerStatus() {
    curOvpnObj = $.act(ACT_GET, OPENVPN, null, null);
    $.exe(function(ret) {
        if (ret) return;
        if (curOvpnObj.caGenerating == OVPN_CA_GENERATED) {
            if (updateFlag == 1) {
                $("#save_openvpn").prop("disabled", false);
                $("#export_openvpn").prop("disabled", false);
                $("#genCertSt").html(n_str.openvpnServer.t_generated).css("color", 'rgb(16,171,255)');
                // setTimeout(function() {
                $("#genCert").prop("disabled", false);
                $.removeLoading();
                // $("#genCertSt").html("");
                updateFlag = 0;
                // }, 2000)
            } else {
                $("#save_openvpn").prop("disabled", false);
                $("#export_openvpn").prop("disabled", false);
                $("exportSt").html("");
                $("#expConfForm").find("span.load").closest('div').remove();
                $("#genCert").prop("disabled", false);
                $("#genCertSt").html("");
                $("#genCertForm").find("span.load").closest('div').remove();
            }
        } else if (curOvpnObj.caGenerating == OVPN_CA_GENERATING) {
            updateFlag = 1;
            $("#save_openvpn").prop("disabled", true);
            $("#export_openvpn").prop("disabled", true);
            $("#genCert").prop("disabled", true);
            $.addLoading($("#genCert"), null, null, 1);
            $('#genCertSt').html(n_str.openvpnServer.t_generating);
            if (timeOutID > 0) {
                return;
            }
            timeOutID = setTimeout(function() {
                timeOutID = 0;
                checkServerStatus();
            }, 1000);
        } else {
            return;
        }
    });
}

function init() {
    curOvpnObj = $.act(ACT_GET, OPENVPN, null, null);

    if (!$.exe()) {
        $("#openvpnEn").prop('checked', (curOvpnObj.enable == 1) ? true : false);
        if (curOvpnObj.proto == "UDP") {
            $("#serviceTypeUDP").prop('checked', 'checked');
        } else if (curOvpnObj.proto == "TCP") {
            $("#serviceTypeTCP").prop('checked', 'checked');
        } else {
            $.alert(CMM_INTERNAL_ERROR);
        }
        $("#servicePort").prop("value", curOvpnObj.port);
        if (curOvpnObj.access == 1) {
            $("#accessHome").prop('checked', 'checked');
        } else if (curOvpnObj.access == 2) {
            $("#accessInternetHome").prop('checked', 'checked');
        } else {
            $.alert(CMM_INTERNAL_ERROR);
        }
        $("#ovpnSubnet").tpAddress("val", curOvpnObj.subnetAddress);
        $("#ovpnNetmask").tpAddress("val", curOvpnObj.subnetMask);

        if (curOvpnObj.caGenerating == OVPN_CA_NOT_GENERATED) {
            $("#noteCert").removeClass("nd");
        } else {
            $("#noteCert").addClass("nd");
        }

        checkServerStatus();
    }
}

$("#save_openvpn").click(function() {
    var ovpnEn;
    var serType;
    var portNum;
    var accessType;
    var caNotGenExecOkFunc = 0;
    var ovpnSubnetStr;
    var ovpnNetmaskStr;
    $.addLoading($(this));
    if (!checkParaValidity()) {
        return;
    }
    if (checkNothingChg()) {
        $.removeLoading();
        $.reload();
        return;
    }
    if (($("#openvpnEn").prop('data-checked')) && (curOvpnObj.caGenerating == OVPN_CA_NOT_GENERATED)) {
        /* donnot check dut time, just set it to 2015-01-02 when dut power is on
        if (!checkCurrentTime()) {
            $.removeLoading();
            $.reload();
            return;
        } else {
        */
        caNotGenExecOkFunc = 1;
        $.confirm(c_str.ovpnNoCertSave, ok, back, null, m_str.ok, m_str.cancel);
    }

    function ok() {
        /* when enable openVpn, do not remind customers, only remind them when they click "export"
        if ($("#openvpnEn").prop('data-checked') && curOvpnObj.enable == 0) {
            dynCfg = $.act(ACT_GET, DYN_DNS_CFG, null, null);
            noipCfg = $.act(ACT_GET, NOIP_DNS_CFG, null, null); 
            $.exe(function(ret) {
                if (ret)  return;
                if (dynCfg.enable != 1 && noipCfg != 1) {
                    $.alert(ERR_OVPN_RECOMMEND_DDNS_EN);
                }           
            });
        }
        */
        $.addLoading();
        ovpnEn = $("#openvpnEn").prop('data-checked') ? 1 : 0;
        if ($("#serviceTypeUDP").prop('checked')) {
            serType = "UDP";
        } else if ($("#serviceTypeTCP").prop('checked')) {
            serType = "TCP";
        }
        var portNum = $("#servicePort").prop("value");
        if ($("#accessHome").prop('checked')) {
            accessType = 1;
        } else if ($("#accessInternetHome").prop('checked')) {
            accessType = 2;
        }
        ovpnSubnetStr = $("#ovpnSubnet").tpAddress('val');
        ovpnNetmaskStr = $("#ovpnNetmask").tpAddress('val');

        $.act(ACT_SET, OPENVPN, null, null, ["enable=" + ovpnEn, "proto=" + serType, "port=" + portNum, "subnetAddress=" + ovpnSubnetStr, "subnetMask=" + ovpnNetmaskStr, "access=" + accessType]);
        $.exe(function(ret) {
            $.removeLoading();
            if (!ret) {
                /*
                if (0 == caNotGenExecOkFunc) {
                    $.reload();
                } else {
                    $.addLoading();
                    $.act(ACT_OP, ACT_OP_OVPN_REGEN_KEYS, curOvpnObj.__stack);
                    $.exe(function(err) {
                        if (err) {
                            $.alert(err);
                            return;
                        }
                        $.reload();
                        $.removeLoading();
                    });
                }*/
                $.reload();
            }
        });
    }

    function back() {
        $.reload();
    }

    if (0 == caNotGenExecOkFunc) {
        ok();
    }
});

function checkNothingChg() {
    if ((curOvpnObj.enable == 1 && $("#openvpnEn").prop('data-checked') == false) || (curOvpnObj.enable == 0 && $("#openvpnEn").prop('data-checked') == true)) {
        return false;
    }
    if ((curOvpnObj.proto == "UDP" && $("#serviceTypeTCP").prop('checked') == true) || (curOvpnObj.proto == "TCP" && $("#serviceTypeUDP").prop('checked') == true)) {
        return false;
    }
    if (curOvpnObj.port != $("#servicePort").prop("value")) {
        return false;
    }
    if ((curOvpnObj.access == 1 && $("#accessInternetHome").prop('checked') == true) || (curOvpnObj.access == 2 && $("#accessHome").prop('checked') == true)) {
        return false;
    }
    if (($("#ovpnSubnet").tpAddress('val') != curOvpnObj.subnetAddress) ||
        ($("#ovpnNetmask").tpAddress('val') != curOvpnObj.subnetMask)) {
        return false;
    }

    return true;
}

function checkParaValidity() {
    var portValue = $("#servicePort").prop('value');
    var ovpnSubnetStr = $("#ovpnSubnet").tpAddress('val');
    var ovpnSubnetNum = $.ip2num(ovpnSubnetStr);
    var ovpnNetmaskStr = $("#ovpnNetmask").tpAddress('val');
    var ovpnNetmaskNum = $.ip2num(ovpnNetmaskStr);

    if ((portValue.length <= 0) || (!$.isnum(portValue)) || (portValue < 1024) || (portValue > 65535)) {
        $.alert(ERR_OVPN_PORT_INVALID);
        var element = $("#servicePort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    } else if ((portValue == 21) || (portValue == 53) || (portValue == 70) || (portValue == 80) ||
        (portValue == 119) || (portValue == 110) || (portValue == 1701) || (portValue == 1723) ||
        (portValue == 25) || (portValue == 1080) || (portValue == 23) ||
        (portValue == 33344) || (portValue == 20005) || (portValue == 1900) || (portValue == 20002) ||
        (portValue == 7547) || (portValue == 139) || (portValue == 445) || (portValue == 7505)) {
        $.alert(ERR_OVPN_PORT_EXISTS);
        var element = $("#servicePort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if ($.ifip(ovpnSubnetStr, true)) {
        $.alert(ERR_OVPN_SUBNET_INVAD);
        element = $("#ovpnSubnet");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if ($.mask(ovpnNetmaskStr, true)) {
        $.alert(ERR_OVPN_NETMASK_INVAD);
        element = $("#ovpnNetmask");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if (ovpnNetmaskNum >= $.ip2num("255.255.255.248")) {
        $.alert(ERR_OVPN_NETMASK_INVAD_VALUE);
        element = $("#ovpnNetmask");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if (ovpnSubnetNum & ovpnNetmaskNum != ovpnSubnetNum) {
        $.alert(ERR_OVPN_SUBNET_NETMASK_INVAD);
        element = $("#ovpnSubnet");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    return true;
}

function checkCurrentTime() {
    var hour = $.act(ACT_GET, HOUR, null, null);

    if (!$.exe()) {
        if (hour.year < 2015 || hour.year > 2037) {
            $.alert(ERR_OVPN_TIME_NOT_SET);
            return false;
        } else {
            return true;
        }
    } else {
        return false;
    }
}

$("#export_openvpn").click(function() {
    if (curOvpnObj.caGenerating == OVPN_CA_NOT_GENERATED) {
        $.alert(ERR_OVPN_CERT_NOT_GEN_EXP);
        return;
    }

    $.addLoading($(this));

    fakeLink = document.createElement("a");
    if (typeof(fakeLink.click) == 'undefined') {
        location.href = "";
    } else {
        fakeLink.href = '/cgi/openvpn?cliOvpnDown';
        document.body.appendChild(fakeLink);
    }

    checkThenExportCliOvpn();
});

$("#genCert").click(function() {
    $.addLoading($(this));
    $.act(ACT_OP, ACT_OP_OVPN_REGEN_KEYS, curOvpnObj.__stack);
    $.exe(function(err) {
        if (err) {
            $.alert(err);
            return;
        }
        $.reload();
        $.removeLoading();
    });
});
</script>
<h3 id="t_openvpn">OpenVPN</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div id="noteCert" class="nd" style="margin:0px 0px;">
            <p class="cfg-line" style="margin:0px 0px;">
                <span id="t_stepCert">Note:</span>
                <span id="t_stepCert1">No certificate currently, please <b>Generate</b> one before enabling VPN Server.</span>
            </p>
        </div>
        <div>
            <b class="l" id="t_empty"></b>
            <input type="checkbox" id="openvpnEn" />
            <label id="t_enOvpn">Enable VPN Server</label>
        </div>

        <div>
            <b class="l" id="t_srvType">Service Type:</b>
            <input type="radio" name="serviceType" id="serviceTypeUDP" />
            <label id="t_udp">UDP</label>
            <input type="radio" name="serviceType" id="serviceTypeTCP" />
            <label id="t_tcp">TCP</label>
        </div>
        <div>
            <b class="l" id="t_servicePort">Service Port:</b>
            <input type="text" id="servicePort" class="l" required />
        </div>
        <div class="inline">
            <b class="l" id="t_ovpnSubnetAndMask">VPN Subnet/Netmask:</b>
            <input type="text" id="ovpnSubnet" class="l ip-address" required />
            <input type="text" id="ovpnNetmask" class="l ip-address" required />
        </div>
        <div>
            <b class="l" id="t_cliAccess">Client Access:</b>
            <input type="radio" name="clientAccess" id="accessHome" />
            <label id="t_home">Home Network Only</label>
            <input type="radio" name="clientAccess" id="accessInternetHome" />
            <label id="t_internetHome">Internet and Home Network</label>
        </div>

        <div class="part-separate">
            <button type="submit" class="green T_save" id="save_openvpn">Save</button>
        </div>
    </form>
</div>

<h3 id="t_genCert">Certificate</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned" id="genCertForm">
        <div class="pure-control-group">
            <label class="label-title xxl" id="t_genText">Generate the certificate.</label>
            <button type="submit" class="green T_c_genCert" id="genCert">Generate</button>
            <div class='inline' style="margin-left: 25px;">
                <span id='genCertSt'></span>
            </div>
        </div>
    </form>
</div>

<h3 id="t_configFile">Configuration File</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned" id="expConfForm">
        <div class="pure-control-group">
            <label class="label-title xxl" id="t_export">Export the configuration.</label>
            <button type="submit" class="green T_c_export" id="export_openvpn">Export</button>
            <div class='inline' style="margin-left: 25px;">
                <span id='exportSt'></span>
            </div>
        </div>
    </form>
</div>
<script language="javascript" type="text/javascript">
$.tpInit(init);
</script>
