<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<script type="text/javascript" src="../localiztion/region_channel_table.js"></script>
<script type="text/javascript">
<!--
function Click(){ window.event.returnValue=false;}
document.oncontextmenu=Click;
//-->
</script>
<script type="text/javascript">
<!-- 
var TOTAL_CHANNEL = 52;
var chan_index_map = new Array(
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 56, 60, 64, 70, 80, 
100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165, 184, 188, 192, 196);

var region_chan_table_shift = 53;

//add by chenlfieng
var    IEEE80211_MODE_AUTO             = 0;    /* autoselect */
var    IEEE80211_MODE_11A              = 1;    /* 5GHz; OFDM */
var    IEEE80211_MODE_11B              = 2;    /* 2GHz, CCK */
var    IEEE80211_MODE_11G              = 3;    /* 2GHz, OFDM */
var    IEEE80211_MODE_FH               = 4;    /* 2GHz, GFSK */
var    IEEE80211_MODE_TURBO_A          = 5;    /* 5GHz, OFDM, 2x clock dynamic turbo */
var    IEEE80211_MODE_TURBO_G          = 6;    /* 2GHz, OFDM, 2x clock  dynamic turbo*/
var    IEEE80211_MODE_11NA_HT20        = 7;    /* 5Ghz, HT20 */
var    IEEE80211_MODE_11NG_HT20        = 8;    /* 2Ghz, HT20 */
var    IEEE80211_MODE_11NA_HT40PLUS    = 9;    /* 5Ghz, HT40 (ext ch +1) */
var    IEEE80211_MODE_11NA_HT40MINUS   = 10;   /* 5Ghz, HT40 (ext ch -1) */
var    IEEE80211_MODE_11NG_HT40PLUS    = 11;   /* 2Ghz, HT40 (ext ch +1) */
var    IEEE80211_MODE_11NG_HT40MINUS   = 12;   /* 2Ghz, HT40 (ext ch -1) */
var    IEEE80211_MODE_11NG_HT40        = 13;   /* 2Ghz, Auto HT40 */
var   IEEE80211_MODE_11NA_HT40        = 14;   /* 2Ghz, Auto HT40 */
var	   IEEE80211_CHAN_REQUIRED_DFS	   = 15;   /* DFS channel */

var TwoGSupportHT40 = 0;/* a flag for in current country, 2.4G support HT40 or not */
var FiveGSupportHT40 = 0;/* a flag for in current country, 5G support HT40 or not */

function checkssid()
{
	var cf = document.forms[0];
	var len = 0;
	var i = 0;
	for (i = 0; i < cf.ssid.value.length; i ++)
	{
		var c = cf.ssid.value.charAt(i);
		len += ((c >= ' ') && (c <= '~')) ? 1 : 2;
	}
	return len;
}
// check ssid when keyup event occurs
function checkkeyup()
{
	return true;
}
// check ssid when keydown event occurs
function checkkeydown()
{
	var len = checkssid();
	var c = window.event.keyCode;
	if ((len >= 31) && (c > 127))
	{
		return false;
	}
	return true;
}

function changeInfo()
{
    var secTypes = document.forms[0].secType;
    
    if(secTypes[0].checked)
    {

    }
    else if (secTypes[1].checked)
    {
    	if (wzdWlanInf[14])
    	{
    	 	document.forms[0].pskSecret.value = wzdWlanInf[17];
    	}
    	else
    	{
    		document.document.forms[0].pskSecret.value = " ";
    	}
    }
    else if (secTypes[2].checked)
    {
    	
    	document.document.forms[0].pskSecret.value = " ";
    }
    else
    {
    }
}

function doSubmit()
{
	var cf = document.forms[0];
	if  (document.forms[0].ssid.value.length == 0)		
	{
		alert(js_pl_ssid="Please input SSID!");		
		return false;
	}
	
        if ((cf.region.value == 54) || (cf.region.value == 69))
	{	
		cf.chanWidth.disabled = false;
		cf.chanWidth.value = 1;
	}
	
	ressid = checkssid();
	if  (ressid == 0)		
	{
		alert(js_pl_ssid="Please input SSID!");
		return false;	
	}
	if  (ressid > 32)	
	{
		alert(js_ssid_exc_alp="The SSID cannot exceed 32 alphanumeric characters. Please input correctly!");
		return false;	
	}
		
	if (!checkAuth())
	{
		return false;
	}
	
	if (!checkpwd())
	{
		return false;
	}
	
	return true;
}

function updateChannelList()
{
	var cf = document.forms[0];
	var chwidthValue;
	var modeValue;
	var regionIndex;
	var i;
	var mask = 0x0;
	
	modeValue = cf.mode.value;
	chwidthValue = cf.chanWidth.value;
	if (wzdWlanInf[9] == 1)
		regionIndex = cf.region.value;
	else
		regionIndex = 17;
	regionIndex = (regionIndex) * region_chan_table_shift;
	
	if(modeValue == 1)//11b
		mask = (1<<IEEE80211_MODE_11B);
	else if((modeValue == 2) || (modeValue == 4))//11bg,11g pureg
		mask = (1<<IEEE80211_MODE_11G);
	else if(modeValue == 6)//11a
		mask = (1<<IEEE80211_MODE_11A);
	else if((modeValue == 5) || (modeValue == 3))//11ng, 11ng puren
	{
		if(chwidthValue == 1)//HT20
			mask = (1<<IEEE80211_MODE_11NG_HT20);
		else if(chwidthValue == 3)//HT40
			mask = (1<<IEEE80211_MODE_11NG_HT40);
		else if(chwidthValue == 2)//Auto
			mask = (1<<IEEE80211_MODE_11NG_HT40)|(1<<IEEE80211_MODE_11NG_HT20);
	}
	else if((modeValue == 7) || (modeValue == 8))//11na, 11na puren
	{
		if(chwidthValue == 1)//HT20
			mask = (1<<IEEE80211_MODE_11NA_HT20);
		else if(chwidthValue == 3)//HT40
			mask = (1<<IEEE80211_MODE_11NA_HT40);
		else if(chwidthValue == 2)//Auto
			mask = (1<<IEEE80211_MODE_11NA_HT40);/* when channel width is "AUTO", set mask the same with HT40. */
	}
	else
		alert("wrong modeValue("+ modeValue +"), should not be here!");
	
	var dfs_chans = "";
	var oldChannel = cf.channel.value;
	cf.channel.options.length = 1;
	var j = 1;
	
	for(i = 1; i <= TOTAL_CHANNEL; i++)
	{
		if(Region_chan_table[regionIndex+i] & mask)
		{
			if(Region_chan_table[regionIndex+i] & (1<<IEEE80211_CHAN_REQUIRED_DFS))//it's dfs channel
			{
				//dfs_chans = dfs_chans + chan_index_map[i-1]+" ";
				continue;/* filter out dfs chans*/
			}			
			
			var optionObj = new Option(chan_index_map[i-1],chan_index_map[i-1],false,false);
			cf.channel.options[j++]=optionObj;
			if (chan_index_map[i-1] == oldChannel)
				cf.channel.value = chan_index_map[i-1];			
		}
	}
	
	if(dfs_chans)
	{
		document.getElementById("chan_notice").style.display = "block";		
	}	
	else
	{
		document.getElementById("chan_notice").style.display = "none";
	}
}
//end add

function changeMode()
{
	var cf = document.forms[0];
	var oldChanWidth = cf.chanWidth.value;
	
	if((cf.mode.value == 1) || (cf.mode.value == 2) || (cf.mode.value == 4) || (cf.mode.value == 6))
	{
		cf.chanWidth.value = 1;
		cf.chanWidth.disabled = true;
	}
	else if((TwoGSupportHT40 == 0) || (FiveGSupportHT40 == 0))
	{
		cf.chanWidth.value = 1;
		cf.chanWidth.disabled = true;
	}
	else
	{
		cf.chanWidth.value = oldChanWidth;//wzdWlanInf[11];
		cf.chanWidth.disabled = false;
	}
	
	updateChannelList();
}

function changeRegion()
{
	//changeMode(); comment by chenlifeng
	var cf = document.forms[0];

	//check support 5G, HT40 or not
	var regionIndex;
	var i, j;
	
	if (wzdWlanInf[9] == 1)
		regionIndex = cf.region.value;
	else
		regionIndex = 17;
	regionIndex = (regionIndex) * region_chan_table_shift;

	var mask = (1<<IEEE80211_MODE_11NA_HT20)|(1<<IEEE80211_MODE_11A)|(1<<IEEE80211_MODE_11NA_HT40);
	var supportFiveG = 0;
	var mask5GHT40 = (1<<IEEE80211_MODE_11NA_HT40);
	var mask2GHT40 = (1<<IEEE80211_MODE_11NG_HT40);
	FiveGSupportHT40 = 0;
	TwoGSupportHT40 = 0;

	for(i = 1; i <= TOTAL_CHANNEL; i++)
	{
		if(Region_chan_table[regionIndex+i] & mask)
		{
			if(!(Region_chan_table[regionIndex+i] & (1<<IEEE80211_CHAN_REQUIRED_DFS)))/* we don't support DFS chan yet*/
				supportFiveG = 1;
		}
		if(Region_chan_table[regionIndex+i] & mask5GHT40)
		{
			FiveGSupportHT40 = 1;
		}
		if(Region_chan_table[regionIndex+i] & mask2GHT40)
		{
			TwoGSupportHT40 = 1;
		}
	}
	
	if(supportFiveG == 0)
	{
		alert(js_not_support_5g = "The country do not support 5G, please ensure you select a correct country!");	 
		cf.region.value = 101;	/* reset to Unite State */
		changeRegion();
	}
}

function saveBtnVal(obj, val)
{
	var cf = document.forms[0];
	
    if(val == 0)
    {
        document.forms[0].btnValue.value = 0;
    }
    else
    {
        document.forms[0].btnValue.value = 1;
    }
	
	//add by weizq,2008-10-16
	if((cf.mode.value == 3) || (cf.mode.value == 8))
	{
		if(wzdWlanInf[13] == 1)//security enabled
		{
			//wep
			if(wzdWlanInf[14] == 1)
			{
				var bContinue = window.confirm(js_cur_exc_wep="Current encryption is WEP,11n only mode is not support,if you select ok,the security setting will be loss,continue?");
				if(!bContinue)
				{
					return false;
				}
			}
			//cipher = tkip or auto
			if(((wzdWlanInf[14] == 2) || (wzdWlanInf[14] == 3)) && (wzdWlanInf[15] == 1 || wzdWlanInf[15] == 2))
			{
				var bContinue = window.confirm(js_cur_enc_auto="Current encryption is Automatic or TKIP,11n only mode is not support for TKIP,if you select ok,the encryption will be changed to AES,continue?");
				if(!bContinue)
				{
					return false;
				}
			}
		}
	}
	//end add
	
	if(obj.getAttribute('type') == "button")//prevent duplicate commit
	{
		if(doSubmit())
		{
			document.wlancfg.submit();
		}
	}
}

//add by caishaoji on 2008/12/8
function getValLen(val)
{
	var len = 0;
	var i = 0;
	for (i = 0; i < val.length; i ++)
	{
		var c = val.charAt(i);
		len += ((c >= ' ') && (c <= '~')) ? 1 : 2;
	}
	return len;
}

function checkAuth()
{
	var cf = document.forms[0];
	var len;
	var st = 0;

	//WPARadius JS
	if (cf.secType[0].checked)
	{
		st = 0;
	}
	else if (cf.secType[1].checked)
	{
		st = 1;
	}
	else if (cf.secType[2].checked)
	{
		st = 2;
	}

	len = getValLen(cf.pskSecret.value);
	
	if ((st == 1) && (len <= 0))
	{
		alert(js_empty_psk_password="Empty PSK password, please input one!");
		cf.pskSecret.focus();
		return false;
	}
	if ((len > 0) && (len < 8))
	{
		alert(js_psk_char="PSK password should not be less than 8 characters, please input again!");
		cf.pskSecret.focus();
		cf.pskSecret.select();
		return false;
	}	
	if (len > 64)
	{
		alert(js_psk_too_long = "PSK password should not be longer than 64 characters, please input again!");
		cf.pskSecret.focus();
		cf.pskSecret.select();
		return false;
	}	
    if(len == 64)
    {
        var ch="ABCDEFabcdef0123456789";
        var c;
        for(i = 0; i < len; i++)
        {
            c = cf.pskSecret.value.charAt(i);
            if(ch.indexOf(c) == -1)
            {
                alert(js_psk_hex="The 64 bytes PSK password include non-hexadecimal characters, please input again.");
                cf.pskSecret.focus();
                cf.pskSecret.select();
                return false;
            }
        }
    }
        
    return true;
}

function checkpwd()
{
    var c;
    var obj = document.forms[0];
    var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
    var pwd;
    var chr;

    if(obj.secType[1].checked == true)
    {
        pwd = obj.pskSecret.value;
        for(var i = 0; i < pwd.length; i++)
        {
            chr = pwd.charAt(i);
            if(ch.indexOf(chr) == -1)
            {
                alert(js_illegal_passwd = "The password value contain illegal characters, please input another one!");
                return false;
            }
        }
    }
    return true;
}
//add end
//-->
</script>
</head>
<body onLoad="setTagStr(document,'ntw_wzd_wlan');LoadHelp('WzdWlanHelpRpm.htm');focusElement('Next');resize(this);"  onresize="resize(this);">
<form name="wlancfg" action="" enctype="multipart/form-data" method="get" onsubmit="return doSubmit();">
  <table id="autoWidth">
    <tr>
      <td class=h1 colspan=2 id="title"></td>
    </tr>
    <tr>
      <td class=blue colspan=2></td>
    </tr>
	<tr><td class=Item id="t_wl_radio">Wireless Radio:</td><td id="wifiStatus"></td></tr>
    <tr>
      <td class=Item>Wireless Network Name:</td>
      <td><input name="ssid" type="text" class="text" id="ssid" size="32" maxlength="32" value="LINUX">&nbsp;<span id="t_wzdssid_tips">(Also called the SSID)</span></td>
    </tr>
    <script type="text/javascript">
if (wzdWlanInf[9] == 1)
{
	var regionIndex=0;
	var oldRegion;
	document.write('<tr><td class=Item id="t_region">Region:<\/td><td><select name=region width = 180px onChange="changeRegion();">');
	for (var i = 0; i < wzdWlanInf[3]; i++)
	{
		document.write('<option value='+i+' '+Region_chan_table[regionIndex]+ '\/option>');
		regionIndex += region_chan_table_shift;
	}
	document.forms[0].region.value = wzdWlanInf[4];
	document.write('<\/select><\/td><\/tr><tr><td class="Item"  disabled><span id="t_warn">Warning:</span><br>&nbsp;<\/br><\/td><td disabled><span id="t_ensure_country">Ensure you select a correct country to conform local law.</span><br><span id="t_cause_if">Incorrect settings may cause interference. </span><\/td><\/tr><tr><td>&nbsp;<\/td><td>&nbsp;<\/td><\/tr>');
}
</script>
    <tr id="line_band">
          <td class="Item" id="t_band">Band:</td>
          <td><span id="bandMode"></span></td>
    </tr>
    <tr id="wlMode">
      <td class=Item id="t_mode">Mode:</td>
		<td>
		<select id="mode" name="mode" class="listL" onChange="changeMode();">
			<option value="1" id="t_11b_only">11b only</option>
			<option value="2" id="t_11g_only">11g only</option>
			<option value="3" id="t_11n_only">11n only</option>
			<option value="4" id="t_11bg_mixed">11bg mixed</option>
			<option value="5" id="t_11bgn_mixed">11bgn mixed</option>
			<option value="6" id="t_11a_only">11a only</option>
			<option value="7" id="t_11an_puren">11n only</option>
			<option value="8" id="t_11an_mixed">11an mixed</option>
		</select>
		</td>
    </tr>
	<tr>
      <td class=Item id="t_channel_wd">Channel Width:</td>
      <td><select name="chanWidth" class="listS" onChange="updateChannelList();">
              <option value=2 id="t_auto" name="t_auto">Auto</option>
              <option value=1>20MHz</option>
              <option value=3>40MHz</option>
       </select></td>
    </tr>
	<tr>
      <td class=Item id="t_channel">Channel:</td>
      <td><select name="channel" class="listS" id="channel">
      	<option value=15 id="t_auto" name="t_auto">Auto</option>
        </select></td>
    </tr>
    <tr>
        <td width="228">&nbsp;</td>
	       <td colspan = "3"><table id ="chan_notice" style="display:none;color:red;">
            <tr>
              <td  colspan = "4" ><span id ="t_chan_notice_1">Notice: Radio on will take one more minute for radar detecting when choosing DFS channel</span><BR>
                <span id ="t_chan_notice_2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DFS channels: 52 56 60 64 100 104 108 112 116 120 124 128 132 136 140</span></td>
            </tr>
          </table></td>
	</tr>
    <tr style="display:none;">
      <td class=Item id="t_enb_ssid_bc">Enable SSID Broadcast:</td>
      <td align = "left"><input type="checkbox" value=2 name="broadcast"></td>
    </tr>
    <tr>
      <td class="Item" id="t_wireless_sec">Wireless Security:</td>
    </tr>
    <tr>
      <td class="Item" style="font-weight:bold;font-size:14px"><input name="secType" id="secType" type="radio" value="0" ></td>
      <td>&nbsp;<a><b id="t_disSec">Disable Security</b></a></td>
    </tr>
    <tr>
      <td class="Item" style="font-weight:bold;font-size:14px"><input name="secType" id="secType" type="radio" value="3" ></td>
      <td>&nbsp;<b>Enable Security(WPA-PSK/WPA2-PSK)</b></td>
    </tr>
    <tr>
      <td class= "Item" id="t_psk_pwd">PSK Password:</td>
      <td><input name=pskSecret type=text class=text id="pskSecret" value="" size="64" maxlength="64"></td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td  colspan = 3 id="t_psk_note">(You can enter ASCII characters between 8 and 63 or Hexadecimal characters between 8 and 64.)</td>
    </tr>
    <tr>
      <td class="Item"><input name="secType" id="secType" type="radio" value="4" ></td>
      <td><b id="t_no_change">No Change</b></td>
    </tr>
    <tr>
      <td class=blue colspan=2></td>
    </tr>
    <tr>
      <td colspan=2 class=mbtn>
        <input id="Return" name="Return" type="button" class="buttonBig" value="Back" onclick="saveBtnVal(this, 0);">&nbsp;&nbsp;&nbsp;&nbsp;
        <input id="Next" name="Next" type="submit" class="buttonBig" value="Next" onclick="saveBtnVal(this, 1);">
		<input type="hidden" name="btnValue" id="btnValue">
        <input type="hidden" name="ClientId" value="">
        <input type="hidden" name="wlanpage" value="1"></td>
    </tr>
  </table>
</form>
</body>
</html>
<script type="text/javascript">
var cf = document.forms[0];
var modeObj = document.getElementById("mode");

document.getElementById("wifiStatus").innerHTML = (wzdWlanInf[2] == 0) ? "<span id='t_disable'>Disable</span>" : "<span id='t_enable'>Enable</span>";

if(wzdWlanInf[18] == 0)//2.4GHz
{
	cf.action = "/userRpm/WzdWlanRpm.htm";
	document.getElementById("title").innerHTML = "<span id='t_2G_title'>Quick Setup - Wireless 2.4GHz</span>";
	document.getElementById("bandMode").innerHTML = "<span id='t_2G_band_value'>2.4GHz<span>";
	for(var i = 0; i < 3; i++)
	{
		modeObj.remove(5);
	}
}
else//5GHz
{
	cf.action = "/userRpm/WzdWlanRpm_5g.htm";
	document.getElementById("title").innerHTML = "<span id='t_5G_title'>Quick Setup - Wireless 5GHz</span>";
	document.getElementById("bandMode").innerHTML = "<span id='t_5G_band_value'>5GHz<span>";
	for(var i = 0; i < 5; i++)
	{
		modeObj.remove(0);
	}
}

changeRegion();
cf.ssid.value = wzdWlanInf[1];
cf.mode.value = wzdWlanInf[6];
cf.ClientId.value = wzdWlanInf[7];

cf.broadcast.checked = true;
changeMode();
cf.channel.value = wzdWlanInf[10];
cf.chanWidth.value = wzdWlanInf[11];	

//caishaoji add on 2008/12/9	
  	var secIndex = wzdWlanInf[14];
  	if(!wzdWlanInf[13])
  	{
  		cf.secType[0].checked  = 1;	
  	}
  	else if (secIndex == 3)
  	{
  	    cf.secType[1].checked = 1;
  	}
  	else
  	{
  	    cf.secType[2].checked = 1;
  	}
    	cf.pskSecret.value = wzdWlanInf[17];
//add end
</script>
