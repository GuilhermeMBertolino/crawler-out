#!/usr/bin/lua

local sys   = require "luci.sys"
local util  = require "luci.util"
local uci   = require "luci.model.uci"

local uci_r   = uci.cursor()
local changed = false

local dbg    = require "luci.tools.debug"

local function get_real_ifname(ifname)
    local tmpnms = {}

    tmpnms = util.split(ifname, " ")
    for _, v in ipairs(tmpnms) do
        index = v:find("%.")
        if index then
            ifname = string.sub(v, 1, index - 1)
        else
            ifname = v
        end
        break
    end

    return ifname
end

local function get_orig_mac(iface)
    local mac = nil

    mac = sys.exec("network_get_firm " .. iface)
    mac = mac:gsub("-", ":")
    return mac
end
 --[[
local function set_orig_mac(iface)
    local ifname = uci_r:get("network", iface, "ifname")
    local mac    = get_orig_mac(iface)
    local tmpnms  = {}
    local index   = nil

    tmpnms = util.split(ifname, " ")
    for _, v in ipairs(tmpnms) do
            sys.fork_call("ifconfig " .. v .. " down ")
            sys.fork_call("ifconfig " .. v .. " hw ether " .. mac)
            sys.fork_call("ifconfig " .. v .. " up ")
    end

    if iface=="lan" then
            ifname = get_real_ifname(ifname)
            sys.fork_call("ifconfig " .. ifname .. " down ")
            sys.fork_call("ifconfig " .. ifname .. " hw ether " .. mac)
            sys.fork_call("ifconfig " .. ifname .. " up ")
    end
end


local function set_iface_mac(iface)
    local mac     = get_orig_mac(iface)
    local secname = nil
    local ifname  = uci_r:get("network", iface, "ifname")
    local devname = nil
    local realif = uci_r:get("network", iface, "ifname")
    local clonetype = uci_r:get("protocol", "wan", "mactype") or "default"
    local sysmode = uci_r:get("sysmode", "sysmode", "mode")

    if iface == "lan" then
        realif = get_real_ifname(ifname)
    end
	
	--for intel 2600
    if iface == "wan" then
        realif = "eth1"
    end
	
    uci_r:foreach("network", "device",
    function(section)
        local name = section["name"]

        if name == realif then
            secname = section[".name"]
            devname = name
        end 
    end)

    if devname == nil then
        secname = uci_r:section("network", "device", nil, {
            name = realif, 
            enabled = '1',
        })
    end
   
    if secname then
        local secmac = uci_r:get("network", secname, "macaddr")
        if secmac == nil then
            uci_r:set("network", secname, "macaddr", mac)
            changed = true
        elseif iface == "lan" then
            if mac:upper() ~= secmac:upper() then
                uci_r:set("network", secname, "macaddr", mac)
                changed = true
            end
        elseif iface == "wan" then
            if sysmode == "ap" then
--under ap mode, just set wan mac the same as lan mac
                local apmac = get_orig_mac("lan")
                uci_r:set("network", secname, "macaddr", apmac)
                changed = true
            else
                local tmpmac = ""
                if (clonetype == "default") and (mac:upper() ~= secmac:upper()) then
                    uci_r:set("network", secname, "macaddr", mac)
                    changed = true
                elseif clonetype == "custom" then
                    tmpmac = uci_r:get("protocol", "wan", "custom_mac")
                    uci_r:set("network", secname, "macaddr", tmpmac)
                    changed = true
                elseif clonetype == "computer" then
                    tmpmac = uci_r:get("protocol", "wan", "computer_mac")
                    uci_r:set("network", secname, "macaddr", tmpmac)
                    changed = true 
                end
            end
        end
    end

    if iface == "wan" then
        if sysmode == "ap" then
--under ap mode, just set wan mac the same as lan mac
            local apmac = get_orig_mac("lan")
            uci_r:set("network", "wan", "macaddr", apmac)
            changed = true
        else
            local tmpmac = ""
            local wanmac = uci_r:get("network", "wan", "macaddr")
            if not wanmac then
                uci_r:set("network", "wan", "macaddr", mac)
                changed = true
            else
                if (clonetype == "default") and (mac:upper() ~= wanmac:upper()) then
                    uci_r:set("network", "wan", "macaddr", mac)
                    changed = true
                elseif clonetype == "custom" then
                    tmpmac = uci_r:get("protocol", "wan", "custom_mac")
                    uci_r:set("network", "wan", "macaddr", tmpmac)
                    changed = true
                elseif clonetype == "computer" then
                    tmpmac = uci_r:get("protocol", "wan", "computer_mac")
                    uci_r:set("network", "wan", "macaddr", tmpmac)
                    changed = true 
                end
            end
        end
    end
	
	-- For Intel 2700
	if iface == "wan" then
		if clonetype == "default" then
			os.execute("switch_cli GSW_PCE_RULE_DELETE nIndex=105 > /dev/null")	
		else
			os.execute("switch_cli dev=1 GSW_PCE_RULE_WRITE pattern.nIndex=105 pattern.bEnable=1 pattern.bPortIdEnable=1 pattern.nPortId=15 action.eVLAN_Action=2 action.nFId=10 > /dev/null")
		end	
	end	

end
]]--

local function set_iface_mac(iface)
    local mac = get_orig_mac(iface)
    local mode = uci_r:get("sysmode", "sysmode", "mode")
	local ifname  = uci_r:get("network", iface, "ifname")
	local wan_ifname = uci_r:get_profile("wan", "wan_ifname")
    local secname = nil
    local devname = nil
	local model = uci_r:get_profile("global", "model") or ""	

    if iface == "lan" then
		local lanIfNames = ""
		
        if mode == "ap" then
            lanIfNames = wan_ifname .. " " .. ifname
        else
            lanIfNames = ifname
        end

        local tmpnms  = {}
        tmpnms = util.split(lanIfNames, " ")
        for _, v in ipairs(tmpnms) do
            sys.fork_call("ifconfig " .. v .. " down ")
            sys.fork_call("ifconfig " .. v .. " hw ether " .. mac)
            sys.fork_call("ifconfig " .. v .. " up ")

            uci_r:foreach("network", "device",
            function(section)
                local name = section["name"]

                if name == v then
                    secname = section[".name"]
                    devname = name
                end 
            end)

            if devname == nil then
                secname = uci_r:section("network", "device", nil, {
                    name = v, 
                    enabled = '1',
                })
            end
           
            if secname then
                local secmac = uci_r:get("network", secname, "macaddr")
                if secmac == nil or mac:upper() ~= secmac:upper() then
                    uci_r:set("network", secname, "macaddr", mac)
                    changed = true
                end
            end
        end
    else -- iface == "lan"
 
		ifname = wan_ifname
        uci_r:foreach("network", "device",
        function(section)
            local name = section["name"]

            if name == ifname then
                secname = section[".name"]
                devname = name
            end 
        end)

        if devname == nil then
            secname = uci_r:section("network", "device", nil, {
                name = ifname, 
                enabled = '1',
            })
        end
       
        local clonetype = uci_r:get("protocol", "wan", "mactype") or "default"
        if secname then
            local secmac = uci_r:get("network", secname, "macaddr")
            if secmac == nil or (clonetype == "default" and secmac ~= mac) then
                uci_r:set("network", secname, "macaddr", mac)
                changed = true
            end
        end

        local wanmac = uci_r:get("network", "wan", "macaddr")
        if not wanmac or (clonetype == "default" and wanmac ~= mac) then
            uci_r:set("network", "wan", "macaddr", mac)
            changed = true
        end
		
        if model == "INTEL_GRX350" then
            if clonetype == "default" then
                os.execute("switch_cli GSW_PCE_RULE_DELETE nIndex=105 > /dev/null")	
            else
                os.execute("switch_cli dev=1 GSW_PCE_RULE_WRITE pattern.nIndex=105 pattern.bEnable=1 pattern.bPortIdEnable=1 pattern.nPortId=15 action.eVLAN_Action=2 action.nFId=10 > /dev/null")
            end	
        end
    end -- iface == "wan"

end

function main()
	local mode = uci_r:get("sysmode", "sysmode", "mode")

	set_iface_mac("lan")
	if mode == "router" then
		set_iface_mac("wan")
	end 

    if changed == true then
        uci_r:commit_without_write_flash("network")
    end
end

main()
