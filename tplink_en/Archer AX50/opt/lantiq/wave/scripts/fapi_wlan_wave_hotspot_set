#!/bin/sh
# Configure AccessPoint.X_LANTIQ_COM_Vendor.HS20 parameters
# Needed object: AccessPoint.X_LANTIQ_COM_Vendor.HS20

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

debug_level=DEBUG
#debug_level=HS20

interface_name=$1
pid=$$

radio_name=${interface_name%%.*}
if [ -e "$INIT_FLAG" ] && ([ -e ${USE_CURRENT_CONF}_${radio_name} ] || [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ])
then
	if [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ]; then
		echo "####### $script_name: init flow DUT MODE" > $TRACE_OUT
	else
		echo "####### $script_name: init flow with conf from previous setting - FAST BOOT" > $TRACE_OUT
	fi
	# Create the output configuration file
	cat /dev/null > ${OUT_CONF}
	
	# Configuration is completed successfully
	update_conf_out "wlan_configuration_status" "success"
	exit 0
fi

ubus_call=${CONF_DIR}/ubus_call.sh
hs20_conf_old_not_exist=0


# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_index=`find_index_from_interface_name $radio_name`


number_hs20_config=`ls ${CONF_DIR} | grep ${ALUMNUS_HS20_CONFIG_FILE}_${radio_name} -c`
#echo "$script_name: number_hs20_config=$number_hs20_config" > $TRACE_OUT
if [ "$number_hs20_config" != "0" ]
then
	#remove previous left over (fail in up script)
	rm -f ${CONF_DIR}/${ALUMNUS_HS20_CONFIG_FILE}_${radio_name}*
fi


print2log $radio_index $debug_level "$script_name $*"
timestamp $radio_index  "$script_name:begin"

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: interface_index=$interface_index, radio_index=$radio_index"

factory_done=0
# Same for later use
if [ ! -e ${HS20_CONF} ]
then
	# No HS20_CONF file: after factory - out
	factory_done=1
fi

# mv temporary conf files.
# Save last configuration before update with new one.
# Use to compare, detect changes.
#cp ${HS20_CONF}  ${CONF_DIR}/_fapi_wlan_wave_hs20_conf
#rm ${CONF_DIR}/fapi_wlan_wave_hs20_*
#mv ${CONF_DIR}/_fapi_wlan_wave_hs20_conf ${HS20_CONF}
hs_conf_files=`ls ${CONF_DIR}/fapi_wlan_wave_hs20_* 2>/dev/null`
for file in $hs_conf_files
do
	orig_file=$file
	#cp $orig_file ${file}_old
	#lock_and_copy_conf_file $orig_file $file $orig_file
	lock_and_copy_conf_file $orig_file $file ${file}_old
done

# For VAPS: after reboot "OLD" file exist (radio), therefore reset hs20_conf_old_not_exist if VAP is not in hs config file
vap_first_config=""
[ -e ${HS20_CONF} ] && vap_first_config=`cat $HS20_CONF | grep Enable_${interface_index}`
if [ -n "$vap_first_config" ]
then
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: set vap_first_config_done"
	vap_first_config_done=1
else
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: reset vap_first_config_done"
	vap_first_config_done=0
fi


# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/hotspot_set_in_conf


# HS20_COMMANDS_SAVE file should be per radio.
# Add/Del from it should be per interface.
# Should not delete L2F configuration as it is added only if change found.
#[ -e ${HS20_COMMANDS_SAVE}_$radio_name ] && cp ${HS20_COMMANDS_SAVE}_$radio_name ${HS20_COMMANDS_SAVE}_${radio_name}_old
#[ -e ${HS20_COMMANDS_SAVE}_$radio_name ] && rm ${HS20_COMMANDS_SAVE}_$radio_name

[ -e ${HS20_COMMANDS_SAVE}_$radio_name ] && sed -i '/'${interface_name}'$/d' ${HS20_COMMANDS_SAVE}_$radio_name
[ -e ${HS20_COMMANDS_SAVE}_$radio_name ] && sed -i '/'${interface_name}' /d' ${HS20_COMMANDS_SAVE}_$radio_name
add_replace_command()
{
	command=$*
	# TODO: smart add to file...
	num_occurences=`cat ${HS20_COMMANDS_SAVE}_$radio_name | grep "$command" -c`
	print2log $radio_index $debug_level "add_replace_command: num_occurences=$num_occurences"
	if [ "$num_occurences" = "0" ]
	then
		print2log $radio_index $debug_level "add_replace_command: add $command"
		echo $command >> ${HS20_COMMANDS_SAVE}_$radio_name
	else
		print2log $radio_index $debug_level "add_replace_command: skip write, command exist ($command)"
	fi
}

add_replace_1_time_command()
{
	command=$*
	# TODO: smart add to file...
	print2log $radio_index $debug_level "add_replace_1_time_command: add $command"
	echo $command >> ${HS20_COMMANDS_SAVE_1_TIME}_$radio_name

}

#echo "fapi_wlan_wave_hotspot_set: dump IN_CONF:" > $TRACE_OUT
#cat ${IN_CONF} > $TRACE_OUT

###########################################################
# Map the objects indexes to the received objects in the in.conf file
# RoamingConsortium - 2 exists
# ConnectionCapability and L2Firewall - may be missing
#
# IN_CONF: From tests we have on Init:
# Object_0=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20
# Object_1=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OperatorFriendlyName
# Object_2=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.VenueName
# Object_3=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.RoamingConsortium
# Object_4=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.RoamingConsortium
# Object_5=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.NAIrealm
# Object_6=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OSUicons
# Object_7=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OSUproviders

###########################################################
# Save the input configuration parameters to a local DB used by Wave FAPI
# Note - the conf file is not used to detect change, on every HS2.0 change, the complete object pass by upper layer
# For sub-objects, the sub-instance files are created, each per sub-object and are overwrite on every change (also between interfaces)
# hs20_index: is the index of the object in IN_CONF.

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Save the input configuration parameters to a local DB"

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: call map_param_index for $ACCESSPOINT_HS20_VENDOR_OBJECT"
hs20_index=`map_param_index Object $ACCESSPOINT_HS20_VENDOR_OBJECT`
print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_index=$hs20_index"

updateHessid=0

# Main object:
[ -n "$hs20_index" ] && save_db_params hotspot_set $interface_name $hs20_index $interface_index

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Source HS20 DBs"

# Source DBs
ap_conf_exist=`local_db_exist ACCESSPOINT`
if [ "$ap_conf_exist" = "1" ]
then
	local_db_source ACCESSPOINT
fi
local_db_source HS20


######################################################
# HS2.0 script is always called on Init and Add VAP.
# If no HS20_CONF file: after factory - out
# If Init and HS2.0/OSEN=false - out
# If Init=false and HS2.0/OSEN=false and no HS20_CONF_OTHERS- out
# else - serve HS2.0
######################################################
hs20_enable=`db2fapi_convert boolean Enable $interface_index`
osen_enable=`db2fapi_convert boolean OSENEnabled $interface_index`
hs20_mode=$HS20_MODE_DISABLED

out=false
if [ ! -e ${HS20_CONF} ]
then
	# No HS20_CONF file: after factory - out
	out=true
elif [ -e "$INIT_FLAG" ]
then
	if [ "$hs20_enable" = "0" ] && [ "$osen_enable" = "0" ]
	then
		# Init and HS2.0/OSEN=false - out
		out=true
		rm -rf ${HS20_COMMANDS_SAVE_1_TIME}_$radio_name
	fi
else
	if [ "$hs20_enable" = "0" ] && [ "$osen_enable" = "0" ]
	then
		rm -rf ${HS20_COMMANDS_SAVE_1_TIME}_$radio_name
		if [ ! -e ${HS20_CONF_ROAM}* ]
		then
			# Init=false and HS2.0/OSEN=false and no HS20_CONF_OTHERS- out
			out=true
		fi
	fi
fi

if [ "$out" = "true" ]
then
	# Clean old files
	ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_ | grep _old > /tmp/del_list
	while read line
	do
		rm ${CONF_DIR}/$line
	done < /tmp/del_list
	rm /tmp/del_list
	update_conf_out "wlan_configuration_status" "success"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: return"
	return
fi


# For notifications:
. /etc/ugw_notify_defs.sh

comment="___Hotspot_parameters___###"

#####################################################################
# Sub objects:
# Create conf files for HS2.0 sub-objects only if instance exist
# End of process:
# fapi_wlan_wave_hs20_conf # <- this created above
# fapi_wlan_wave_hs20_nairealm_conf_0
# fapi_wlan_wave_hs20_opfriend_name_conf_0
# ...etc.

OpFriendNameNumOfEntries=`db2fapi_convert regular OperatorFriendlyNameNumberOfEntries $interface_index`
[ -n "$OpFriendNameNumOfEntries" ] && create_sub_instance_in_files $interface_name $OpFriendNameNumOfEntries OperatorFriendlyName hotspot_set_opfriend_name
VenueNameNumOfEntries=`db2fapi_convert regular VenueNameNumberOfEntries $interface_index`
[ -n "$VenueNameNumOfEntries" ] && create_sub_instance_in_files $interface_name $VenueNameNumOfEntries VenueName hotspot_set_venue_name
ConnectCapabNumOfEntries=`db2fapi_convert regular ConnectionCapabilityNumberOfEntries $interface_index`
[ -n "$ConnectCapabNumOfEntries" ] && create_sub_instance_in_files $interface_name $ConnectCapabNumOfEntries ConnectionCapability hotspot_set_connect_capab
RoamingNumOfEntries=`db2fapi_convert regular RoamingConsortiumNumberOfEntries $interface_index`
[ -n "$RoamingNumOfEntries" ] && create_sub_instance_in_files $interface_name $RoamingNumOfEntries RoamingConsortium hotspot_set_roam
NAIrealmNumOfEntries=`db2fapi_convert regular NAIrealmNumberOfEntries $interface_index`
[ -n "$NAIrealmNumOfEntries" ] && create_sub_instance_in_files $interface_name $NAIrealmNumOfEntries NAIrealm hotspot_set_nairealm
OSUiconsNumOfEntries=`db2fapi_convert regular OSUiconsNumberOfEntries $interface_index`
[ -n "$OSUiconsNumOfEntries" ] && create_sub_instance_in_files $interface_name $OSUiconsNumOfEntries OSUicons hotspot_osu_icons
OSUprovidNumOfEntries=`db2fapi_convert regular OSUprovidersNumberOfEntries $interface_index`
[ -n "$OSUprovidNumOfEntries" ] && create_sub_instance_in_files $interface_name $OSUprovidNumOfEntries OSUproviders hotspot_osu_provide
L2FirewallNumOfEntries=`db2fapi_convert regular L2FirewallNumberOfEntries $interface_index`
[ -n "$L2FirewallNumOfEntries" ] && create_sub_instance_in_files $interface_name $L2FirewallNumOfEntries L2Firewall hotspot_l2ffw
######################################################################


# Define list of AccessPoint Vendor HS20 parameters
hostapd_params="hs20
disable_dgaf
anqp_domain_id
hs20_operating_class
osu_ssid
gas_comeback_delay
access_network_type
internet
venue_group
venue_type
hessid
network_auth_type
ipaddr_type_availability
domain_name
anqp_3gpp_cell_net
hs20_wan_metrics
hs20_oper_friendly_name
venue_name
hs20_conn_capab
roaming_consortium
nai_realm
hs20_icon
osu_server_uri
osu_friendly_name
osu_nai
osu_method_list
osu_icon
osu_service_desc
ap_isolate"

hostapd_hardcoded_params="hs20_deauth_req_timeout
manage_p2p
allow_cross_connection
tdls_prohibit
interworking"

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Create the output configuration file"
# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Prepare the temporary configuration files to use
prepare_confs $interface_name $radio_name $pid $VAP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${radio_name}


print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Read current values and initiate new values file"
# Read current values and initiate new values file.
hostapd_vap_current_values=${CONF_DIR}/hostapd_vap_current_values_${interface_name}_${pid}

print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hostapd_vap_current_values=$hostapd_vap_current_values"

read_current_values $HOSTAPD_VAP_CONF_PREFIX $interface_name $hostapd_vap_current_values


print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Check if hotspot is enabled and update the conf file with value"
################################################################
# Check if hotspot is enabled and update the conf file with value
#
hs20_enable=`db2fapi_convert boolean Enable $interface_index`
osen_enable=`db2fapi_convert boolean OSENEnabled $interface_index`
hs20_mode=$HS20_MODE_DISABLED
print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_enable=$hs20_enable"
print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: osen_enable=$osen_enable"

ap_isolate=`db2fapi_convert boolean IsolationEnable $interface_index`
sAPforwarding=$((ap_isolate^1))
notify_ap_iso=0
if [ ! -e ${HS20_CONF}_old ]
then
	hs20_conf_old_not_exist=1
fi
print2log $radio_index $debug_level "get_hs20_status_change: hs20_conf_old_not_exist=$hs20_conf_old_not_exist"

get_hs20_status_change()
{
	index=$1
	param=$2
	change=0
	flag=0
	
	print2log $radio_index $debug_level "get_hs20_status_change: $*"
	print2log $radio_index $debug_level "get_hs20_status_change: Test for change in hs20 status"
	# Test for change in hs20 status:
	while read line
	do
		line_tmp=`echo $line | grep -vE '^(\s*$|#)'`
		if [ -z "$line_tmp" ]
		then
			# Empty line, continue
			continue
		fi
		#print2log $radio_index $debug_level "get_hs20_status_change: line=$line"
		is_exist=`echo $line | grep ^$param -c`
		if [ "$is_exist" = "0" ]
		then
			# param!=$param, continue
			continue
		fi
		print2log $radio_index $debug_level "get_hs20_status_change: is_exist=$is_exist"
		# if after factory/reboot, ${HS20_CONF}_old not exist.
		# Need to make sure hs20=1 but osen=0.
		if [ ! -e ${HS20_CONF}_old ]
		then
			print2log $radio_index $debug_level "get_hs20_status_change:${HS20_CONF}_old not exist"
			# Always return change if HS2.0 is enabled or in OSEN:
			#if [ "$hs20_enable" = "1" ] && [ "$osen_enable" = "0" ]
			if [ "$hs20_enable" != "0" ]
			then
				change=1
				#hs20_conf_old_not_exist=1
				print2log $radio_index $debug_level "get_hs20_status_change: hs20_conf_old_not_exist=$hs20_conf_old_not_exist"
				echo $change
				return
			fi
		fi

		while read line2
		do
			line_tmp=`echo $line2 | grep -vE '^(\s*$|#)'`
			if [ -z "$line_tmp" ]
			then
				print2log $radio_index $debug_level "get_hs20_status_change: Empty, break"
				break
			fi
			# Set flag, clear if line found
			flag=1			
			#print2log $radio_index $debug_level "get_hs20_status_change: line2=$line2"
			if [ ! -z "$line" ] && [ ! -z "$line" ] && [ "$line" = "$line2" ]
			then
				print2log $radio_index $debug_level "get_hs20_status_change: same line, clear flag, break"
				flag=0
				break
			fi
		done < ${HS20_CONF}_old
		#done < ${HS20_CONF}_${index}_old
		if [ $flag -eq 1 ]
		then
			change=1
			print2log $radio_index $debug_level "get_hs20_status_change: flag -eq 1: set change"
			break
		fi
	done < ${HS20_CONF}
	#done < ${HS20_CONF}_${index}
	
	print2log $radio_index $debug_level "get_hs20_status_change: change=$change"
	echo $change
}

# Detect change in HS2.0 Enable/Disable
if [ -e ${HS20_CONF}_old ]
then
	hs20_change=`get_hs20_status_change $interface_index Enable_`
else
	hs20_change=0
	if [ "$hs20_enable" != "0" ]
	then
		hs20_change=1
	fi
fi

# Set HS2.0 mode (hs20/osen)
if [ "$hs20_enable" = "1" ]
then
	hs20_mode=$HS20_MODE_ENABLED
	if [ "$sAPforwarding" = "1" ]
	then
		notify_ap_iso=1
		sAPforwarding=0
		ap_isolate=$((sAPforwarding^1))
	fi
elif [ "$osen_enable" != "0" ]
then
	hs20_mode=$HS20_MODE_OSEN
	# TODO: other configurations ...?
else
	hs20_mode=$HS20_MODE_DISABLED
fi



print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Calculate new values only if hotspot is enabled"
####################################################################################
# Calculate new values only if hotspot is enabled.
# Try to read the values of all the parameters from the fapi_wlan_wave_in.conf file.
# Parameters that are not in the fapi_wlan_wave_in.conf file will be empty and won't be set.
#
osen=""
disable_dgaf=""
anqp_domain_id=""
hs20_operating_class=""
osu_ssid=""
gas_comeback_delay=""
access_network_type=""
internet=""
venue_group=""
venue_type=""
hessid=""
network_auth_type=""
ipaddr_type_availability=""
domain_name=""
anqp_3gpp_cell_net=""
hs20_wan_metrics=""

db2fapi_convert_conn_capab()
{
	interface_index=$1
	Protocol=`db2fapi_convert regular Protocol $interface_index`
	Port=`db2fapi_convert regular Port $interface_index`
	Status=`db2fapi_convert regular Status $interface_index`
	if [ -n "$Protocol" ] && [ -n "$Port" ] && [ -n "$Status" ]
	then
		print2log $radio_index $debug_level "$Protocol:$Port:$Status"
		echo "$Protocol:$Port:$Status"
	fi
	
}

db2fapi_convert_osu_icons()
{
	# <Icon Width>:<Icon Height>:<Language code>:<Icon Type>:<Name>:<file path>
	interface_index=$1
	
	Width=`db2fapi_convert regular Width $interface_index`
	Height=`db2fapi_convert regular Height $interface_index`
	LanguageCode=`db2fapi_convert regular LanguageCode $interface_index`
	Type=`db2fapi_convert regular Type $interface_index`
	Name=`db2fapi_convert regular Name $interface_index`
	FilePath=`db2fapi_convert regular FilePath $interface_index`
	
	print2log $radio_index $debug_level "$Width:$Height:$LanguageCode:$Type:$Name:$FilePath"
	echo "$Width:$Height:$LanguageCode:$Type:$Name:$FilePath"
}


# If hotspot is enabled, set all hardcoded parameters and parameters from in conf file
if [ $hs20_mode -eq $HS20_MODE_ENABLED ]
then
	##################################################################
	# Config Hotspot
	##################################################################
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Get all values:"
	# Get all values:
	#osen=`db2fapi_convert type DbParam $interface_index` # In security set script...
	disable_dgaf=`db2fapi_convert boolean DgafDisabled $interface_index`
	anqp_domain_id=`db2fapi_convert regular AnqpDomainId $interface_index`
	hs20_operating_class=`db2fapi_convert regular OperatingClass $interface_index`
	#osu_ssid=`db2fapi_convert regular OsuSsid $interface_index`
	osu_ssid=`db2fapi_convert_osu_ssid $interface_index`
	gas_comeback_delay=`db2fapi_convert regular GasComebackDelay $interface_index`
	if [ -z "$gas_comeback_delay" ] || [ "$gas_comeback_delay" = "0" ]
	then
		gas_comeback_delay=""
	fi
	access_network_type=`db2fapi_convert regular AccessNetworkType $interface_index`
	internet=`db2fapi_convert boolean InternetConnectivityEnabled $interface_index`
	venue_group=`db2fapi_convert regular VenueGroup $interface_index`
	venue_type=`db2fapi_convert regular VenueType $interface_index`
	hessid=`db2fapi_convert regular HESSID $interface_index`
	if [ -z "$hessid" ];then
		# if empty set with bssid, update dB
		updateHessid=1
		vap_mac=`ifconfig ${interface_name}`
		vap_mac=${vap_mac##*HWaddr }
		hessid=${vap_mac%% *}		
	fi
	network_auth_hex=`db2fapi_convert regular NetworkAuthenticationType $interface_index`
	network_auth_url=`db2fapi_convert regular NetworkAuthenticationURL $interface_index`
	network_auth_type=$network_auth_hex${network_auth_url}
	
	ipaddr_type_availability=`db2fapi_convert_ipaddr`
	
	domain_name=`db2fapi_convert regular DomainName $interface_index`
	anqp_3gpp_cell_net=`db2fapi_convert regular ThreeGpp $interface_index`
	# WMD:
	hs20_wan_metrics_static=`db2fapi_convert boolean WanMetricsStatic $interface_index`
	hs20_wan_metrics_duration=`db2fapi_convert regular WanMetricsDuration $interface_index`
	hs20_wan_metrics_port=`db2fapi_convert regular WanPort $interface_index` # parameter=connname in notifications
	# TODO: interface_name -> parameter=ref_name in notifications
	hs20_wan_metrics_linkstatus=`db2fapi_convert regular WanMetricsLinkStatus $interface_index`
	hs20_wan_metrics_symmetriclink=`db2fapi_convert boolean WanMetricsSymmetricLink $interface_index`
	hs20_wan_metrics_atcapacity=`db2fapi_convert boolean WanMetricsAtCapacity $interface_index`
	hs20_wan_metrics_dlspeed=`db2fapi_convert regular WanMetricsDlSpeed $interface_index`
	hs20_wan_metrics_ulspeed=`db2fapi_convert regular WanMetricsUlSpeed $interface_index`
	hs20_wan_metrics_dlload=`db2fapi_convert regular WanMetricsDlLoad $interface_index`
	hs20_wan_metrics_ulload=`db2fapi_convert regular WanMetricsUlLoad $interface_index`
	hs20_wan_metrics_loadmeasurementduration=`db2fapi_convert regular WanMetricsLoadMeasurementDuration $interface_index`  # parameter=duration in notifications
	####################################################################################
	# WMD:
	# Stage-1: We will use hard coded params for
	# 	format: <WAN Info>:<DL Speed>:<UL Speed>:<DL Load>:<UL Load>:<LMD>
	# 	hs20_wan_metrics=01:8000:1000:80:240:3000
	# Stage-2: Implement the notifications and use real data.

	# WAN Info: B0-b1: hs20_wan_metrics_linkstatus, B2: hs20_wan_metrics_symmetriclink, B3: hs20_wan_metrics_atcapacity
	# 	hs20_wan_metrics_linkstatus: Link up -> 1, Link Down -> 2, Link in Test -> 3
	case "$hs20_wan_metrics_linkstatus" in
		"1")
		if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="01"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="0D"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="09"
		else
			value="05"
		fi
		;;
		"2")
		if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="02"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="0E"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="0A"
		else
			value="06"
		fi
		;;
		"3")
		if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="03"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="0F"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="0B"
		else
			value="07"
		fi
		;;
	esac
	print2log $radio_index $debug_level "hs20_wan_metrics_static=$hs20_wan_metrics_static"
	hs20_wan_metrics="${value}:$hs20_wan_metrics_dlspeed:$hs20_wan_metrics_ulspeed:$hs20_wan_metrics_dlload:$hs20_wan_metrics_ulload:$hs20_wan_metrics_loadmeasurementduration"
	print2log $radio_index $debug_level "hs20_wan_metrics=$hs20_wan_metrics"
	

	# Hard coded params:
	hs20_deauth_req_timeout=60
	manage_p2p=1
	allow_cross_connection=0
	tdls_prohibit=1
	interworking=1

	#########################################################################
	# DEBUG:
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: disable_dgaf=$disable_dgaf"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: anqp_domain_id=$anqp_domain_id"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_operating_class=$hs20_operating_class"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: osu_ssid=$osu_ssid"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: gas_comeback_delay=$gas_comeback_delay"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: access_network_type=$access_network_type"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: internet=$internet"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: venue_group=$venue_group"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: venue_type=$venue_type"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hessid=$hessid"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: network_auth_type=$network_auth_type"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: ipaddr_type_availability=$ipaddr_type_availability"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: domain_name=$domain_name"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: anqp_3gpp_cell_net=$anqp_3gpp_cell_net"
	##########################################################################

	# should be =0 ?
	static_change=""
	if [ -e ${HS20_CONF}_old ]
	then
		static_change=`get_hs20_status_change $interface_index WanMetricsStatic_`
	else
		static_change=1
	fi
	
	################################################
	# WMS:
	# If static WMS change to "1", no need to update hotspot parameters.
	# After reboot, if HS2.0 is not disabled need to config.
	# TBD- this solution is not full, because when WMS parameter will be change (when in statis mode) complete HS2.0 configuration occure

	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: static_change=$static_change, hs20_conf_old_not_exist=$hs20_conf_old_not_exist, vap_first_config_done=$vap_first_config_done"
	
	if [ "$static_change" = "0" ] || [ "$hs20_conf_old_not_exist" = "1" ]  || [ "$vap_first_config_done" = "0" ]
	then
	##########################################################################
	# hostapd config:
	##########################################################################
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed"
	# Check if a hostapd parameter was changed.
	hostapd_changed=`check_param_changed "$hostapd_params"`
	print2log $radio_index $debug_level "hostapd_changed=$hostapd_changed"

	# IN HOTSPOT SOME PARAMETERS ARE NOT HOSTAPD RELATED ! ALSO THERE ARE hostapd_hardcoded_params PARAMS !
	# # If a hostapd vap parameter was changed, remove parameters from hostapd_vap temp conf file and write all of them with updated values.
	#if [ "$hostapd_changed" ] # if test for hostapd_changed: move sAPforwarding to other location
	#then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: config hostapd parameters"
		hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
		remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
		remove_params_from_conf "$hostapd_hardcoded_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
		drv_config_post_up_conf_name=${CONF_DIR}/drv_config_post_up_${interface_name}_${pid}.conf
if [ "$notify_ap_iso" != "1" ]
then
		remove_params_from_conf "sAPforwarding AP_ISO" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX
else
		remove_params_from_conf "sAPforwarding" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX
fi	
		# Write the hostapd vap parameters.
		set_conf_param hostapd_vap comment otf $pid $interface_name comment "$comment"
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: set_conf_param hostapd_vap with hs20=$hs20_mode (hs20_mode=$hs20_mode) for interface_name=$interface_name"
		[ -n "$hs20_mode" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20" "$hs20_mode"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "disable_dgaf" "$disable_dgaf"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_domain_id" "$anqp_domain_id"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_operating_class" "$hs20_operating_class"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_ssid" "$osu_ssid"
		[ "$gas_comeback_delay" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "gas_comeback_delay" "$gas_comeback_delay"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "internet" "$internet"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_group" "$venue_group"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_type" "$venue_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hessid" "$hessid"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "network_auth_type" "$network_auth_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "ipaddr_type_availability" "$ipaddr_type_availability"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "domain_name" "$domain_name"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_3gpp_cell_net" "$anqp_3gpp_cell_net"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_deauth_req_timeout" "$hs20_deauth_req_timeout"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "manage_p2p" "$manage_p2p"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "allow_cross_connection" "$allow_cross_connection"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "tdls_prohibit" "$tdls_prohibit"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "interworking" "$interworking"
		# In static mode configuration pass through hostapd cli, should not overwrite
		#if [ "$hs20_wan_metrics_static" = "0" ]
		#then
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_wan_metrics" "$hs20_wan_metrics"
		#fi
		ap_isolate_str=ENABLE
		if [ "$ap_isolate" = "0" ]
		then
			ap_isolate_str=DISABLE
		fi
		set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_isolate "$ap_isolate"
if [ "$notify_ap_iso" != "1" ]
then
		set_conf_param drv_config_post_up hs_cli otf $pid $interface_name AP_ISO "$ap_isolate_str"
fi
		set_conf_param drv_config_post_up iw otf $pid $interface_name sAPforwarding "$sAPforwarding"

		################################################################
		# Sub-instances hostapd config:
		#
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle hs20_oper_friendly_name, OpFriendNameNumOfEntries=$OpFriendNameNumOfEntries"
		i=0
		while [ $i -lt $OpFriendNameNumOfEntries ]; do
			eval file_name=${HS20_CONF_OP_FRIEND_NAME}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, get OperatorFriendlyName"
			hs20_oper_friendly_name=`db2fapi_convert regular OperatorFriendlyName $interface_index`
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, set_conf_param with $hs20_oper_friendly_name"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_oper_friendly_name" "$hs20_oper_friendly_name"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_oper_friendly_name=$hs20_oper_friendly_name"
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle venue_name, VenueNameNumOfEntries=$VenueNameNumOfEntries"
		i=0
		while [ $i -lt $VenueNameNumOfEntries ]; do
			eval file_name=${HS20_CONF_VENUE_NAME}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle venue_name, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle venue_name, get VenueName"
			venue_name=`db2fapi_convert regular VenueName $interface_index`
			# Fix parameter, required for clish
			P_exist=`echo $venue_name | grep "P\"" -c`
			if [ -n "$venue_name" ] && [ "$P_exist" = "0" ]
			then
				venue_name=P\"${venue_name}\"
			fi
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle venue_name, set_conf_param with $venue_name"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_name" "$venue_name"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: venue_name=$venue_name"
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle hs20_conn_capab, ConnectCapabNumOfEntries=$ConnectCapabNumOfEntries"
		i=0
		while [ $i -lt $ConnectCapabNumOfEntries ]; do
			eval file_name=${HS20_CONF_CAPAB_NAME}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle hs20_conn_capab, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			hs20_conn_capab=`db2fapi_convert_conn_capab $interface_index`
			if [ -n "$hs20_conn_capab" ]
			then
				set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_conn_capab" "$hs20_conn_capab"
				print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_conn_capab=$hs20_conn_capab"
			else
				print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_conn_capab=$hs20_conn_capab, no need to update"
			fi
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle file_name, RoamingNumOfEntries=$RoamingNumOfEntries"
		i=0
		while [ $i -lt $RoamingNumOfEntries ]; do
			eval file_name=${HS20_CONF_ROAM}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle file_name, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			roaming_consortium=`db2fapi_convert regular RoamingConsortium $interface_index`
			roaming_consortium=`echo $roaming_consortium | sed 's/-//g'`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "roaming_consortium" "$roaming_consortium"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: roaming_consortium=$roaming_consortium"
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle nai_realm, NAIrealmNumOfEntries=$NAIrealmNumOfEntries"
		i=0
		while [ $i -lt $NAIrealmNumOfEntries ]; do
			eval file_name=${HS20_CONF_NAIREALM}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle nai_realm, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			# format: <encoding>,<NAI Realm(s)>[,<EAP Method 1>][,<EAP Method 2>][,...]
			# Currently support only 2 EAP Methods
			Eap1=`db2fapi_convert regular EAPmethod1 $interface_index`
			if [ "$Eap1" = "0" ]; then
				Eap1Full=,13[5:6]
			elif [ "$Eap1" = "1" ]; then
				Eap1Full=,21[2:4][5:7]
			else
				Eap1Full=
			fi
			#
			Eap2=`db2fapi_convert regular EAPmethod2 $interface_index`
			if [ "$Eap2" = "0" ]; then
				Eap2Full=,13[5:6]
			elif [ "$Eap2" = "1" ]; then
				Eap2Full=,21[2:4][5:7]
			else
				Eap2Full=
			fi
			realm_name=`db2fapi_convert regular NAIrealmName $interface_index`
			nai_realm="0,$realm_name$Eap1Full$Eap2Full"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "nai_realm" "$nai_realm"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: nai_realm=$nai_realm"
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle hs20_icon, OSUiconsNumOfEntries=$OSUiconsNumOfEntries"
		i=0
		while [ $i -lt $OSUiconsNumOfEntries ]; do
			eval file_name=${HS20_CONF_OSU_ICONS}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle hs20_icon, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			hs20_icon=`db2fapi_convert_osu_icons $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_icon" "$hs20_icon"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_icon=$hs20_icon"
			fi
			i=$((i+1))
		done
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle OSUproviders, OSUprovidNumOfEntries=$OSUprovidNumOfEntries"
		i=0
		while [ $i -lt $OSUprovidNumOfEntries ]; do
			eval file_name=${HS20_CONF_OSU_PROVIDE}_${i}
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: handle OSUproviders, file_name=$file_name"
			if [ -e $file_name ]; then
			. $file_name
			osu_server_uri=`db2fapi_convert regular OSUProviderServerURI $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_server_uri" "$osu_server_uri"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_server_uri=$osu_server_uri"
			osu_friendly_name=`db2fapi_convert regular OSUProviderFriendlyName $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_friendly_name" "$osu_friendly_name"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_friendly_name=$osu_friendly_name"
			osu_friendly_name=`db2fapi_convert regular OSUProviderFriendlyName2 $interface_index`
			[ -n "$osu_friendly_name" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_friendly_name" "$osu_friendly_name"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_friendly_name2=$osu_friendly_name"
			osu_nai=`db2fapi_convert regular OSUProviderNAI $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_nai" "$osu_nai"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_nai=$osu_nai"
			osu_method_list=`db2fapi_convert regular OSUProviderMethodList $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_method_list" "$osu_method_list"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_method_list=$osu_method_list"
			osu_icon=`db2fapi_convert regular OSUProviderIcon $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_icon" "$osu_icon"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_icon=$osu_icon"
			osu_icon=`db2fapi_convert regular OSUProviderIcon2 $interface_index`
			[ -n "$osu_icon" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_icon" "$osu_icon"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_icon2=$osu_icon"
			osu_service_desc=`db2fapi_convert regular OSUProviderServiceDescription $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_service_desc" "$osu_service_desc"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_service_desc=$osu_service_desc"
			osu_service_desc=`db2fapi_convert regular OSUProviderServiceDescription2 $interface_index`
			[ -n "$osu_service_desc" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_service_desc" "$osu_service_desc"
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_service_desc2=$osu_service_desc"
			fi
			i=$((i+1))
		done
		# L2F - not hostapd param
	#fi
	fi
	
else
	##################################################################
	# Hotspot is disabled (OSEN ?)
	##################################################################
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed (or osen mode)"
	# Check if a hostapd parameter was changed.

	if [ $hs20_mode -eq $HS20_MODE_OSEN ]
	then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: OSEN: reset interworking"
		disable_dgaf=1
		interworking=0
	fi

	hostapd_changed=`check_param_changed "$hostapd_params"`
	
	# If a hostapd vap parameter was changed, remove parameters from hostapd_vap temp conf file and write all of them with updated values.
	#if [ "$hostapd_changed" ]
	#then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed"
		hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
		remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
		remove_params_from_conf "$hostapd_hardcoded_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
	
		# Write the hostapd vap parameters.
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "disable_dgaf" "$disable_dgaf"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_domain_id" "$anqp_domain_id"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_operating_class" "$hs20_operating_class"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_ssid" "$osu_ssid"
		[ "$gas_comeback_delay" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "gas_comeback_delay" "$gas_comeback_delay"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "internet" "$internet"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_group" "$venue_group"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_type" "$venue_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hessid" "$hessid"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "network_auth_type" "$network_auth_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "ipaddr_type_availability" "$ipaddr_type_availability"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "domain_name" "$domain_name"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_3gpp_cell_net" "$anqp_3gpp_cell_net"
	#fi

	if [ $hs20_mode -ne $HS20_MODE_OSEN ]
	then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_mode != OSEN"
		# interworking and access_network_type are also set in ap set script.
		mbo=`db2fapi_convert boolean WaveMBOEnabled $interface_index`
		if [ "$mbo" = "1" ]
		then
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: mbo=1, set interworking"
			interworking=1
			access_network_type=0
		fi
	fi
	set_conf_param hostapd_vap regular no_otf $pid $interface_name "interworking" "$interworking"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
fi


print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Read needed parameters for other hotsopt components...etc."
## Read needed parameters for other hotsopt components
proxy_arp=`db2fapi_convert boolean ProxyArp $interface_index`
disable_dgaf=`db2fapi_convert boolean DgafDisabled $interface_index`
# WMS SL expect to get valuse in seconds (hostapd in 1oth of sec)
wan_metrics_duration=$((hs20_wan_metrics_loadmeasurementduration / 10))
wan_port=`db2fapi_convert regular WanPort $interface_index`

print2log $radio_index $debug_level "proxy_arp=$proxy_arp, disable_dgaf=$disable_dgaf, wan_metrics_duration=$wan_metrics_duration, wan_port=$wan_port"

# TODO- No change on L2FwEnabled when add L2F rule !!! Whow should set this???


#######################################################################
# HS (hairpin) should be set before L2F
#######################################################################
if [ $hs20_mode -eq $HS20_MODE_ENABLED ]
then
	hairpin_mode=`cat /sys/class/net/br-lan/brif/$interface_name/hairpin_mode`
	#if [ "$hairpin_mode" = "0" ]
	#then
		print2log $radio_index $debug_level "hs_cli HS -O ENABLE"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli HS -O ENABLE" "-I $interface_name"
		add_replace_command hs_cli HS -O ENABLE -I $interface_name
	#fi
	if [ ! -e /proc/net/wave_wifi_parp/parp_stats ]
	then
		print2log $radio_index $debug_level "hs_cli PARP -O START"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli PARP -O" "START"
		add_replace_1_time_command hs_cli PARP -O START
	fi
elif [ $hs20_mode -eq $HS20_MODE_OSEN ]
then
	if [ ! -e /proc/net/wave_wifi_parp/parp_stats ]
	then
		print2log $radio_index $debug_level "hs_cli PARP -O START"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli PARP -O" "START"
		add_replace_1_time_command hs_cli PARP -O START
	fi
else
	hairpin_mode=`cat /sys/class/net/br-lan/brif/$interface_name/hairpin_mode`
	if [ "$hairpin_mode" = "1" ]
	then
		print2log $radio_index $debug_level "hs_cli HS -O DISABLE"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli HS -O DISABLE" "-I $interface_name"
		add_replace_command hs_cli HS -O DISABLE -I $interface_name
	fi
fi


#######################################################################
# L2F
#######################################################################
# Compare previous to new rules
# -Case rule change (Add/Del/Modify call fapi_wlan_wave_firewall_conf_change):
# -- Delete all rules
# -- Add all rules
# -Case status change...

l2f_status_change_detect()
{
	index=$1
		
	# Test change in l2f Enable (HS20_CONF file):
	enable=`cat ${HS20_CONF}_${index} | grep ${param_name}_${index}`
	enable=${enable##*=}
	param_before=`cat ${HS20_CONF}_old | grep ${param_name}_${index}`
	param_before=${param_before##*=}
	if [ "$enable" != "$param_before" ]
	then
		print2log $radio_index $debug_level "l2f_status_change_detect: L2F Status change ($enable=$$enable, param_before=$param_before)"
		echo 1
		return		
	fi
	echo 0
}

# files:
# fapi_wlan_wave_hs20_l2ffw_conf_0, ..., fapi_wlan_wave_hs20_l2ffw_conf_n (n=1,2,etc. number of instances)
# fapi_wlan_wave_hs20_l2ffw_conf_0_old, ..., fapi_wlan_wave_hs20_l2ffw_conf_n_old (n=1,2,etc. number of instances)
# if different number of files -> change
# loop over index and compare...
compare_l2f_files()
{
	index=$1
	file_differs=0
	flag=0
	instance=0
	print2log $radio_index $debug_level "In compare_l2f_files"
	
	number_of_files=`ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_l2ffw_conf  | grep _old -cv`
	number_of_files_old=`ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_l2ffw_conf | grep _old -c`
	if [ "$number_of_files_old" = "0" ] || [ "$number_of_files_old" != "$number_of_files" ]
	then
		file_differs=1
		print2log $radio_index $debug_level "compare_l2f_files: Different num files, number_of_files=$number_of_files, number_of_files_old=$number_of_files_old"
		echo $file_differs
		return
	fi
	
	# Test for number of lines:
	while [ $instance -lt $number_of_files ]
	do
		num_lines_old=`cat ${HS20_CONF_L2F_FW}_${instance}_old | sed '/^\s*$/d' | wc -l`
		num_lines=`cat ${HS20_CONF_L2F_FW}_${instance} | sed '/^\s*$/d' | wc -l`
		print2log $radio_index $debug_level "compare_l2f_files: num_lines_old=$num_lines_old, num_lines=$num_lines"
		if [ "$num_lines_old" != "$num_lines" ]
		then
			file_differs=1
			print2log $radio_index $debug_level "compare_l2f_files: Different num lines, file_differs=$file_differs"
			echo $file_differs
			return
		fi
		instance=$((instance+1))
	done
	
	instance=0
	# Test for change in rule:
	while [ $instance -lt $number_of_files ]
	do
		while read line
		do
			line_tmp=`echo $line | grep -vE '^(\s*$|#)'`
			if [ -z "$line_tmp" ]
			then
				# Empty line continue
				continue
			fi
			#print2log $radio_index $debug_level "compare_l2f_files: line=$line"
			while read line2
			do
				flag=0
				
				line_tmp=`echo $line2 | grep -vE '^(\s*$|#)'`
				if [ -z "$line_tmp" ]
				then
					#print2log $radio_index $debug_level "compare_l2f_files: Empty, break"
					break
				fi
				# Set flag, clear if line found
				flag=1
				
				#print2log $radio_index $debug_level "compare_l2f_files: line2=$line2"
				if [ ! -z "$line" ] && [ ! -z "$line" ] && [ "$line" = "$line2" ]
				then
					print2log $radio_index $debug_level "compare_l2f_files: same line, clear flag, (line=$line, line2=$line2) break"
					flag=0
					break
				fi
			done < ${HS20_CONF_L2F_FW}_${instance}_old
			#done < ${HS20_CONF_L2F_FW}_old
			if [ $flag -eq 1 ]
			then
				print2log $radio_index $debug_level "compare_l2f_files: flag -eq 1 (line=$line, line2=$line2)"
				file_differs=1
				break
			fi
		done < ${HS20_CONF_L2F_FW}_${instance}
		#done < ${HS20_CONF_L2F_FW}
	instance=$((instance+1))
	done
	
	# L2FwEnabled is held in hs20 conf file. If no change found in L2F conf file, test for this param
	if [ "$file_differs" = "0" ]
	then
		l2f_enable_change=`get_hs20_status_change $interface_index L2FwEnabled_`
		if [ "$l2f_enable_change" = "1" ]
		then
			print2log $radio_index $debug_level "compare_l2f_files: L2FwEnabled changed"
			file_differs=1
		fi
	fi
	print2log $radio_index $debug_level "compare_l2f_files: file_differs=$file_differs"
	echo $file_differs
}


# 4 params to determine L2F status:
# l2f_ena: dB value (fron IN_CONF)
# wave_wifi_l2f_is_started: is L2F already insmod
# is_l2f_enabled_count: was it already enabled for this interface (previous session)
# l2f_module_enable: status of L2F module on board
# l2f_num_change: detect change, for delete case
#
# CODE:
#
# if L2F conf file NOT exist
#   skip L2F
#
# else:......................
#
# if wave_wifi_l2f_is_started=0
#     insmod L2F
# fi
# 
# if conf file only
#   l2_fw_changed=1
# elif conf file + old conf file
#   l2_fw_changed=`compare_l2f_files $interface_index`
# fi
#
#
# if l2f_ena=1
#   # make sure L2F is ENABLE
#   if l2f_module_enable=0
#     ENABLE L2F
# if l2f_ena=0 && 
#   if l2f_module_enable=1
#     DISABLE L2F
# fi
#
# if l2_fw_changed=1 # any change...
#   Call l2f script...
#
# Input file for l2f_module_enable:
# ~# cat /proc/net/wave_wifi_l2f/l2f
# Interface: wlan2
# ==========
# No rule set.
# 
# Interface: wlan0
# ==========
# No rule set.

skip_l2f_handling=0
l2f_ena=0
wave_wifi_l2f_is_started=0
is_l2f_enabled_count=0
l2f_ena_current_session=0

print2log $radio_index $debug_level "L2F:........"

# L2FwEnabled checkbox in WEB.
# Adding l2f rule not enable this, only checkbox set does.
# Use case for L2FwEnabled with no rule: 
l2f_ena_request=`db2fapi_convert boolean L2FwEnabled $interface_index`
print2log $radio_index $debug_level "l2f_ena_request=$l2f_ena_request"
if [ "$l2f_ena_request" = "1" ] && [ ! -e /proc/net/wave_wifi_l2f/l2f ]
then
	wave_wifi_l2f_is_started=1
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: l2f_ena_request: L2F -O START"
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O" " START"
	add_replace_1_time_command hs_cli L2F -O START
fi

number_of_files=`ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_l2ffw_conf  | grep _old -cv`
number_of_files_old=`ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_l2ffw_conf | grep _old -c`

print2log $radio_index $debug_level "number_of_files=$number_of_files, number_of_files_old=$number_of_files_old"

if [ "$number_of_files" = "0" ]
then
	######################################################################
	# L2F not set yet on the device
	skip_l2f_handling=1
	print2log $radio_index $debug_level "set skip_l2f_handling=$skip_l2f_handling"
	l2f_ena=0
elif [ "$l2f_ena_request" = "0" ] || [ "$hs20_mode" = "$HS20_MODE_DISABLED" ]
then
	print2log $radio_index $debug_level "l2f_ena_request = 0, no need to serve L2F"
	l2f_ena=0
	if [ -e /proc/net/wave_wifi_l2f/l2f ]
	then
		######################################################################
		# L2F is disabled for the interface, make sure to disable it
		l2f_module_enable=`hs_cli L2F -O DUMP | grep "Interface: $interface_name$" -c`
		print2log $radio_index $debug_level "L2F is disabled for the interface, l2f_module_enable=$l2f_module_enable"
		if [ "$l2f_module_enable" != "0" ]
		then
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: L2F -O DISABLE"
			set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O DISABLE" "-I $interface_name"
			add_replace_command hs_cli L2F -O DISABLE -I $interface_name
		fi
	fi
elif [ "$hs20_mode" = "$HS20_MODE_ENABLED" ]
then
	######################################################################
	print2log $radio_index $debug_level "skip_l2f_handling=$skip_l2f_handling"
	#l2f_ena=1 # TODO: FIX- This is a Workaround...!!!!!!!!!!!!!!!!
	#l2f_ena=`db2fapi_convert boolean L2FwEnabled $interface_index` # May be disabled also after adding l2f rull
	l2f_instances=`db2fapi_convert regular L2FirewallNumberOfEntries $interface_index`
	l2f_num_change=`get_hs20_status_change $interface_index L2FirewallNumberOfEntries_`
	print2log $radio_index $debug_level "l2f_instances=$l2f_instances, l2f_num_change=$l2f_num_change"
	if [ "$l2f_instances" != "0" ]
	then
		l2f_ena=1
	fi
	print2log $radio_index $debug_level "l2f_ena=$l2f_ena"
	if [ -z "$l2f_ena" ]
	then
		l2f_ena=0
	fi
	
	if [ -e /proc/net/wave_wifi_l2f ]
	then
		wave_wifi_l2f_is_started=1
	else
		wave_wifi_l2f_is_started=0
	fi
	
	is_l2f_enabled_count=`${HS20_COMMANDS_SAVE}_${radio_name}_old | grep "hs_cli L2F -O ENABLE -I $interface_name" -c`
	
	# Add $ to end of string to grep (end of a line), so wlan0 will not be leggal for wlan0.0
	l2f_module_enable=`hs_cli L2F -O DUMP | grep "Interface: $interface_name$" -c`
	
	print2log $radio_index $debug_level "l2f_ena=$l2f_ena, l2f_num_change=$l2f_num_change, wave_wifi_l2f_is_started=$wave_wifi_l2f_is_started, is_l2f_enabled_count=$is_l2f_enabled_count, l2f_module_enable=$l2f_module_enable"
	
	
	
	# if wave_wifi_l2f_is_started=0
	#     insmod L2F
	# fi
	if [ "$wave_wifi_l2f_is_started" = "0" ]
	then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: L2F -O START"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O" " START"
		add_replace_1_time_command hs_cli L2F -O START
	fi
	
	
	# if conf file only
	#   l2_fw_changed=1
	# elif conf file + old conf file
	#   l2_fw_changed=`compare_l2f_files $interface_index`
	# fi
	#if [ -e ${HS20_CONF_L2F_FW}_${interface_index} ] && [ ! -e ${HS20_CONF_L2F_FW}_old ]
	if [ "$number_of_files" != "0" ] && [ "$number_of_files_old" = "0" ]
	then
		# Test for any change
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Set l2_fw_changed, only one HS20_CONF_L2F_FW exist"
		l2_fw_changed=1
	#elif [ -e ${HS20_CONF_L2F_FW}_${interface_index} ] && [ -e ${HS20_CONF_L2F_FW}_old ]
	elif [ "$number_of_files" != "0" ] && [ "$number_of_files_old" != "0" ]
	then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: Test for any change: Both HS20_CONF_L2F_FW exist"
		l2_fw_changed=`compare_l2f_files $interface_index`
	fi
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: l2_fw_changed=$l2_fw_changed"
	
	
	# if l2f_ena=1
	#   # make sure L2F is ENABLE
	#   if l2f_module_enable=0
	#     ENABLE L2F
	# if l2f_ena=0 && 
	#   if l2f_module_enable=1
	#     DISABLE L2F
	# fi
	if [ "$l2f_ena" = "1" ]
	then
		if [ "$l2f_module_enable" = "0" ]
		then
			l2f_ena_current_session=1
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: L2F -O ENABLE"
			set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O ENABLE" "-I $interface_name"
			add_replace_command hs_cli L2F -O ENABLE -I $interface_name
		fi
	elif [ "$l2f_ena" = "0" ]
	then
		if [ "$l2f_module_enable" = "1" ]
		then
			l2f_ena_current_session=0
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: L2F -O DISABLE"
			set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O DISABLE" "-I $interface_name"
			add_replace_command hs_cli L2F -O DISABLE -I $interface_name
		fi
	fi
	
	
	# if l2_fw_changed=1 # any change...
	#   Call l2f script...
	# If l2f_ena=0, l2f is disable for the interface
	if [ "$l2f_ena" = "1" ]
	then
		# Delete all rules, then add all rules
		# If L2F ENABLE was not set and a change to L2F exist, need to ENABLE for the change to take place (and saved for if down/up)
		if [ "$l2f_ena_current_session" = "0" ]
		then
			l2f_ena_current_session=1
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: l2_fw_changed, need to enable for down/up: L2F -O ENABLE"
			set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O ENABLE" "-I $interface_name"
			add_replace_command hs_cli L2F -O ENABLE -I $interface_name
		fi
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: TODO: Delete all rules, then add all rules ..."
		(. ${ETC_PATH}/fapi_wlan_wave_firewall_conf_change $interface_name $pid)
	elif [ "$l2f_num_change" = "1" ] && [ "$l2f_ena" = "0" ]
	then
		# compare_l2f_files may not detect change when L2F is disabled, because L2F config files don't keep L2FirewallNumberOfEntries param.
		# This is the need for param l2f_num_change.
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: l2f_num_change=1, need to disable: L2F -O DISABLE"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O DISABLE" "-I $interface_name"
		add_replace_command hs_cli L2F -O DISABLE -I $interface_name
	fi
	
	if [ $hs20_mode -eq $HS20_MODE_DISABLED ]
	then
		# Need to disable L2F
		if [ "$l2f_ena_current_session" = "1" ]
		then
			l2f_ena_current_session=0
			print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: hs20_mode -eq $HS20_MODE_DISABLED: L2F -O DISABLE"
			set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O DISABLE" "-I $interface_name"
			add_replace_command hs_cli L2F -O DISABLE -I $interface_name		
		fi
	fi
	######################################################################
fi

####################################################################
# L2F END
####################################################################

# Start/stop/configure other hotspot components
#if [ "$hs20_change" = "1" ] && [ $hs20_mode -gt $HS20_MODE_DISABLED ] && [ -n "$proxy_arp" ]
#then
if [ $hs20_mode -gt $HS20_MODE_DISABLED ]
then
	parp_cmd="DISABLE"
	disable_dgaf_str="DGAF_ENABLE"

	[ "$disable_dgaf" = "1" ] && disable_dgaf_str="DGAF_DISABLE"
	[ "$proxy_arp" = "1" ] && parp_cmd="ENABLE"
	print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: parp_cmd=$parp_cmd, disable_dgaf_str=$disable_dgaf_str"

	print2log $radio_index $debug_level "Call ALUMNUS_HS20_CONFIG_FILE with PARP $parp_cmd"
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli PARP -O $parp_cmd" "-I $interface_name"
	add_replace_command hs_cli PARP -O $parp_cmd -I $interface_name
	# TODO: test L2F enabled before call:
	if [ ! -e /proc/net/wave_wifi_l2f ]
	then
		print2log $radio_index $debug_level "fapi_wlan_wave_hotspot_set: DGAF handling: need L2F -O START"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O" " START"
		add_replace_1_time_command hs_cli L2F -O START
	fi
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O $disable_dgaf_str" "-I $interface_name"
	add_replace_command hs_cli L2F -O $disable_dgaf_str -I $interface_name
fi


###############################################################################
# WMS: Start/Stop according to HS2.0 setting:
###############################################################################
print2log $radio_index $debug_level "before notificatios: hs20_change=$hs20_change, hs20_mode=$hs20_mode, hs20_wan_metrics_static=$hs20_wan_metrics_static, duration_change=$duration_change, static_change=$static_change"
if [ "$hs20_change" = "1" ] && [ -n "$hs20_mode" ] && [ "$hs20_mode" = "$HS20_MODE_ENABLED" ] && [ "$hs20_wan_metrics_static" = "0" ]
then
	print2log $radio_index $debug_level "Send NOTIFY_WMS_REGISTRATION notification"
	# Notification:
	# ref_name: Reference name to which the WMS_STATUS notification will be registered
	# connname: WAN connection name on which the statistics will be collected
	# duration: in secs, collect stats for this duration
	
	if [ -z $wan_metrics_duration ]; then wan_metrics_duration=120; fi
	if [ $wan_metrics_duration -lt 120 ];then wan_metrics_duration=120; fi # what about hostapd value?
	print2log $radio_index $debug_level "ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\",\"pn2\" : \"duration\", \"pv2\" : \"$wan_metrics_duration\" }'"
	#Old wms: notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"wan14\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
	notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
	# Make the script calling the ubus executable and execute it
	echo "$notify_command" > $ubus_call
	chmod +x $ubus_call
	$ubus_call
	rm -f $ubus_call
elif [ "$hs20_change" = "1" ] && [ -n "$hs20_mode" ] && [ "$hs20_mode" != "$HS20_MODE_ENABLED" ]
then
	if [ "$hs20_conf_old_not_exist" = "0" ] 
	then
		# HS20 has changed to value other than enabled (Disabled/Osen)
		print2log $radio_index $debug_level "Send NOTIFY_WMS_DEREGISTRATION notification"
		#[ -e $WMDCTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $WMDCTRL_SCRIPT" "disable $interface_name)"
		# Notification:
		# ref_name: Reference name to which the WMS_STATUS notification will be registered
		# connname: WAN connection name on which the statistics will be collected
		print2log $radio_index $debug_level "ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\" }'"
		#Old wms: notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"wan14\" }' &"
		notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"\" }' &"
		echo "$notify_command" > $ubus_call
		chmod +x $ubus_call
		$ubus_call
	rm -f $ubus_call
	fi
elif [ "$hs20_change" = "0" ] && [ -n "$hs20_mode" ] && [ "$hs20_mode" = "$HS20_MODE_ENABLED" ]
then
	# HS20 is enabled, check for WMD change of duration or change WMS status (Enable/Disable)
	duration_change=""
	if [ -e ${HS20_CONF}_old ]
	then
		duration_change=`get_hs20_status_change $interface_index WanMetricsLoadMeasurementDuration_`
	else
		duration_change=1
	fi
	print2log $radio_index $debug_level "duration_change=$duration_change"
	if [ "$duration_change" = "1" ]  && [ "$hs20_wan_metrics_static" = "0" ]
	then
		print2log $radio_index $debug_level "Send NOTIFY_WMS_MODIFY notification"
		print2log $radio_index $debug_level "ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_MODIFY', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"duration\", \"pv2\" : \"$wan_metrics_duration\" }'"
		#Old wms: notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_MODIFY', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"wan14\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
		notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_MODIFY', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
		echo "$notify_command" > $ubus_call
		chmod +x $ubus_call
		$ubus_call
		rm -f $ubus_call
	elif [ "$hs20_wan_metrics_static" = "0" ]
	then
		# May be down (if hs20_wan_metrics_static was set. Then need to bring it up again.). If it is not down - nothing change
		print2log $radio_index $debug_level "Send NOTIFY_WMS_REGISTRATION notification"
		if [ -z $wan_metrics_duration ]; then wan_metrics_duration=120; fi
		if [ $wan_metrics_duration -lt 120 ];then wan_metrics_duration=120; fi # what about hostapd value?
		print2log $radio_index $debug_level "ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\",\"pn2\" : \"duration\", \"pv2\" : \"$wan_metrics_duration\" }'"
		#Old wms: notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"wan14\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
		notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_REGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"\", \"pn3\" : \"duration\", \"pv3\" : \"$wan_metrics_duration\" }' &"
		# Make the script calling the ubus executable and execute it
		echo "$notify_command" > $ubus_call
		chmod +x $ubus_call
		$ubus_call
		rm -f $ubus_call
	elif [ "$hs20_wan_metrics_static" = "1" ] && [ "$static_change" = "1" ]
	then
		print2log $radio_index $debug_level "Send NOTIFY_WMS_DEREGISTRATION notification"
		print2log $radio_index $debug_level "ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\" }'"
		#Old wms: notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"wan14\" }' &"
		notify_command="ubus call servd notify '{\"notify_id\" : '$NOTIFY_WMS_DEREGISTRATION', \"type\" : false, \"pn1\" : \"ref_name\", \"pv1\" : \"$interface_name\", \"pn2\" : \"connname\", \"pv2\" : \"\" }' &"
		echo "$notify_command" > $ubus_call
		chmod +x $ubus_call
		$ubus_call
		rm -f $ubus_call
		// Update hostapd:
		print2log $radio_index $debug_level "exec fapi_wlan_wave_wms_set"
		(. ${ETC_PATH}/fapi_wlan_wave_wms_set $interface_name FAPI)
#		${ETC_PATH}/fapi_wlan_wave_wms_set $interface_name FAPI
	elif [ "$hs20_wan_metrics_static" = "1" ]
	then
		print2log $radio_index $debug_level "exec fapi_wlan_wave_wms_set"
		(. ${ETC_PATH}/fapi_wlan_wave_wms_set $interface_name FAPI)
#		${ETC_PATH}/fapi_wlan_wave_wms_set $interface_name FAPI
	fi
fi
###############################################################################
# WMS: END
###############################################################################


# Configuration is completed successfully
if [ "$notify_ap_iso" = "1" ]
then
	print2log $radio_index $debug_level "$script_name: update ap_isolate: build_wlan_notification servd NOTIFY_WIFI_UPDATE_PARAM Name:$interface_name Object:${ACCESSPOINT_OBJECT} IsolationEnable:$ap_isolate"
	#build_wlan_notification "servd" "NOTIFY_WIFI_UPDATE_PARAM" "Name:$interface_name Object:${ACCESSPOINT_OBJECT} IsolationEnable:$ap_isolate"
fi

if [ "$updateHessid" = "1" ]; then
	update_conf_out "Object_${hs20_index}" "$ACCESSPOINT_HS20_VENDOR_OBJECT"
	update_conf_out "HESSID_${hs20_index}" "$hessid"
fi
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/hotspot_set_out_conf_${interface_name}

# Clean old files
ls ${CONF_DIR}/ | grep fapi_wlan_wave_hs20_ | grep _old > /tmp/del_list
while read line
do
	rm ${CONF_DIR}/$line
done < /tmp/del_list
rm /tmp/del_list

print2log $radio_index $debug_level "$script_name done"
timestamp $radio_index "$script_name:done"
