#!/bin/sh
# Return the AccessPoint.AssociatedDevice Stats
# Needed objects: None or AccessPoint.AssociatedDevice with partial list of parameters

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

interface_name=$1

# Find the radio index
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $radio_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

# Verify interface is up and ready. If not, exit
[ `check_interface_is_ready $interface_name` = "1" ] && exit

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/assoc_devices_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
accesspoint_index=`map_param_index Object $ACCESSPOINT_OBJECT`
associated_devices_index=`map_param_index Object $ACCESSPOINT_ASSOCIATED_DEVICES_OBJECT`

# If an object that needs to be in the output conf wasn't in the input conf, set it with an index
next_object_index=`get_next_object_index`
[ -z "$accesspoint_index" ] && accesspoint_index=$next_object_index && next_object_index=$((next_object_index+1))
[ -z "$associated_devices_index" ] && associated_devices_index=$next_object_index && next_object_index=$((next_object_index+1))

# Get list of connected devices
iw dev $interface_name station dump > ${TEMP_DIR}/sta_dump_${interface_name}
grep ^Station ${TEMP_DIR}/sta_dump_${interface_name} > ${TEMP_DIR}/sta_dump_${interface_name}_tmp
mv ${TEMP_DIR}/sta_dump_${interface_name}_tmp ${TEMP_DIR}/sta_dump_${interface_name}

# Functions to read the statistics

downlink_rate_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name TR181PeerStat $mac` && stats_read="yes" 
	pre_stat_text=" "
	post_stat_text=" : LastDataDownlinkRate"
	downlink_rate=`extract_stats_from_mtdump "$mtdump_output" "$post_stat_text" "$pre_stat_text"`
	# Downlink range is 1000-2100000
	if [ -z $downlink_rate ] || [ $downlink_rate -lt 1000 ]
	then
		downlink_rate=1000
	elif [ $downlink_rate -gt 2100000 ]
	then
		downlink_rate=2100000
	fi
}

uplink_rate_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name TR181PeerStat $mac` && stats_read="yes"
	pre_stat_text=" "
	post_stat_text=" : LastDataUplinkRate"
	uplink_rate=`extract_stats_from_mtdump "$mtdump_output" "$post_stat_text" "$pre_stat_text"`
	# Uplink range is 1000-2100000
	if [ -z $uplink_rate ]  || [ $uplink_rate -lt 1000 ]
	then
		uplink_rate=1000
	elif [ $uplink_rate -gt 2100000 ]
	then
		uplink_rate=2100000
	fi
}

signal_strength_stats()
{
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name TR181PeerStat $mac` && stats_read="yes"
	pre_stat_text="Last data receive rate (from peer) "
	post_stat_text=" : SignalStrength"
	signal_strength=`extract_stats_from_mtdump "$mtdump_output" "$post_stat_text" "$pre_stat_text"`
        signal_strength=${signal_strength:7}
	[ $signal_strength -lt -120 ] && signal_strength=-128
	signal_strength2=$signal_strength
	signal_strength3=$signal_strength
	signal_strength4=$signal_strength
}

retransmissions_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name TR181PeerStat $mac` && stats_read="yes"
	pre_stat_text="Retransmition Statistics:"
	post_stat_text=" : Retransmissions"
	retransmissions=`extract_stats_from_mtdump "$mtdump_output" "$post_stat_text" "$pre_stat_text"`
}

read_ip_address()
{
	# Read IP address of the STA from the DHCP lease table.
	# If STA is not in the DHCP lease table (static IP), try to read IP from arp table
	# If IP not found, print "Unknown"
	ip_address=""
	[ -e /tmp/leasefile ] && ip_address=`grep -i $mac /tmp/leasefile | awk '{print $3}'`
	[ -z "$ip_address" ] && ip_address=`cat /proc/net/arp | grep -i $mac | awk '{print $2}'`
	if [ -z "$ip_address" ]
	then
		ip_address="Unknown"
	else
		# Remove brackets from arp output
		ip_address=${ip_address//(/}
		ip_address=${ip_address//)/}
	fi

	if [ -f "$RDKBOS_WIFI_UTIL" ] && [ "$PUMA_SOC" != "PUMA7" ]
	then
		ip_address=`rpc_management_client 192.168.254.253 -STA_IP_ADDR -m $mac | grep "ip_address" | awk -F ": " '{print $2}'`
	fi
}

# Create the output configuration file and set the statistics in it
cat /dev/null > ${OUT_CONF}

# Return only the requested statistics
stats_read=""

# If object is empty, return all statistics
if [ `wc -c < ${IN_CONF}` = "0" ]
then

	# Go over the list of MACs and do the following:
	# Count MACs
	# Read statistics from mtdump
	# Write associated device's statistics to the output conf file

	associated_count=0
	current_associated_devices_index=$associated_devices_index

	while read Station mac param3
	do
		downlink_rate_stats
		uplink_rate_stats
		signal_strength_stats
		signal_strength_stats
		signal_strength_stats
		signal_strength_stats
		retransmissions_stats
		read_ip_address

		update_conf_out "Object_${current_associated_devices_index}" "$ACCESSPOINT_ASSOCIATED_DEVICES_OBJECT"
		# Write the AssociatedDevice object parameters to the output conf file
		update_conf_out "MACAddress_${current_associated_devices_index}" "$mac"
		update_conf_out "AuthenticationState_${current_associated_devices_index}" "true"
		update_conf_out "LastDataDownlinkRate_${current_associated_devices_index}" "$downlink_rate"
		update_conf_out "LastDataUplinkRate_${current_associated_devices_index}" "$uplink_rate"
		update_conf_out "SignalStrength_${current_associated_devices_index}" "$signal_strength"
		update_conf_out "Retransmissions_${current_associated_devices_index}" "$retransmissions"
		update_conf_out "Active_${current_associated_devices_index}" "true"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength2_${current_associated_devices_index}" "$signal_strength2"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength3_${current_associated_devices_index}" "$signal_strength3"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength4_${current_associated_devices_index}" "$signal_strength4"
		update_conf_out "IPAddress_${current_associated_devices_index}" "$ip_address"
		
		current_associated_devices_index=$next_object_index
		next_object_index=$((next_object_index+1))
		associated_count=$((associated_count+1))
	done < ${TEMP_DIR}/sta_dump_${interface_name}

	# Update number of associated devices
	accesspoint_index=${current_associated_devices_index}
	update_conf_out "Object_${accesspoint_index}" "$ACCESSPOINT_OBJECT"
	update_conf_out "AssociatedDeviceNumberOfEntries_${accesspoint_index}" "$associated_count"
fi

while read statistics
do
	stats_name=${statistics%_*}
	case $stats_name in
		"Object")
			object_index=${statistics##*_}
			object_index=${object_index%%=*}
			object_name=${statistics##*=}
			update_conf_out "Object_${object_index}" "$object_name"
			;;
		"MACAddress")
			eval mac=\${MACAddress_${object_index}}
			mac=$(printf "%b" "$mac")
			update_conf_out "MACAddress_${object_index}" "$mac"
			;;
		"AuthenticationState")
			update_conf_out "AuthenticationState_${object_index}" "true"
			;;
		"LastDataDownlinkRate")
			downlink_rate_stats
			update_conf_out "LastDataDownlinkRate_${object_index}" "$downlink_rate"
			;;
		"LastDataUplinkRate")
			uplink_rate_stats
			update_conf_out "LastDataUplinkRate_${object_index}" "$uplink_rate"
			;;
		"SignalStrength")
			signal_strength_stats
			update_conf_out "SignalStrength_${object_index}" "$signal_strength"
			;;
		"X_LANTIQ_COM_Vendor_SignalStrength2")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength2_${object_index}" "$signal_strength2"
			;;
		"X_LANTIQ_COM_Vendor_SignalStrength3")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength3_${object_index}" "$signal_strength3"
			;;
		"X_LANTIQ_COM_Vendor_SignalStrength4")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength4_${object_index}" "$signal_strength4"
			;;
		"Retransmissions")
			retransmissions_stats
			update_conf_out "Retransmissions_${object_index}" "$retransmissions"
			;;
		"Active")
			update_conf_out "Active_${object_index}" "true"
			;;
		"IPAddress")
			read_ip_address
			update_conf_out "IPAddress_${object_index}" "$ip_address"
			;;
		"AssociatedDeviceNumberOfEntries")
			associated_count=`cat ${TEMP_DIR}/sta_dump_${interface_name} | wc -l`
			update_conf_out "AssociatedDeviceNumberOfEntries_${object_index}" "$associated_count"
			;;
	esac
done < ${IN_CONF}

rm -f ${TEMP_DIR}/sta_dump_${interface_name}
# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/assoc_devices_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
