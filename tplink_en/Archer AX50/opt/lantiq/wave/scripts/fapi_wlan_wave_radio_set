#!/bin/sh
# Configure Radio parameters
# Needed objects: Radio, Radio.X_LANTIQ_COM_Vendor

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh

interface_name=$1
pid=$$

if [ -e "$INIT_FLAG" ] && ([ -e ${USE_CURRENT_CONF}_${interface_name} ] || [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ])
then
	if [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ]; then
		echo "####### $script_name: init flow DUT MODE" > $TRACE_OUT
	else
		echo "####### $script_name: init flow with conf from previous setting - FAST BOOT" > $TRACE_OUT
	fi
	# Create the output configuration file
	cat /dev/null > ${OUT_CONF}

	# Configuration is completed successfully
	update_conf_out "wlan_configuration_status" "success"
	exit 0
fi

# Find the interface index
interface_index=`find_index_from_interface_name $interface_name`

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/radio_set_in_conf_${interface_name}

# On init flow, Radio vendor  parameters are saved during radio_set, delete the radio conf file created in hw_init script
[ -e "$REMOVE_RADIO_CONF" ] && rm -f $RADIO_CONF $REMOVE_RADIO_CONF

# Map the objects indexes to the received objects in the in.conf file
radio_index=`map_param_index Object $RADIO_OBJECT`
radio_vendor_index=`map_param_index Object $RADIO_VENDOR_OBJECT`
fw_stream_index=`map_param_index Object $RADIO_VENDOR_FW_LOGGER_OBJECT`
driver_stream_index=`map_param_index Object $RADIO_VENDOR_DRIVER_LOGGER_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
[ -n "$radio_vendor_index" ] && save_db_params radio_set $interface_name $radio_vendor_index $interface_index
[ -n "$radio_index" ] && save_db_params radio_set $interface_name $radio_index $interface_index
[ -n "$fw_stream_index" ] && save_db_params logger_set_fw $interface_name $fw_stream_index $interface_index
[ -n "$driver_stream_index" ] && save_db_params logger_set_driver $interface_name $driver_stream_index $interface_index
local_db_source RADIO
local_db_source LOGGER_FW
local_db_source LOGGER_DRIVER

print2log $interface_index DEBUG "$script_name $*"
timestamp $interface_index "$script_name:$interface_name:begin"

# Check if WaveExternallyManaged is included in the fapi_wlan_wave_in.conf
if [ ! -e "$INIT_FLAG" ] && test `grep WaveExternallyManaged_${radio_index} ${IN_CONF}`
then
	# Set a flag indicating that confs folder needs to be removed
	touch $WAVE_DELETE_CONFS_FLAG
	# Create the output configuration file
	cat /dev/null > ${OUT_CONF}
	# Configuration is completed successfully
	update_conf_out "wlan_configuration_status" "success"
	exit
fi

comment="___Radio_parameters___###"

# Define list of radio parameters
driver_params="sPowerSelection
sCoCAutoCfg
sAlgoCalibrMask
sOnlineACM
driver_debug
sScanParams
sScanParamsBG
sScanModifFlags
sScanCalCwMasks
sFWRecovery
sQAMplus
sNumMsduInAmsdu
sScanExpTime
sMaxMpduLen
sBfMode
sInterfDetThresh
sMuOperation
sDmrConfig"

driver_otf_params="sCoCPower
sEnableRadio
sPCoCPower
sPCoCAutoCfg
sTxopConfig
sRadarRssiTh
sAcsUpdateTo
sRTSmode
sFixedRateCfg
sInterfDetThresh
sCcaTh
sCcaAdapt
sFastDrop
sMuStatPlanCfg
sFixedLtfGi
sHeMuOperation
sEnableTestBus
s11hRadarDetect"

hostapd_params="country_code
hw_mode
ieee80211d
channel
preamble
rts_threshold
ieee80211n
ht_capab
ht_tx_bf_capab
ht_rifs
ieee80211h
ieee80211ac
vht_oper_chwidth
vht_capab
vendor_vht
vht_oper_centr_freq_seg0_idx
ap_max_num_sta
acs_num_scans
obss_interval
scan_passive_dwell
scan_active_dwell
scan_passive_total_per_channel
scan_active_total_per_channel
channel_transition_delay_factor
scan_activity_threshold
obss_beacon_rssi_threshold
acs_numbss_info_file
acs_numbss_coeflist
acs_smart_info_file
acs_history_file
dfs_debug_chan
chanlist
assoc_rsp_rx_mcs_mask
ignore_40_mhz_intolerant
acs_chan_noise_penalty
acs_vht_dynamic_bw
acs_policy
acs_penalty_factors
acs_fallback_chan
acs_scan_mode
acs_chan_cust_penalty
acs_to_degradation
acs_grp_priorities_throughput
acs_grp_priorities_reach
acs_bw_comparison
acs_bw_threshold
sub_band_dfs
ieee80211ax
he_capab
he_mac_maximum_number_of_fragmented_msdus_amsdus
he_mac_multi_tid_aggregation_rx_support
he_mac_maximum_a_mpdu_length_exponent
he_mac_multi_tid_aggregation_tx_support
he_mac_om_control_ul_mu_data_disable_rx_support
he_phy_channel_width_set
he_phy_stbc_tx_less_than_or_equal_80mhz
he_phy_dcm_max_constellation_tx
he_phy_dcm_max_constellation_rx
he_phy_dcm_max_nss_tx
he_phy_dcm_max_nss_rx
he_ppe_thresholds_nsts
he_ppe_thresholds_ru_index_bitmask
he_ppe_thresholds_ppet8_for_nsts1_for_ru0
he_ppe_thresholds_ppet8_for_nsts1_for_ru1
he_ppe_thresholds_ppet8_for_nsts1_for_ru2
he_ppe_thresholds_ppet8_for_nsts1_for_ru3
he_ppe_thresholds_ppet8_for_nsts2_for_ru0
he_ppe_thresholds_ppet8_for_nsts2_for_ru1
he_ppe_thresholds_ppet8_for_nsts2_for_ru2
he_ppe_thresholds_ppet8_for_nsts2_for_ru3
he_ppe_thresholds_ppet8_for_nsts3_for_ru0
he_ppe_thresholds_ppet8_for_nsts3_for_ru1
he_ppe_thresholds_ppet8_for_nsts3_for_ru2
he_ppe_thresholds_ppet8_for_nsts3_for_ru3
he_ppe_thresholds_ppet8_for_nsts4_for_ru0
he_ppe_thresholds_ppet8_for_nsts4_for_ru1
he_ppe_thresholds_ppet8_for_nsts4_for_ru2
he_ppe_thresholds_ppet8_for_nsts4_for_ru3
he_operation_bss_color
he_operation_default_pe_duration
he_operation_txop_duration_rts_threshold
he_operation_max_mcs_for_1ss
he_operation_max_mcs_for_2ss
he_operation_max_mcs_for_3ss
he_operation_max_mcs_for_4ss
he_operation_max_mcs_for_5ss
he_operation_max_mcs_for_6ss
he_operation_max_mcs_for_7ss
he_operation_max_mcs_for_8ss
he_operation_er_su_disable
he_mu_edca_qos_info_queue_request
he_mu_edca_ac_be_aifsn
he_mu_edca_ac_be_ecwmin
he_mu_edca_ac_be_ecwmax
he_mu_edca_ac_be_timer
he_mu_edca_ac_bk_aifsn
he_mu_edca_ac_bk_aci
he_mu_edca_ac_bk_ecwmin
he_mu_edca_ac_bk_ecwmax
he_mu_edca_ac_bk_timer
he_mu_edca_ac_vi_ecwmin
he_mu_edca_ac_vi_ecwmax
he_mu_edca_ac_vi_aifsn
he_mu_edca_ac_vi_aci
he_mu_edca_ac_vi_timer
he_mu_edca_ac_vo_aifsn
he_mu_edca_ac_vo_aci
he_mu_edca_ac_vo_ecwmin
he_mu_edca_ac_vo_ecwmax
he_mu_edca_ac_vo_timer
he_mcs_nss_rx_he_mcs_map_less_than_or_equal_80_mhz
he_mcs_nss_tx_he_mcs_map_less_than_or_equal_80_mhz
he_mcs_nss_rx_he_mcs_map_160_mhz
he_mcs_nss_tx_he_mcs_map_160_mhz
testbed_mode
he_phy_number_of_sounding_dimensions_for_less_than_or_equal_80mhz
he_phy_number_of_sounding_dimensions_for_greater_than_80mhz"


hostapd_atf_params="debug
distr_type
weighted_type
algo_type
interval
free_time
vap_enabled
station_enabled"

drvhlpr_params="Debug_SoftwareWatchdogEnable
Interface
arp_iface0
arp_iface1
recovery_script_path"

chip_id=`check_wave_chip_id $interface_name`

Interface=$interface_name
recovery_script_path="${ETC_PATH}/wave_wlan_fw_recovery_notify"

# Prepare the temporary configuration files to use
prepare_confs $interface_name $interface_name $pid $AP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${interface_name}

# Read current values and initiate new values file.
driver_otf_current_values=${CONF_DIR}/driver_otf_current_values_${interface_name}
driver_current_values=${CONF_DIR}/driver_current_values_${interface_name}
driver_new_values=${CONF_DIR}/driver_new_values_${interface_name}_${pid}
hostapd_current_values=${CONF_DIR}/hostapd_current_values_${interface_name}_${pid}
drvhlpr_current_values=${CONF_DIR}/drvhlpr_current_values_${interface_name}_${pid}

[ -e "$driver_otf_current_values" ] && . $driver_otf_current_values
touch $driver_new_values

read_current_values $HOSTAPD_PHY_CONF_PREFIX $interface_name $hostapd_current_values
read_current_values drvhlpr $interface_name $drvhlpr_current_values
read_current_values $DRIVER_POST_UP_CONF_PREFIX $interface_name $driver_otf_current_values
read_current_values $DRIVER_PRE_UP_CONF_PREFIX $interface_name $driver_current_values

# Calculate new values.
# Read the frequency value, as some features are for 2.4Ghz or 5Ghz only.
frequency_band=`db2fapi_convert regular OperatingFrequencyBand $interface_index`

# Read the network mode value, as some parameters depend on this value
network_mode=`db2fapi_convert regular OperatingStandards $interface_index`

# Read if auto coc is enabled, as some parameters depend on this value
auto_coc_enabled=`db2fapi_convert boolean AutoCocEnabled $interface_index`

# Read the number of antennas value, as some parameters depend on this value
num_antennas=`db2fapi_convert regular NumOfAntennas $interface_index`

### 802.11 parameters
# Enable/disable the phy radio
sEnableRadio=`db2fapi_convert boolean Enable $interface_index`
echo "$script_name: $interface_name sEnableRadio=$sEnableRadio" > $TRACE_OUT

# In hostapd, hw_mode with ieee80211n , ieee80211ac and ieee80211ax define the network mode:
# Network mode   hw_mode   ieee80211n   ieee80211ac ieee80211ax
# 11b only          b         0            0            0
# 11bg              g         0            0            0
# 11bgn             g         1            0            0
# 11a only          a         0            0            0
# 11an              a         1            0            0
# 11anac            a         1            1            1
# 11anacax          a         1            1            1
# Other network modes are currently not supported.
hw_mode=`convert_hw_mode $frequency_band $network_mode`

preamble=`convert_preamble $interface_index`
# Currently, value is hardcoded in the FW
#rts_threshold=`db2fapi_convert regular RTSThreshold $interface_index`
rts_threshold=""
country_code=`db2fapi_convert regular RegulatoryDomain $interface_index`
ieee80211d=`db2fapi_convert boolean Dot11dEnable $interface_index`
# Radar detection is only for 5Ghz band.
[ "$frequency_band" = "5GHz" ] && ieee80211h=`db2fapi_convert boolean IEEE80211hEnabled $interface_index`

# In 6.1.1 but not in 7.1
#sAocsRestrictCh=""

# When auto channel is enabled and an EndPoint is enabled and connected on this radio, set acs_sta
# When auto channel is enabled and an EndPoint is not enabled on this radio, set acs_smart
auto_channel=`db2fapi_convert boolean AutoChannelEnable $interface_index`
if [ "$auto_channel" = "1" ]
then
	channel="acs_smart"
	[ `check_endpoint_connected $interface_name` -eq 1 ] && channel="acs_sta_mode"
else
	channel=`db2fapi_convert regular Channel $interface_index`
fi

sPowerSelection=""
sPowerSelection=`convert_power_level $interface_index`

### 802.11n parameters
# Set 802.11n parameters if HT network mode is set.
ieee80211n=`db2fapi_convert_ieee80211 $network_mode n`
channel_bandwidth=`db2fapi_convert regular OperatingChannelBandwidth $interface_index`
secondary_channel=`convert_extension_channel $interface_index $channel`
ht_capab=""
ht_tx_bf_capab=""
ht_rifs=""

# For HT mode, set HT parameters.
if [ "$ieee80211n" = "1" ]
then
	ht_capab=`convert_ht_capab $interface_index $interface_name $channel_bandwidth $secondary_channel $auto_channel $auto_coc_enabled`
	ht_tx_bf_capab=`convert_ht_tx_bf_capab $interface_index $interface_name $num_antennas`
	ht_rifs=1
	chanlist=`db2fapi_convert regular WaveDot11hAllowedChannels $interface_index`
fi

### 802.11ac parameters
# Set 802.11ac parameters if VHT network mode is set.
ieee80211ac=`db2fapi_convert_ieee80211 $network_mode ac`

vendor_vht_enable=""
vendor_vht="0"
vht_oper_chwidth=""
vht_capab=""
vht_oper_centr_freq_seg0_idx=""
sQAMplus=""

# For VHT mode, set VHT parameters.
if [ "$ieee80211ac" = "1" ]
then
	vht_oper_chwidth=`convert_operation_channel_width $interface_index $channel_bandwidth $frequency_band $chip_id`
	vht_capab=`convert_vht_capab $interface_index $interface_name`
	vht_oper_centr_freq_seg0_idx=`convert_center_freq $channel $channel_bandwidth $secondary_channel $auto_channel $chip_id`
fi

if [ "$frequency_band" = "2.4GHz" ]
then
	vendor_vht_enable=`db2fapi_convert boolean WaveVendorVhtEnable $interface_index`
	if [ "$vendor_vht_enable" = "1" ]
	then
		vht_capab=`convert_vht_capab $interface_index $interface_name`
		vendor_vht=$vendor_vht_enable
	fi
	# WAVE specific features parameter:
	sQAMplus=`db2fapi_convert boolean WaveQamPlus $interface_index`
fi

### 802.11ax parameters
# Set 802.11ax parameters.

he_capab=""
he_capab_comment=""

if [ "$chip_id" = "$GEN6_CHIP_ID" ]; then
	he_capab_comment="___802.11AX_parameters____###"
	ieee80211ax=`db2fapi_convert_ieee80211 $network_mode ax`
	if [ "$ieee80211ax" = "1" ]; then 
		print2log $interface_index "802.11AX" "$script_name ieee80211ax Configuration Set"
		## Getting the values which are not zero , default value for params that not in hostapd conf are zero.
		he_mac_maximum_number_of_fragmented_msdus_amsdus=`db2fapi_convert regular HeMacMaximumNumberOfFragmentedMsdusAmsdus $interface_index`
		he_mac_multi_tid_aggregation_rx_support=`db2fapi_convert regular HeMacMultiTidAggregationRxSupport $interface_index`
		he_mac_maximum_a_mpdu_length_exponent=`db2fapi_convert regular HeMacMaximumAMpduLengthExponent $interface_index`
		#he_mac_ack_enabled_aggregation_support=`db2fapi_convert regular HeMacAckEnabledAggregationSupport $interface_index`
		#he_mac_a_msdu_in_a_mpdu_support=`db2fapi_convert regular HeMacAMsduInAMpduSupport $interface_index`
		he_mac_multi_tid_aggregation_tx_support=`db2fapi_convert regular HeMacMultiTidAggregationTxSupport $interface_index`
		he_mac_om_control_ul_mu_data_disable_rx_support=`db2fapi_convert regular HeMacOmControlUlMuDataDisableRxSupport $interface_index`
		he_phy_channel_width_set=`convert_he_phy_channel_width $interface_index $channel_bandwidth $frequency_band $network_mode`
		he_phy_stbc_tx_less_than_or_equal_80mhz=`db2fapi_convert regular HePhyStbcTxLessThanOrEqual80mhz $interface_index`
		he_phy_dcm_max_constellation_tx=`db2fapi_convert regular HePhyDcmMaxConstellationTx $interface_index`
		he_phy_dcm_max_constellation_rx=`db2fapi_convert regular HePhyDcmMaxConstellationRx $interface_index`
		he_phy_dcm_max_nss_tx=`db2fapi_convert regular HePhyDcmMaxNssTx $interface_index`
		he_phy_dcm_max_nss_rx=`db2fapi_convert regular HePhyDcmMaxNssRx $interface_index`
		he_ppe_thresholds_nsts=`db2fapi_convert regular HeHePpeThresholdsNsts $interface_index`
		he_ppe_thresholds_ru_index_bitmask=`db2fapi_convert regular HePpeThresholdsRuIndexBitmask $interface_index`
		he_ppe_thresholds_ppet8_for_nsts1_for_ru0=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts1ForRu0 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts1_for_ru1=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts1ForRu1 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts1_for_ru2=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts1ForRu2 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts1_for_ru3=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts1ForRu3 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts2_for_ru0=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts2ForRu0 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts2_for_ru1=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts2ForRu1 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts2_for_ru2=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts2ForRu2 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts2_for_ru3=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts2ForRu3 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts3_for_ru0=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts3ForRu0 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts3_for_ru1=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts3ForRu1 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts3_for_ru2=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts3ForRu2 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts3_for_ru3=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts3ForRu3 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts4_for_ru0=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts4ForRu0 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts4_for_ru1=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts4ForRu1 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts4_for_ru2=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts4ForRu2 $interface_index`
		he_ppe_thresholds_ppet8_for_nsts4_for_ru3=`db2fapi_convert regular HePpeThresholdsPpet8ForNsts4ForRu3 $interface_index`
		he_operation_bss_color=`db2fapi_convert regular HeOperationBssColor $interface_index`
		he_operation_default_pe_duration=`db2fapi_convert regular HeOperationDefaultPeDuration $interface_index`
		he_operation_txop_duration_rts_threshold=`db2fapi_convert regular HeOperationTxOpDurationRtsThreshold $interface_index`
		he_operation_max_mcs_for_1ss=`db2fapi_convert regular HeOperationMaxMcsFor1ss $interface_index`
		he_operation_max_mcs_for_2ss=`db2fapi_convert regular HeOperationMaxMcsFor2ss $interface_index`
		he_operation_max_mcs_for_3ss=`db2fapi_convert regular HeOperationMaxMcsFor3ss $interface_index`
		he_operation_max_mcs_for_4ss=`db2fapi_convert regular HeOperationMaxMcsFor4ss $interface_index`
		he_operation_max_mcs_for_5ss=`db2fapi_convert regular HeOperationMaxMcsFor5ss $interface_index`
		he_operation_max_mcs_for_6ss=`db2fapi_convert regular HeOperationMaxMcsFor6ss $interface_index`
		he_operation_max_mcs_for_7ss=`db2fapi_convert regular HeOperationMaxMcsFor7ss $interface_index`
		he_operation_max_mcs_for_8ss=`db2fapi_convert regular HeOperationMaxMcsFor8ss $interface_index`
		he_operation_er_su_disable=`db2fapi_convert regular HeOperationErSuDisable $interface_index`
		he_mu_edca_qos_info_queue_request=`db2fapi_convert regular HeMuEdcaQosInfoQueueRequest $interface_index`
		he_mu_edca_ac_be_aifsn=`db2fapi_convert regular HeMuEdcaAcBeAifsn $interface_index`
		he_mu_edca_ac_be_ecwmin=`db2fapi_convert regular HeMuEdcaAcBeEcwmin $interface_index`
		he_mu_edca_ac_be_ecwmax=`db2fapi_convert regular HeMuEdcaAcBeEcwmax $interface_index`
		he_mu_edca_ac_be_timer=`db2fapi_convert regular HeMuEdcaAcBeTimer $interface_index`
		he_mu_edca_ac_bk_aifsn=`db2fapi_convert regular HeMuEdcaAcBkAifsn $interface_index`
		he_mu_edca_ac_bk_aci=`db2fapi_convert regular HeMuEdcaAcBkAci $interface_index`
		he_mu_edca_ac_bk_ecwmin=`db2fapi_convert regular HeMuEdcaAcBkEcwmin $interface_index`
		he_mu_edca_ac_bk_ecwmax=`db2fapi_convert regular HeMuEdcaAcBkEcwmax $interface_index`
		he_mu_edca_ac_bk_timer=`db2fapi_convert regular HeMuEdcaAcBkTimer $interface_index`
		he_mu_edca_ac_vi_ecwmin=`db2fapi_convert regular HeMuEdcaAcViEcwmin $interface_index`
		he_mu_edca_ac_vi_ecwmax=`db2fapi_convert regular HeMuEdcaAcViEcwmax $interface_index`
		he_mu_edca_ac_vi_aifsn=`db2fapi_convert regular HeMuEdcaAcViAifsn $interface_index`
		he_mu_edca_ac_vi_aci=`db2fapi_convert regular HeMuEdcaAcViAci $interface_index`
		he_mu_edca_ac_vi_timer=`db2fapi_convert regular HeMuEdcaAcViTimer $interface_index`
		he_mu_edca_ac_vo_aifsn=`db2fapi_convert regular HeMuEdcaAcVoAifsn $interface_index`
		he_mu_edca_ac_vo_aci=`db2fapi_convert regular HeMuEdcaAcVoAci $interface_index`
		he_mu_edca_ac_vo_ecwmin=`db2fapi_convert regular HeMuEdcaAcVoEcwmin $interface_index`
		he_mu_edca_ac_vo_ecwmax=`db2fapi_convert regular HeMuEdcaAcVoEcwmax $interface_index`
		he_mu_edca_ac_vo_timer=`db2fapi_convert regular HeMuEdcaAcVoTimer $interface_index`
		he_mcs_nss_rx_he_mcs_map_less_than_or_equal_80_mhz=`db2fapi_convert regular HeheMcsNssRxHeMcsMapLessThanOrEqual80Mhz $interface_index`
		he_mcs_nss_tx_he_mcs_map_less_than_or_equal_80_mhz=`db2fapi_convert regular HeheMcsNssTxHeMcsMapLessThanOrEqual80Mhz $interface_index`
		he_mcs_nss_rx_he_mcs_map_160_mhz=`db2fapi_convert regular HeheMcsNssRxHeMcsMap160Mhz $interface_index`
		he_mcs_nss_tx_he_mcs_map_160_mhz=`db2fapi_convert regular HeheMcsNssTxHeMcsMap160Mhz $interface_index`
		let he_phy_num_of_sounding_dimensions=$num_antennas-1
		he_phy_number_of_sounding_dimensions_for_less_than_or_equal_80mhz=$he_phy_num_of_sounding_dimensions
		[ "$channel_bandwidth" = "160MHz" ] && \
			he_phy_number_of_sounding_dimensions_for_greater_than_80mhz=$he_phy_num_of_sounding_dimensions
		he_capab=`convert_he_capab $interface_index $interface_name`
	fi
fi

### Auto CoC parameters
sCoCPower=`convert_auto_coc $auto_coc_enabled $num_antennas`
sCoCAutoCfg=`convert_coc_auto_config $interface_index`

### Power CoC parameters
sPCoCPower=`db2fapi_convert boolean WavePowerCocEnabled $interface_index`
sPCoCAutoCfg=`convert_power_coc_auto_config $interface_index`

### 20/40 coexistence parameters
# Only for 2.4Ghz.
coex_enable="0"
obss_interval="0"
scan_passive_dwell=""
scan_active_dwell=""
scan_passive_total_per_channel=""
scan_active_total_per_channel=""
channel_transition_delay_factor=""
scan_activity_threshold=""
obss_beacon_rssi_threshold=""

if [ "$frequency_band" = "2.4GHz" ]
then
	# Check if 20/40 coexistence is enabled
	coex_enable=`db2fapi_convert boolean CoexEnabled $interface_index`
	# Set parameters if 20/40 coexistence is enabled
	if [ "$coex_enable" = "1" ]
	then
		obss_interval=`db2fapi_convert regular CoexScanInterval $interface_index`
		scan_passive_dwell=`db2fapi_convert regular CoexPassiveDwell $interface_index`
		scan_active_dwell=`db2fapi_convert regular CoexActiveDwell $interface_index`
		scan_passive_total_per_channel=`db2fapi_convert regular CoexPassivePerCh $interface_index`
		scan_active_total_per_channel=`db2fapi_convert regular CoexActivePerCh $interface_index`
		channel_transition_delay_factor=`db2fapi_convert regular CoexTransDelay $interface_index`
		scan_activity_threshold=`db2fapi_convert regular CoexActivityThreshold $interface_index`
		obss_beacon_rssi_threshold=`db2fapi_convert regular CoexRssiThreshold $interface_index`
	fi
fi

### VAP limits
ap_max_num_sta=`iw $interface_name iwlwav gAPCapsMaxSTAs`
ap_max_num_sta=`echo ${ap_max_num_sta##*:}`

### AP scan parameters
acs_num_scans=`db2fapi_convert regular WaveACSnumScans $interface_index`
sScanParams=`convert_scan_params $interface_index`
sScanParamsBG=`convert_bg_scan_params $interface_index`
sScanModifFlags=`db2fapi_convert regular WaveScanModifier $interface_index`
sScanCalCwMasks=`convert_calibration_chan_width_for_scan $interface_index`
sScanExpTime=`db2fapi_convert regular WaveScanExpirationTime $interface_index`

### WAVE specific features parameters
sAlgoCalibrMask=`db2fapi_convert regular WaveOfflineCalibrationMask $interface_index`
sOnlineACM=`db2fapi_convert regular WaveOnlineCalibrationMask $interface_index`
Debug_SoftwareWatchdogEnable=`db2fapi_convert boolean WaveCompleteRecoveryEnabled $interface_index`
Interface=$interface_name
arp_iface0="eth0"
arp_iface1="eth1"
recovery_script_path="$RECOVERY_SCRIPT_PATH"
sFWRecovery=`convert_fw_recovery $interface_index`
[ "$(is_cdb_dual)" = "1" ] && [ "$interface_name" = "wlan2" ] && sFWRecovery=""
sNumMsduInAmsdu=`convert_num_msdu_in_amsdu $interface_index`
sTxopConfig=`convert_txop_enbale $interface_index`
sRadarRssiTh=""
assoc_rsp_rx_mcs_mask=`db2fapi_convert boolean WaveAssocRespRxMcsMask $interface_index`
ignore_40_mhz_intolerant=""
sMaxMpduLen=`db2fapi_convert regular WaveMaxMpduLen $interface_index`

# Set sRadarRssiTh only for 5GHz
[ "$frequency_band" = "5GHz" ] && sRadarRssiTh=`db2fapi_convert regular WaveRadarDetectRssiThreshold $interface_index`

# ignore_40_mhz_intolerant is set only if auto_channel=0, ieee80211n=1, channel_bandwidth=40MHz, coex_enable=0
if [ "$auto_channel" = "0" ] &&  [ "$ieee80211n" = "1" ] && [ "$channel_bandwidth" != "20MHz" ] && [ "$coex_enable" = "0" ]
then
	ignore_40_mhz_intolerant=`db2fapi_convert boolean WaveIgnore40MhzIntolerant $interface_index`
fi

### ACS parameters
acs_scan_mode=""
acs_chan_cust_penalty=""
acs_to_degradation=""
acs_grp_priorities_throughput=""
acs_grp_priorities_reach=""
acs_bw_comparison=""
acs_bw_threshold=""

acs_numbss_info_file="${CONF_DIR}/acs_numbss_info_${interface_name}.txt"
acs_numbss_coeflist=`db2fapi_convert regular WaveACSNumbssCoef $interface_index`
acs_smart_info_file=${CONF_DIR}/acs_smart_info_${interface_name}.txt
acs_history_file=${CONF_DIR}/acs_history_${interface_name}.txt
acs_chan_noise_penalty=`db2fapi_convert regular WaveAcsChanNoisePenalty $interface_index`
acs_vht_dynamic_bw=`db2fapi_convert boolean WaveAcsVhtDynamicBw $interface_index`
acs_policy=`db2fapi_convert boolean WaveAcsPolicy $interface_index`
acs_penalty_factors="1 0 0 0 1 0 1 0 1 1 0"
acs_fallback_chan=`db2fapi_convert regular WaveAcsFallbackChannel $interface_index`

acs_chan_cust_penalty=`db2fapi_convert regular WaveAcsChanCustPenalty $interface_index`
acs_to_degradation=`db2fapi_convert regular WaveAcsToDegradation $interface_index`
acs_grp_priorities_throughput=`db2fapi_convert regular WaveAcsGrpPrioritiesThroughput $interface_index`
acs_grp_priorities_reach=`db2fapi_convert regular WaveAcsGrpPrioritiesReach $interface_index`
acs_bw_comparison=`db2fapi_convert boolean WaveAcsBwComparison $interface_index`
acs_bw_threshold=`db2fapi_convert regular WaveAcsBwThreshold $interface_index`

externally_managed=`db2fapi_convert boolean WaveExternallyManaged 0`
if [ "$externally_managed" = "1" ]
then
	acs_scan_mode="1"
else
	# If channel=acs_smart, set acs_scan_mode
	[ "$channel" = "acs_smart" ] && acs_scan_mode=`db2fapi_convert boolean WaveAcsScanMode $interface_index`
fi
sAcsUpdateTo=`db2fapi_convert regular WaveAcsUpdateTimeout $interface_index`

### Radar simulation debug
dfs_debug_chan=`convert_radar_simulation_debug_channel $interface_index`
### Radar Sub Band DFS
### currently only for gen5 - disabled for gen6 remove
sub_band_dfs=""
if [ "$frequency_band" = "5GHz" ] && [ "$ieee80211h" = "1" ]
then
	### change the WaveSubBandDfs DB val in hw init for gen6
	[ "$chip_id" = "$GEN5B_CHIP_ID" ] && sub_band_dfs=`db2fapi_convert regular WaveSubBandDfs $interface_index`
fi

### Set beamforming mode
sBfMode=`convert_bf_mode $interface_index`

### Set detection thresholds
sInterfDetThresh=`db2fapi_convert regular WaveInterfererDetectionThreshold $interface_index`

### Set RTS Signling BW
sRTSmode=`convert_rts_signaling_bw $interface_index`

### set Fixed Rate values ###
sFixedRateCfg=`convert_fixed_rate $interface_index`
## Set CCA Thresholds
sCcaTh=`db2fapi_convert regular WaveCcaTh $interface_index`
### Set Adapt CCA
sCcaAdapt=`db2fapi_convert regular WaveCcaAdapt $interface_index`

sFastDrop=`db2fapi_convert boolean WaveVendorFastDrop $interface_index`

### Set atf params
atf_comment="___ATF_GENERAL_PARAMETERS___###"
atf_enabled=`db2fapi_convert boolean WaveAtfEnabled $interface_index`
atf_type=`convert_atf_type $interface_index $interface_name $atf_enabled`
atf_algorithm=`convert_atf_algorithm $interface_index`
atf_interval=`db2fapi_convert regular WaveAtfInterval $interface_index`
atf_free_time=`db2fapi_convert regular WaveAtfFreeTime $interface_index`
atf_vap_enabled=`db2fapi_convert boolean WaveAtfVapEnabled $interface_index`
atf_station_enabled=`db2fapi_convert boolean WaveAtfStationEnabled $interface_index`
atf_radio_stations_and_weights=`db2fapi_convert boolean WaveAtfRadioStationsAndWeights $interface_index`

## set StaticPlanner params
## update the StaticPlanner common part
if [ "$chip_id" = "$GEN6_CHIP_ID" ]; then
		sMuStatPlanCfg=`convert_static_planner_common $interface_index`
		user_sp_index=0
		user_static_planner_config=""

		## update the StaticPlanner users part - only 4 users.
		sp_num_of_participating_stations=`db2fapi_convert regular WaveSPDlComNumOfParticipatingStations $interface_index`
		while [  $user_sp_index -lt $sp_num_of_participating_stations ] && [ $sp_num_of_participating_stations -le 4 ]; do
			let user_sp_index=user_sp_index+1
			user_static_planner_config=`convert_static_planner_user $interface_index $user_sp_index`
			sMuStatPlanCfg="$sMuStatPlanCfg$user_static_planner_config"
		done
fi

# Fixed LTF and GI configuration
sFixedLtfGi=""
sFixedLtfGi=`convert_fixed_ltf_gi $interface_index`

# Add the console driver debug level command to the drv_config_pre_up file only for wlan0 to configure the whole system.
driver_debug=`convert_driver_debug_level $interface_index cdebug`

### MU MIMO parameter
sMuOperation=""
sMuOperation=`db2fapi_convert boolean WaveMuOperation $interface_index`

if [ "$chip_id" = "$GEN6_CHIP_ID" ]; then

	### Enable Disable HE-MU ##
	sHeMuOperation=""
	sHeMuOperation=`db2fapi_convert boolean WaveHeMuOperationEnable $interface_index`

	### Enable Disable Test Bus per card (for Dual only wlan0 exist) in future will be per interface##
	sEnableTestBus=""
	set_test_bus=1
	if [ "$(is_cdb_dual)" = "1" ]
	then
		if [ "$interface_name" = "wlan2" ];
		then
			set_test_bus=0
			print2log $interface_index "Test Bus" "$script_name WaveTestBusEnable is enable only for wlan0 in CDB Dual mode" 
		fi
	fi
	if [ $set_test_bus -eq 1 ]; then
		sEnableTestBus=`db2fapi_convert boolean WaveTestBusEnable $interface_index`
		print2log $interface_index "Test Bus" "$script_name $interface_name WaveTestBusEnable=$sEnableTestBus" 
	fi
fi

### testbed mode
testbed_mode=`db2fapi_convert boolean WaveTestBedMode $interface_index`

### disable radar detection event in the FW ( for beerocks with sub_dfs as W/A should be enable)
s11hRadarDetect=`db2fapi_convert boolean Wave11hRadarDetect $interface_index`

## DMR feature always off on wave600
sDmrConfig=""
[ "$chip_id" = "$GEN6_CHIP_ID" ] && sDmrConfig=0

# Write the parameters to the configuration files.
# Update current driver values with new values.
update_driver_params_file "$driver_params" $driver_new_values $driver_current_values

# Check if a hostapd parameter was changed.
hostapd_changed=`check_param_changed "$hostapd_params"`

# Check if a drvhlpr parameter was changed.
drvhlpr_changed=`check_param_changed "$drvhlpr_params"`

# If a hostapd parameter was changed, remove radio parameters from hostapd_phy temp conf file and write all of them with updated values.
if [ "$hostapd_changed" ]
then
	hostapd_phy_conf_name=${CONF_DIR}/hostapd_phy_${interface_name}_${pid}.conf
	# Remove the hostapd radio parameters.
	remove_params_from_conf "###$comment ###$he_capab_comment $hostapd_params" $hostapd_phy_conf_name $HOSTAPD_PHY_CONF_PREFIX

	# Write the hostapd radio parameters.
	set_conf_param hostapd_phy comment otf $pid $interface_name comment "$comment"
	set_conf_param hostapd_phy regular otf $pid $interface_name testbed_mode "$testbed_mode"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name country_code "$country_code"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name hw_mode "$hw_mode"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211d "$ieee80211d"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name channel "$channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name preamble "$preamble"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name rts_threshold "$rts_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211n "$ieee80211n"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_capab "$ht_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_tx_bf_capab "$ht_tx_bf_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_rifs "$ht_rifs"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211ac "$ieee80211ac"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_oper_chwidth "$vht_oper_chwidth"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_capab "$vht_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vendor_vht "$vendor_vht"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_oper_centr_freq_seg0_idx "$vht_oper_centr_freq_seg0_idx"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ap_max_num_sta "$ap_max_num_sta"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_num_scans "$acs_num_scans"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211h "$ieee80211h"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name obss_interval "$obss_interval"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_passive_dwell "$scan_passive_dwell"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_active_dwell "$scan_active_dwell"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_passive_total_per_channel "$scan_passive_total_per_channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_active_total_per_channel "$scan_active_total_per_channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name channel_transition_delay_factor "$channel_transition_delay_factor"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_activity_threshold "$scan_activity_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name obss_beacon_rssi_threshold "$obss_beacon_rssi_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_numbss_info_file "$acs_numbss_info_file"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_numbss_coeflist "$acs_numbss_coeflist"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_smart_info_file "$acs_smart_info_file"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_history_file "$acs_history_file"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name dfs_debug_chan "$dfs_debug_chan"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name chanlist "$chanlist"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name assoc_rsp_rx_mcs_mask "$assoc_rsp_rx_mcs_mask"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ignore_40_mhz_intolerant "$ignore_40_mhz_intolerant"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_chan_noise_penalty "$acs_chan_noise_penalty"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_vht_dynamic_bw "$acs_vht_dynamic_bw"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_policy "$acs_policy"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_penalty_factors "$acs_penalty_factors"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_fallback_chan "$acs_fallback_chan"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_scan_mode "$acs_scan_mode"
	[ "$acs_chan_cust_penalty" != "" ] && set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_chan_cust_penalty "$acs_chan_cust_penalty"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_to_degradation "$acs_to_degradation"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_grp_priorities_throughput "$acs_grp_priorities_throughput"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_grp_priorities_reach "$acs_grp_priorities_reach"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_bw_comparison "$acs_bw_comparison"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_bw_threshold "$acs_bw_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name sub_band_dfs "$sub_band_dfs"
	
	if [ "$chip_id" = "$GEN6_CHIP_ID" ]; then
		set_conf_param hostapd_phy comment otf $pid $interface_name comment "$he_capab_comment"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211ax "$ieee80211ax"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_capab "$he_capab"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_maximum_number_of_fragmented_msdus_amsdus "$he_mac_maximum_number_of_fragmented_msdus_amsdus"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_multi_tid_aggregation_rx_support "$he_mac_multi_tid_aggregation_rx_support"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_maximum_a_mpdu_length_exponent "$he_mac_maximum_a_mpdu_length_exponent"
		#set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_ack_enabled_aggregation_support "$he_mac_ack_enabled_aggregation_support"
		#set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_a_msdu_in_a_mpdu_support "$he_mac_a_msdu_in_a_mpdu_support"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_multi_tid_aggregation_tx_support "$he_mac_multi_tid_aggregation_tx_support"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mac_om_control_ul_mu_data_disable_rx_support "$he_mac_om_control_ul_mu_data_disable_rx_support"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_channel_width_set "$he_phy_channel_width_set"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_stbc_tx_less_than_or_equal_80mhz "$he_phy_stbc_tx_less_than_or_equal_80mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_dcm_max_constellation_tx "$he_phy_dcm_max_constellation_tx"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_dcm_max_constellation_rx "$he_phy_dcm_max_constellation_rx"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_dcm_max_nss_tx "$he_phy_dcm_max_nss_tx"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_phy_dcm_max_nss_rx "$he_phy_dcm_max_nss_rx"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_nsts "$he_ppe_thresholds_nsts"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_highest_nss_supported_m1 "$he_mcs_nss_highest_nss_supported_m1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_highest_mcs_supported "$he_mcs_nss_highest_mcs_supported"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_nss_m1 "$he_ppe_thresholds_nss_m1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ru_index_bitmask "$he_ppe_thresholds_ru_index_bitmask"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts1_for_ru0 "$he_ppe_thresholds_ppet8_for_nsts1_for_ru0"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts1_for_ru1 "$he_ppe_thresholds_ppet8_for_nsts1_for_ru1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts1_for_ru2 "$he_ppe_thresholds_ppet8_for_nsts1_for_ru2"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts1_for_ru3 "$he_ppe_thresholds_ppet8_for_nsts1_for_ru3"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts2_for_ru0 "$he_ppe_thresholds_ppet8_for_nsts2_for_ru0"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts2_for_ru1 "$he_ppe_thresholds_ppet8_for_nsts2_for_ru1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts2_for_ru2 "$he_ppe_thresholds_ppet8_for_nsts2_for_ru2"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts2_for_ru3 "$he_ppe_thresholds_ppet8_for_nsts2_for_ru3"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts3_for_ru0 "$he_ppe_thresholds_ppet8_for_nsts3_for_ru0"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts3_for_ru1 "$he_ppe_thresholds_ppet8_for_nsts3_for_ru1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts3_for_ru2 "$he_ppe_thresholds_ppet8_for_nsts3_for_ru2"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts3_for_ru3 "$he_ppe_thresholds_ppet8_for_nsts3_for_ru3"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts4_for_ru0 "$he_ppe_thresholds_ppet8_for_nsts4_for_ru0"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts4_for_ru1 "$he_ppe_thresholds_ppet8_for_nsts4_for_ru1"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts4_for_ru2 "$he_ppe_thresholds_ppet8_for_nsts4_for_ru2"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_ppe_thresholds_ppet8_for_nsts4_for_ru3 "$he_ppe_thresholds_ppet8_for_nsts4_for_ru3"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_bss_color "$he_operation_bss_color"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_default_pe_duration "$he_operation_default_pe_duration"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_txop_duration_rts_threshold "$he_operation_txop_duration_rts_threshold"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_1ss "$he_operation_max_mcs_for_1ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_2ss "$he_operation_max_mcs_for_2ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_3ss "$he_operation_max_mcs_for_3ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_4ss "$he_operation_max_mcs_for_4ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_5ss "$he_operation_max_mcs_for_5ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_6ss "$he_operation_max_mcs_for_6ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_7ss "$he_operation_max_mcs_for_7ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_max_mcs_for_8ss "$he_operation_max_mcs_for_8ss"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_operation_er_su_disable "$he_operation_er_su_disable"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_qos_info_queue_request "$he_mu_edca_qos_info_queue_request"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_be_aifsn "$he_mu_edca_ac_be_aifsn"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_be_ecwmin "$he_mu_edca_ac_be_ecwmin"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_be_ecwmax "$he_mu_edca_ac_be_ecwmax"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_be_timer "$he_mu_edca_ac_be_timer"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_bk_aifsn "$he_mu_edca_ac_bk_aifsn"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_bk_aci "$he_mu_edca_ac_bk_aci"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_bk_ecwmin "$he_mu_edca_ac_bk_ecwmin"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_bk_ecwmax "$he_mu_edca_ac_bk_ecwmax"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_bk_timer "$he_mu_edca_ac_bk_timer"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vi_ecwmin "$he_mu_edca_ac_vi_ecwmin"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vi_ecwmax "$he_mu_edca_ac_vi_ecwmax"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vi_aifsn "$he_mu_edca_ac_vi_aifsn"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vi_aci "$he_mu_edca_ac_vi_aci"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vi_timer "$he_mu_edca_ac_vi_timer"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vo_aifsn "$he_mu_edca_ac_vo_aifsn"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vo_aci "$he_mu_edca_ac_vo_aci"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vo_ecwmin "$he_mu_edca_ac_vo_ecwmin"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vo_ecwmax "$he_mu_edca_ac_vo_ecwmax"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mu_edca_ac_vo_timer "$he_mu_edca_ac_vo_timer"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_rx_he_mcs_map_less_than_or_equal_80_mhz "$he_mcs_nss_rx_he_mcs_map_less_than_or_equal_80_mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_tx_he_mcs_map_less_than_or_equal_80_mhz "$he_mcs_nss_tx_he_mcs_map_less_than_or_equal_80_mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_rx_he_mcs_map_160_mhz "$he_mcs_nss_rx_he_mcs_map_160_mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name he_mcs_nss_tx_he_mcs_map_160_mhz "$he_mcs_nss_tx_he_mcs_map_160_mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name \
					he_phy_number_of_sounding_dimensions_for_less_than_or_equal_80mhz \
					"$he_phy_number_of_sounding_dimensions_for_less_than_or_equal_80mhz"
		set_conf_param hostapd_phy regular no_otf $pid $interface_name \
					he_phy_number_of_sounding_dimensions_for_greater_than_80mhz \
					"$he_phy_number_of_sounding_dimensions_for_greater_than_80mhz"
	fi

fi

# If a drvhlpr parameter was changed, re-write the drvhlpr conf file.
if [ "$drvhlpr_changed" ]
then
	drvhlpr_conf_name=${CONF_DIR}/drvhlpr_${interface_name}_${pid}.conf
	# Delete the drvhlpr conf file and re-write it.
	rm -f $drvhlpr_conf_name

	set_conf_param drvhlpr regular no_otf $pid $interface_name Debug_SoftwareWatchdogEnable "$Debug_SoftwareWatchdogEnable"
	set_conf_param drvhlpr regular no_otf $pid $interface_name Interface "$Interface"
	set_conf_param drvhlpr regular no_otf $pid $interface_name arp_iface0 "$arp_iface0"
	set_conf_param drvhlpr regular no_otf $pid $interface_name arp_iface1 "$arp_iface1"
	set_conf_param drvhlpr regular no_otf $pid $interface_name recovery_script_path "$recovery_script_path"
	touch ${CONF_DIR}/${RESTART_DRVHLPR_FLAG}_${interface_name}
fi

# Check if a driver OTF parameter was changed.
driver_otf_changed=`check_param_changed "$driver_otf_params"`

# If a driver OTF parameter was changed, remove radio OTF parameters from drv_config_post_up temp conf file and write all of them with updated values.
if [ "$driver_otf_changed" ]
then
	drv_config_post_up_conf_name=${CONF_DIR}/drv_config_post_up_${interface_name}_${pid}.conf
	# Remove the driver radio OTF parameters.
	remove_params_from_conf "$driver_otf_params" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX

	set_conf_param drv_config_post_up iw otf $pid $interface_name sCoCPower "$sCoCPower"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sEnableRadio "$sEnableRadio"
	# TBD- currently not supported on 6.0.X driver
	#set_conf_param drv_config_post_up iw otf $pid $interface_name sPCoCPower "$sPCoCPower"
	#set_conf_param drv_config_post_up iw otf $pid $interface_name sPCoCAutoCfg "$sPCoCAutoCfg"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sTxopConfig "$sTxopConfig"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sRadarRssiTh "$sRadarRssiTh"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sAcsUpdateTo "$sAcsUpdateTo"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sRTSmode "$sRTSmode"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sFixedRateCfg "$sFixedRateCfg"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sInterfDetThresh "$sInterfDetThresh"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sCcaTh "$sCcaTh"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sCcaAdapt "$sCcaAdapt"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sFastDrop "$sFastDrop"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sFixedLtfGi "$sFixedLtfGi"
	if [ "$chip_id" = "$GEN6_CHIP_ID" ]; then
		set_conf_param drv_config_post_up iw otf $pid $interface_name sMuStatPlanCfg "$sMuStatPlanCfg"
		set_conf_param drv_config_post_up iw otf $pid $interface_name sHeMuOperation "$sHeMuOperation"
		[ "$sEnableTestBus" != "" ] && set_conf_param drv_config_post_up iw otf $pid $interface_name sEnableTestBus "$sEnableTestBus"
		set_conf_param drv_config_post_up iw otf $pid $interface_name s11hRadarDetect "$s11hRadarDetect"
	fi
fi

# Check if a hostapd atf parameter was changed.
hostapd_atf_changed=`check_atf_param_changed Atf ${IN_CONF}`

if [ "$hostapd_atf_changed" = "1" ]
then
	hostapd_atf_general_conf_name=${CONF_DIR}/hostapd_atf_general_${interface_name}_${pid}.conf

	remove_params_from_conf "###$atf_comment $hostapd_atf_params" $hostapd_atf_general_conf_name $HOSTAPD_ATF_GENERAL_CONF_PREFIX
	# Write the hostapd radio parameters.
	set_conf_param hostapd_atf_general comment otf $pid $interface_name comment "$atf_comment"
	# for enabling atf debug for Driver un-comment the below line.
	set_conf_param hostapd_atf_general atf otf $pid $interface_name debug "1"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name distr_type "$atf_type"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name weighted_type "0"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name algo_type "$atf_algorithm"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name interval "$atf_interval"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name free_time "$atf_free_time"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name vap_enabled "$atf_vap_enabled"
	set_conf_param hostapd_atf_general atf otf $pid $interface_name station_enabled "$atf_station_enabled"
	# Only if vap disabled and station enabled we need the stations list under radio.
	if [ "$atf_enabled" = "1" ] && [ "$atf_vap_enabled" = "0" ] && [ "$atf_station_enabled" = "1" ]
	then
		convert_atf_stations_and_weights $pid $interface_name hostapd_atf_general "$atf_radio_stations_and_weights"
	fi
fi

# Check if a driver pre-up parameter was changed.
driver_changed=`check_param_changed "$driver_params"`


# If a driver parameter was changed, remove radio parameters from drv_config_pre_up temp conf file and write all of them with updated values.
if [ "$driver_changed" ]
then

	drv_config_pre_up_conf_name=${CONF_DIR}/drv_config_pre_up_${interface_name}_${pid}.conf
	# Remove the driver radio parameters.
	remove_params_from_conf "$driver_params" $drv_config_pre_up_conf_name $DRIVER_PRE_UP_CONF_PREFIX

	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sPowerSelection "$sPowerSelection"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sCoCAutoCfg "$sCoCAutoCfg"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sAlgoCalibrMask "$sAlgoCalibrMask"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sOnlineACM "$sOnlineACM"
	set_conf_param drv_config_pre_up proc no_otf $pid $interface_name  "/proc/net/mtlk_log/debug" "$driver_debug"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sScanParams "$sScanParams"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sScanParamsBG "$sScanParamsBG"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sScanModifFlags "$sScanModifFlags"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sScanCalCwMasks "$sScanCalCwMasks"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sScanExpTime "$sScanExpTime"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sFWRecovery "$sFWRecovery"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sQAMplus "$sQAMplus"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sNumMsduInAmsdu "$sNumMsduInAmsdu"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sMaxMpduLen "$sMaxMpduLen"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sBfMode "$sBfMode"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sInterfDetThresh "$sInterfDetThresh"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sMuOperation "$sMuOperation"
	set_conf_param drv_config_pre_up iw no_otf $pid $interface_name sDmrConfig "$sDmrConfig"
fi

# If operating standard was changed, set opmode_notif for all VAPs of this radio.
# If mode is ANAC, set value to 1, else set to 0
# Check if OperatingStandards is included in the fapi_wlan_wave_in.conf
if test `grep OperatingStandards_${radio_index} ${IN_CONF}`
then
	opmode_notif="$ieee80211ac"
	if [ -e ${VAPS_LIST}_${interface_name} ]
	then
		while read current_vap
		do
			prepare_confs $current_vap $interface_name $pid $VAP
			set_conf_param hostapd_vap regular no_otf $pid $current_vap "opmode_notif" "$opmode_notif"
		done < ${VAPS_LIST}_${interface_name}
	else
		prepare_confs $interface_name $interface_name $pid $VAP
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "opmode_notif" "$opmode_notif"
	fi
fi

# If hostapd debug level or output were changed, set restart flag
if test `grep WaveHostapdLoglevel_${radio_index} ${IN_CONF}` || test `grep WaveHostapdLogOutput_${radio_index} ${IN_CONF}`
then
	echo "restart_${interface_name}=yes" >> ${CONF_DIR}/${RESTART_FLAG}_${interface_name}
fi

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Configure the logger streams
(. ${ETC_PATH}/fapi_wlan_wave_set_logger_params.sh $interface_name $interface_index $pid)

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/radio_set_out_conf_${interface_name}

print2log $interface_index DEBUG "$script_name done"
timestamp $interface_index "$script_name:$interface_name:done"
