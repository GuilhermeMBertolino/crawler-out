state="off"

#set soft_state on when wifi soft swich status of any band on
soft_state="off"
#set old_soft_state on when last wifi soft swich status of any band on
old_soft_state="off"

#uci commit flag
need_commit=0

wifi_get_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local iface="$1"

	config_get_bool enable $1 enable
	config_get_bool lastenable $1 lastenable
	config_get mode $1 mode
	config_get guest $1 guest
	if [ "$mode" = "ap" -a -z "$guest" ]; then
		if [ "$enable" = "1" ]; then
			soft_state="on"
		fi

		if [ "$lastenable" = "1" ]; then
			old_soft_state="on"
		fi
	fi
}

wifi_set_led() {
	local band="$1"
	local ledstatus="$2"
	local ledtype=""

	if [ "$band" = "2g" ]; then
		ledtype="WIFI2G"
	elif [ "$band" = "5g" ]; then
		ledtype="WIFI5G"
	fi

	if [ -n "$ledtype" -a -n "$ledstatus" ]; then
		if [ "$ledstatus" = "on" ]; then
			ledcli "${ledtype}_ON"
		else
			ledcli "${ledtype}_OFF"
		fi
	fi
}

wifi_set_all_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local band
	local device
	local iface="$1"
	local dev="$2"
	local value="$3"

	config_get enable $iface enable
	config_get lastenable $iface lastenable
	config_get mode $iface mode
	config_get guest $iface guest
	config_get device $iface device
	if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
		if [ "$value" != "on" ]; then
			value="off"
		fi

		if [ "$enable" != "$value" ]; then
			uci set wireless.$iface.enable="$value"
			uci set wireless.$dev.disabled_all="$enable"
			need_commit=1
		fi
		if [ "$lastenable" != "$enable" ]; then
			uci set wireless.$iface.lastenable="$enable"
			need_commit=1
		fi

		config_get band $dev band
		wifi_set_led "$band" "$value"
	fi
}

wifi_restore_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local band
	local iface="$1"
	local dev="$2"

	config_get enable $iface enable
	config_get lastenable $iface lastenable
	config_get mode $iface mode
	config_get guest $iface guest
	config_get device $iface device
	if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
		if [ -n "$lastenable" -a "$enable" != "$lastenable" ]; then
			uci set wireless.$iface.enable="$lastenable"
			uci set wireless.$dev.disabled_all="$enable"
			need_commit=1
		fi

		config_get band $dev band
		wifi_set_led "$band" "$lastenable"
	fi
}

obtain_state() {
	local disabled disabled_all
	config_get disabled $1 disabled
	config_get disabled_all $1 disabled_all

	if [ "$disabled" = "off" -a "$disabled_all" = "off" ]; then
		state="on"
	fi
}

do_toggle() {
	local dev="$1"
	local disabled disabled_all band
	config_get disabled $1 disabled
	config_get disabled_all $1 disabled_all
	config_get band $1 band

	if [ "$state" != "$disabled" ]; then
		uci set wireless.$dev.disabled=$state
		need_commit=1
	fi

	if [ "$soft_state" = "on" ]; then
		if [ "$state" = "on" ]; then
			ledcli WIFI2G_OFF
			ledcli WIFI5G_OFF
			ledcli WPS_OFF
		else
			if [ "$band" = "2g" -a "$disabled_all" = "off" ]; then
				ledcli WIFI2G_ON
			fi
			if [ "$band" = "5g" -a "$disabled_all" = "off" ]; then
				ledcli WIFI5G_ON
			fi
		fi
	else
		# if the old soft swich status all closed, set it open
		if [ "$old_soft_state" != "on" ]; then
			config_foreach wifi_set_all_soft_state wifi-iface "$dev" "on"
		else
			config_foreach wifi_restore_soft_state wifi-iface "$dev"
		fi
	fi
}


toggle_wireless(){
	config_load wireless
	config_foreach wifi_get_soft_state wifi-iface
	config_foreach obtain_state wifi-device
	config_foreach do_toggle wifi-device

	if [ $need_commit -eq 1 ]; then
		wifi_commit
	fi
}

is_calibrated(){
	[ -f /tmp/dut_is_not_cal ] && echo "false" || echo "true"
}

check(){
	if [ "$(is_calibrated)" = "false" ]; then
		echo "wifi button will lose function now!" >/dev/console
		echo "wifi button check mask is 0x02,see tddp_cmd.h">/dev/console
		if [ ! -e /tmp/btn_check ];then
			echo 0 > /tmp/btn_check
		fi
		ret=$(cat /tmp/btn_check)
		ret=$(($ret | 0x2))
		echo $ret > /tmp/btn_check
	elif [ $SEEN -lt 2 ]; then
		echo "" > /dev/console
		echo "WPS PUSH BUTTON EVENT DETECTED" > /dev/console
		local dir="/var/run/hostapd"
		local dev vap_dir

		[ -d $dir ] || continue

		config_load wireless
		for vap_dir in $dir/wlan*; do
			dev=${vap_dir#"$dir/"}

			# check wlan config
			local hwb_disabled web_disabled
			config_get_bool hwb_disabled "$dev" disabled       #hardware switch
			config_get_bool web_disabled "$dev" disabled_all   #software switch
			if [ "$hwb_disabled" = "0" ] && [ "$web_disabled" = "0" ]; then

				vif=wl01
				if [ "$dev" = "wlan2" ]; then
					vif=wl21
				fi

				config_get_bool enable "$vif" enable
				if [ "$enable" = "0" ]; then
					continue
				fi

				config_get encryption "$vif" encryption
				config_get psk_version "$vif" psk_version
				config_get psk_cipher "$vif" psk_cipher
				config_get_bool wps "$vif" wps 0
				config_get_bool hidden "$vif" hidden 0

				if [ "$wps" = "1" ] && [ "$hidden" = "0" ]; then
					if [ "$encryption" = "none" ] || [ "$encryption" = "psk" -a "$psk_cipher" != "tkip" -a "$psk_version" != "wpa" ]; then
						local hostapd_cli_name=hostapd_cli_"$dev"
						if [ ! -e /tmp/$hostapd_cli_name ]; then
							cp -s /opt/lantiq/bin/hostapd_cli /tmp/$hostapd_cli_name
						fi
						echo "Start PBC on $dev" > /dev/console
						/tmp/$hostapd_cli_name -i"$dev" wps_pbc "$dev"
					fi
				fi
			fi
		done
	elif [ $SEEN -ge 2 ]; then
		echo "" > /dev/console
		echo "Wifi BUTTON EVENT DETECTED" > /dev/console
		toggle_wireless
		wifi &
	fi
}

# this button is reused by WPS & WIFI
# release time  < 2s: WPS
# release time >= 2s: WIFI
[ "$ACTION" = "released" -a "$BUTTON" = "wps" ] && check
