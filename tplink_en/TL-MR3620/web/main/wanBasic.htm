<script language="javascript" type="text/javascript">
</script>
<h3 id="et1">Internet</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div id="div_detectStatus" class="pure-control-group nd">
            <b id="t_netstatus">Internet Status:</b>
            <input type="text" readonly="ture" class="tp-input-text l" style="padding-left:0" id="internetStatus" />
        </div>
        <b class="T_conntype">Internet Connection Type:</b>
        <select id="linkType" class="xl"></select>

        <div id="PPPoEBasic" class="nd">
            <div><b class="T_pppusr">Username:</b>
                <input type="text" class="xl" id="usrPPPoE" maxlength="255" />
            </div>
            <div><b class="T_ppppwd">Password:</b>
                <input type="password" class="xl" id="pwdPPPoE" maxlength="255" />
            </div>
        </div>

        <div id="PPPoABasic" class="nd">
            <div><b class="T_pppusr">Username:</b>
                <input type="text" class="xl" id="usrPPPoA" maxlength="255" />
            </div>
            <div><b class="T_ppppwd">Password:</b>
                <input type="password" class="xl" id="pwdPPPoA" maxlength="255" />
            </div>
        </div>

        <div id="StaticIpBasic" class="nd">
            <div><b class="T_ipaddr">IP Address:</b>
                <input type="text" class="xl ip-address" id="ipStaticIp" />
            </div>
            <div><b class="T_netmask">Subnet Mask:</b>
                <input type="text" class="xl ip-address" id="maskStaticIp" />
            </div>
            <div><b class="T_defgw">Default Gateway:</b>
                <input type="text" class="xl ip-address" id="gwStaticIp" />
            </div>
            <div><b class="T_dns">Primary DNS:</b>
                <input type="text" class="xl ip-address" id="priDnsStaticIp" />
            </div>
            <div><b class="T_secdns">Secondary DNS:</b>
                <input type="text" class="xl ip-address" id="secDnsStaticIp" />
                <span class="T_optional">(Optional)</span>
            </div>
        </div>

        <div id="IPoABasic" class="nd">
            <div><b class="T_ipaddr">IP Address:</b>
                <input type="text" class="xl ip-address" id="ipIPoA" />
            </div>
            <div><b class="T_netmask">Subnet Mask:</b>
                <input type="text" class="xl ip-address" id="maskIPoA" />
            </div>
            <div><b class="T_defgw">Default Gateway:</b>
                <input type="text" class="xl ip-address" id="gwIPoA" />
            </div>
            <div><b class="T_dns">Primary DNS:</b>
                <input type="text" class="xl ip-address" id="priDnsIPoA" />
            </div>
            <div><b class="T_secdns">Secondary DNS:</b>
                <input type="text" class="xl ip-address" id="secDnsIPoA" />
                <span class="T_optional">(Optional)</span>
            </div>
        </div>

        <div id="PptpBasic" class="nd">
            <div><b class="T_username">Username:</b>
                <input type="text" class="xl" id="usrPptp" size="15" maxlength="255" />
            </div>
            <div><b class="T_passwd">Password:</b>
                <input type="password" class="xl" id="pwdPptp" size="15" maxlength="255" />
            </div>
            <div>
                <b class="T_addrMode">DNS Address Mode:</b>
                <input type="radio" name="dnsModePptp" id="dnsModeDynPptp" checked />
                <label class="T_dynip">Dynamic IP</label>
                <input type="radio" name="dnsModePptp" id="dnsModeStaPptp" />
                <label class="T_staip">Static IP</label>
            </div>
            <div>
                <b class="T_srvIpName">Server IP Address/Name:</b>
                <input type="text" class="xl" id="serverIpOrNamePptp" />
            </div>
            <div id="dnsModeParamStaPptp" style="display: none;">
                <div><b class="T_ipaddr">IP Address:</b>
                    <input type="text" class="xl ip-address" id="ipPptp" />
                </div>
                <div><b class="T_netmask">Subnet Mask:</b>
                    <input type="text" class="xl ip-address" id="maskPptp" />
                </div>
                <div><b class="T_gateway">Default Gateway:</b>
                    <input type="text" class="xl ip-address" id="gwPptp" />
                </div>
                <div><b class="T_dns">Primary DNS:</b>
                    <input type="text" class="xl ip-address" id="priDnsPptp" />
                </div>
                <div><b class="T_secdns">Secondary DNS:</b>
                    <input type="text" class="xl ip-address" id="secDnsPptp" />
                    <span class="T_optional">(Optional)</span>
                </div>
            </div>
        </div>

        <div id="L2tpBasic" class="nd">
            <div><b class="T_username">Username:</b>
                <input type="text" class="xl" id="usrL2tp" size="15" maxlength="255" />
            </div>
            <div><b class="T_passwd">Password:</b>
                <input type="password" class="xl" id="pwdL2tp" size="15" maxlength="255" />
            </div>
            <div>
                <b class="T_addrMode">DNS Address Mode:</b>
                <input type="radio" name="dnsModeL2tp" id="dnsModeDynL2tp" checked />
                <label class="T_dynip">Dynamic IP</label>
                <input type="radio" name="dnsModeL2tp" id="dnsModeStaL2tp" />
                <label class="T_staip">Static IP</label>
            </div>
            <div>
                <b class="T_srvIpName">Server IP Address/Name:</b>
                <input type="text" class="xl" id="serverIpOrNameL2tp" />
            </div>
            <div id="dnsModeParamStaL2tp" style="display: none;">
                <div><b class="T_ipaddr">IP Address:</b>
                    <input type="text" class="xl ip-address" id="ipL2tp" />
                </div>
                <div><b class="T_netmask">Subnet Mask:</b>
                    <input type="text" class="xl ip-address" id="maskL2tp" />
                </div>
                <div><b class="T_gateway">Default Gateway:</b>
                    <input type="text" class="xl ip-address" id="gwL2tp" />
                </div>
                <div><b class="T_dns">Primary DNS:</b>
                    <input type="text" class="xl ip-address" id="priDnsL2tp" />
                </div>
                <div><b class="T_secdns">Secondary DNS:</b>
                    <input type="text" class="xl ip-address" id="secDnsL2tp" />
                    <span class="T_optional">(Optional)</span>
                </div>
            </div>
        </div>
        <button type="submit" class="green T_save" id="saveBtn">Save</button>
    </form>
</div>

<script language="javascript" type="text/javascript">
(function() {
    var linkTypeOpt = {
       "ETH": "<option value='PPPoE'>PPPoE</option><option value='DynamicIp' text='" + s_str.dynip + "'>" + s_str.dynip + "</option><option value='StaticIp' text='" + s_str.staip + "'>" + s_str.staip + "</option>",
	   "WISP": "<option value='PPPoE'>PPPoE</option><option value='DynamicIp' text='" + s_str.dynip + "'>" + s_str.dynip + "</option><option value='StaticIp' text='" + s_str.staip + "'>" + s_str.staip + "</option>"
    }

    function initLinkType(sysMode, type) {
        $("#linkType").empty().append(linkTypeOpt[sysMode]);
        if (sysMode == "ETH" || sysMode == "WISP") {
            if (INCLUDE_PPTP) $("#linkType").append("<option value='Pptp'>PPTP</option>");
            if (INCLUDE_L2TP) $("#linkType").append("<option value='L2tp'>L2TP</option>");
        }
        if (type != undefined) {
            $("#linkType option[value='" + type + "']").prop("selected", "selected");
        }
        if ($("#linkType").data('tpSelect')) {
            $("#linkType").tpSelect({
                refresh: 1
            });
        } else {
            $("#linkType").tpSelect({
                refresh: 0
            });
        }
    }

    function initModuleShow(linkType) {
        var curType = (linkType == null) ? "PPPoE" : linkType;
        $("#linkType option[value='" + curType + "']").prop("selected", "selected");
        $("div[id$='Basic']").hide("fast");
        $("#" + curType + "Basic").show("fast");
    }

    $("#linkType").click(function() {
        initModuleShow($("#linkType").data("value"));
		initParam($("#linkType").data("value"));
    });

    $("input[id^='dnsMode']").click(function() {
        var curType = ($(this).attr("id").search("Pptp") != -1) ? "Pptp" : "L2tp";

        if ($(this).attr("id").search("dnsModeDyn") != -1) {
            $("#dnsModeParamSta" + curType).fadeOut("fast");
        } else {
            $("#dnsModeParamSta" + curType).fadeIn("normal");
        }
    });

	function getParam() {
		var wanTypes = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
		var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "addressingType"]);
		var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "transportType"]);
		if (INCLUDE_L2TP) {
			var wanL2tpList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "addressingType", "transportType"]);
                }
		if (INCLUDE_PPTP) {
			var wanPptpList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "addressingType", "transportType"]);
            }
		if (INCLUDE_USB_3G_DONGLE){
			usb3gList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["backupEnable"]);
		}
		
		brLanList = $.act(ACT_GL, L2_BRIDGING_ENTRY, null, null, ["bridgeName"]);
		
        if ($.exe()) return;

		$.each(wanTypes, function() {
			if ($.sysMode != 'WISP' && this.WANAccessType == "Ethernet")
                pStk = this.__stack;
			else if($.sysMode == 'WISP' &&  this.WANAccessType == "WISP")
				pStk = this.__stack;	
				
            });
			
		$.each(brLanList, function() {

            if(this.bridgeName == 'Default')
				defaultBrStack = this.__stack;
        });
		
		lanIPv4Cfg = $.act(ACT_GS, LAN_IP_INTF, null, defaultBrStack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "X_TP_MACAddress"]);
		
		if($.sysMode == 'WISP')
			wispWan = $.act(ACT_GET, WAN_WISP_INTF, pStk, null, ["enable", "X_TP_lastUsedIntf"]);
		else
        ethWan = $.act(ACT_GET, WAN_ETH_INTF, pStk, null, ["enable", "X_TP_lastUsedIntf"]);
			
		
		l3f = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
        $.each(wanIPList, function() {
            if (pStk == $.stkPop(this.__stack, 2)) {
                if (this.addressingType == "Static") {
                    if (this.enable == 1) type = "StaticIp";
                    wan_iplist_sta = $.act(ACT_GET, WAN_IP_CONN, this.__stack, null, ["name", "connectionType", "addressingType", "externalIPAddress", "subnetMask", "defaultGateway", "DNSServers"]);
                } else if (this.addressingType == "DHCP") {
                    if (this.enable == 1) type = "DynamicIp";
                    wan_iplist_dyn = $.act(ACT_GET, WAN_IP_CONN, this.__stack, null, ["name", "connectionType", "addressingType", "externalIPAddress", "subnetMask", "defaultGateway", "DNSServers"]);
            }
        }
            });
        $.each(wanPPPList, function() {
            if (pStk == $.stkPop(this.__stack, 2)) {
                if (this.transportType == "PPPoE") {
                    if (this.enable == 1) type = "PPPoE";
                    wan_pppoelist = $.act(ACT_GET, WAN_PPP_CONN, this.__stack, null, ["name", "transportType", "username", "password"]);
        }
                    }
                    });
        if (INCLUDE_L2TP) {
            $.each(wanL2tpList, function() {
                if (pStk == $.stkPop(this.__stack, 1)) {
                    wan_l2tp_list = $.act(ACT_GET, WAN_L2TP_CONN, this.__stack, null, ["enable", "name", "addressingType", "transportType", "Username", "Password", "ServerIpOrName", "ExternalIPAddressIP", "SubnetMaskIP", "DefaultGatewayIP", "DNSServersIP"]);
                    if (this.enable == 1) type = "L2tp";
                    }
                    });
                }
        if (INCLUDE_PPTP) {
            $.each(wanPptpList, function() {
                if (pStk == $.stkPop(this.__stack, 1)) {
                    wan_pptp_list = $.act(ACT_GET, WAN_PPTP_CONN, this.__stack, null, ["enable", "name", "addressingType", "transportType", "Username", "Password", "ServerIpOrName", "ExternalIPAddressIP", "SubnetMaskIP", "DefaultGatewayIP", "DNSServersIP"]);
                    if (this.enable == 1) type = "Pptp";
        }
                    });
                }
            }
	function initParam(linkType) {
		if (!$.exe()) {
			var curType;
			if (linkType == "") {
				switch (ethWan.X_TP_lastUsedIntf) {
				case "ipoe_eth3_d":
					$("#link_type option[value='dynamicIp']").prop("selected", "selected");
					curType = "DynamicIp";
					break;
				case "ipoe_eth3_s":
					$("#link_type option[value='staticIp']").prop("selected", "selected");
					curType = "StaticIp";
					break;
				case "pppoe_eth3_d":
					$("#link_type option[value='pppoe']").prop("selected", "selected");
					curType = "PPPoE";
					break;
				case "l2tp_eth3_d":
					$("#link_type option[value='l2tp']").prop("selected", "selected");
					curType = "L2tp";
					break;
				case "pptp_eth3_d":
					$("#link_type option[value='pptp']").prop("selected", "selected");
					curType = "Pptp";
					break;
				default:
					$("#link_type option[value='dynamicIp']").prop("selected", "selected");
					curType = "DynamicIp";
					break;
                    }
			} else
				curType = linkType;

			switch (curType) {
			case "PPPoE":
				$("#usr" + curType).val(wan_pppoelist.username);
				$("#pwd" + curType).val(wan_pppoelist.password);
				break;
			case "StaticIp":
				var dns = wan_iplist_sta.DNSServers.split(",");
				$("#ip" + curType).tpAddress('val', wan_iplist_sta.externalIPAddress);
				$("#mask" + curType).tpAddress('val', wan_iplist_sta.subnetMask);
				$("#gw" + curType).tpAddress('val', wan_iplist_sta.defaultGateway);
				$("#priDns" + curType).tpAddress('val', dns[0]);
				$("#secDns" + curType).tpAddress('val', dns[1] ? dns[1] : "0.0.0.0");
				break;
			case "Pptp":
			case "L2tp":
				var tmpwan = ("Pptp" == curType) ? wan_pptp_list : wan_l2tp_list;
				var dns = tmpwan.DNSServersIP.split(",");
				$("#usr" + curType).val(tmpwan.username);
				$("#pwd" + curType).val(tmpwan.password);
				$("#serverIpOrName" + curType).val(tmpwan.serverIpOrName);
				if (tmpwan.addressingType == "DHCP") {
					$("#dnsModeDyn" + curType).prop("checked", true);
					$("#dnsModeDyn" + curType).data("tpRadio").refresh();
					$("#dnsModeSta" + curType).prop("checked", false)
					$("#dnsModeSta" + curType).data("tpRadio").refresh();
					$("#dnsModeParamSta" + curType).fadeOut("fast");
                } else {
					$("#dnsModeDyn" + curType).prop("checked", false);
					$("#dnsModeDyn" + curType).data("tpRadio").refresh();
					$("#dnsModeSta" + curType).prop("checked", true);
					$("#dnsModeSta" + curType).data("tpRadio").refresh();
					$("#dnsModeParamSta" + curType).fadeIn("normal");
					$("#ip" + curType).tpAddress('val', tmpwan.externalIPAddressIP);
					$("#mask" + curType).tpAddress('val', tmpwan.subnetMaskIP);
					$("#gw" + curType).tpAddress('val', tmpwan.defaultGatewayIP ? tmpwan.defaultGatewayIP : "0.0.0.0");
					$("#priDns" + curType).tpAddress('val', dns[0]);
					$("#secDns" + curType).tpAddress('val', dns[1] ? dns[1] : "0.0.0.0");
                }
				break;
			default:
				break;
            }
        }
    }

    function init() {
		systemMode = $.sysMode;
		if (systemMode == "ETH" || systemMode == "WISP") {
			getParam();
            initLinkType(systemMode, type);
			initParam(type);
        }
    }

    function doSaveEth(linkType, wanConnArg) {
        diagId = false;
        $.addLoading($("#saveBtn"));
        var l3ForwardingObj = {
            __ifAliasName: wan_iplist_dyn.name,
            __ifName: "",
            defaultConnectionService: ""
        };

        $.act(ACT_SET, WAN_IP_CONN, wan_iplist_sta.__stack, null, ["enable=0"]);
        $.act(ACT_SET, WAN_IP_CONN, wan_iplist_dyn.__stack, null, ["enable=0"]);
        $.act(ACT_SET, WAN_PPP_CONN, wan_pppoelist.__stack, null, ["enable=0"]);
        if (INCLUDE_L2TP)
            $.act(ACT_SET, WAN_L2TP_CONN, wan_l2tp_list.__stack, null, ["enable=0"]);
        if (INCLUDE_PPTP)
            $.act(ACT_SET, WAN_PPTP_CONN, wan_pptp_list.__stack, null, ["enable=0"]);

		if ($.exe())
			return false;

		var conn;
        switch (linkType) {
        case "PPPoE":
			$.act(ACT_SET, WAN_PPP_CONN, wan_pppoelist.__stack, null, wanConnArg);
			$.act(ACT_SET, WAN_ETH_INTF, pStk, null, ["X_TP_lastUsedIntf=pppoe_eth3_d"]);
			diagStack = wan_pppoelist.__stack;
			intfCfgStack = $.stkPop(wan_pppoelist.__stack, 1);
			$.exe(function(err) {
				if (err)
					return false;
			});
			conn = $.act(ACT_GET, WAN_PPP_CONN, wan_pppoelist.__stack, null, ["name"]);
                break;
        case "StaticIp":
			$.act(ACT_SET, WAN_IP_CONN, wan_iplist_sta.__stack, null, wanConnArg);
			$.act(ACT_SET, WAN_ETH_INTF, pStk, null, ["X_TP_lastUsedIntf=ipoe_eth3_s"]);
			diagStack = wan_iplist_sta.__stack;
			intfCfgStack = $.stkPop(wan_iplist_sta.__stack, 1);
			$.exe(function(err) {
				if (err)
					return false;
			});
			conn = $.act(ACT_GET, WAN_IP_CONN, wan_iplist_sta.__stack, null, ["name"]);
                break;
        case "Pptp":
			$.act(ACT_SET, WAN_PPTP_CONN, wan_pptp_list.__stack, null, wanConnArg);
			$.act(ACT_SET, WAN_ETH_INTF, pStk, null, ["X_TP_lastUsedIntf=pptp_eth3_d"]);
			diagStack = wan_pptp_list.__stack;
			intfCfgStack = wan_pptp_list.__stack;
			$.exe(function(err) {
				if (err)
					return false;
			});
			conn = $.act(ACT_GET, WAN_PPTP_CONN, wan_pptp_list.__stack, null, ["name"]);
                break;
        case "L2tp":
			$.act(ACT_SET, WAN_L2TP_CONN, wan_l2tp_list.__stack, null, wanConnArg);
			$.act(ACT_SET, WAN_ETH_INTF, pStk, null, ["X_TP_lastUsedIntf=l2tp_eth3_d"]);
			diagStack = wan_l2tp_list.__stack;
			intfCfgStack = wan_l2tp_list.__stack;
			$.exe(function(err) {
				if (err)
					return false;
			});
			conn = $.act(ACT_GET, WAN_L2TP_CONN, wan_l2tp_list.__stack, null, ["name"]);
                break;
		case "DynamicIp":
            default:
			$.act(ACT_SET, WAN_IP_CONN, wan_iplist_dyn.__stack, null, wanConnArg);
			$.act(ACT_SET, WAN_ETH_INTF, pStk, null, ["X_TP_lastUsedIntf=ipoe_eth3_d"]);
			diagStack = wan_iplist_dyn.__stack;
			intfCfgStack = $.stkPop(wan_iplist_dyn.__stack, 1);
			$.exe(function(err) {
				if (err)
					return false;
			});
			conn = $.act(ACT_GET, WAN_IP_CONN, wan_iplist_dyn.__stack, null, ["name"]);
                break;
        }

		if ($.exe())
			return false;
		if (INCLUDE_USB_3G_DONGLE){
			if ($.usb3gBackup ){
				$.each(usb3gList, function() {
					if (this.cardName != "Unplugged"){
						$.act(ACT_SET, WAN_USB_3G_LINK_CFG, this.__stack, null, ["mainConnObjName="+conn.name+""]);
						$.exe();
					}
				});
			}

			if (($.ewanBackup == "1" || $.usb3gBackup == "1") && (l3f.__ifAliasName.search("usb") >=0 || l3f.__ifAliasName.search("USB")>=0)){
				$.removeLoading();
				diagType = linkType;
				diagStep = 0;
				diagId = true;
				doInternetDiagnostic();
				return true;
			}
		}
		l3ForwardingObj.__ifAliasName = conn.name;
        $.act(ACT_SET, L3_FORWARDING, null, null, l3ForwardingObj);
        $.exe(function(err) {
            if (!err) {
                $.removeLoading();
                diagType = linkType;
                diagStep = 0;
                diagId = true;
                doInternetDiagnostic();
            }
        });

		return true;
    }

    function doSave() {
		if (systemMode == "ETH" || systemMode == "WISP") {
        var linkType = $("#linkType").data("value");
        var wanConnArg = {};
        switch (linkType) {
            case "PPPoE":
                wanConnArg = addAttrsPPP(linkType);
                break;
            case "StaticIp":
				wanConnArg = addAttrsStaIp(linkType);
                break;
            case "Pptp":
            case "L2tp":
                wanConnArg = addAttrsPptpL2tp(linkType);
                break;
            case "DynamicIp":
                wanConnArg = addAttrsDynIp();
                break;
            case "Bridge":
                wanConnArg = {
                    enable: 1,
                    connectionType: "IP_Bridged"
                };
                break;
            default:
                break;
        }
			if (wanConnArg == null)
            return false;

            doSaveEth(linkType, wanConnArg);

        return true;
    }
    }
    $("#saveBtn").click(function() {
        doSave();
    });

    function addAttrsPPP(linkType) {
        var wanArg = {
            enable: 1,
            transportType: linkType,
            username: $("#usr" + linkType).val(),
            password: $("#pwd" + linkType).val()
        };
        if (wanArg.username == "") {
            $.alert(ERR_USERNAME_INVAD);
            $("#usr" + linkType).focus().select();
            return null;
        }
        return wanArg;
    }

    function addAttrsDynIp() {
        var defaultHostname = $.getDefaultHostname();
        var wanArg = {
            enable: 1,
            connectionType: "IP_Routed",
            addressingType: "DHCP",
            NATEnabled: 1,
            X_TP_Hostname: defaultHostname
        }
        return wanArg;
    }

	function addAttrsStaIp(linkType) {
        var temp_ip = $("#ip" + linkType).tpAddress('val');
        var temp_mask = $("#mask" + linkType).tpAddress('val');
        var temp_gateway = $("#gw" + linkType).tpAddress('val');
        if ($.ifip(temp_ip)) {
            $("#ip" + linkType).tpAddress('focus');
            return null;
        }
        if ($.mask(temp_mask)) {
            $("#mask" + linkType).tpAddress('focus');
            return null;
        }
        if ($.ipmask(temp_ip, temp_mask)) {
            $("#mask" + linkType).tpAddress('focus');
            return null;
        }
        if ($.ifip(temp_gateway, true)) {
            $.alert(ERR_IP_FORMAT);
            $("#gw" + linkType).tpAddress('focus');
            return null;
        }
        if (!$.isSameLan(temp_gateway, temp_mask, temp_ip, temp_mask)) {
            $.alert(ERR_GATEWAY_INVAD);
            $("#gw" + linkType).tpAddress('focus');
            return null;
        }
        var temp_dnsaddr = $("#priDns" + linkType).tpAddress('val');
        var temp_secdnsaddr = $("#secDns" + linkType).tpAddress('val');
        var temp_dnsServers = "";
        if ($.ifip(temp_dnsaddr, true)) {
            $.alert(ERR_WAN_DNSADDR_INVAD);
            $("#priDns" + linkType).tpAddress('focus');
            return null;
        }
		
		if ($.isSameLan(temp_dnsaddr, lanIPv4Cfg[0].IPInterfaceSubnetMask, lanIPv4Cfg[0].IPInterfaceIPAddress, lanIPv4Cfg[0].IPInterfaceSubnetMask)) {
            $.alert(ERR_WAN_DNSADDR_LAN_CONFLICT);
            $("#priDns").tpAddress('focus');
            return null;
        }
		
        if ((temp_secdnsaddr != "") && (temp_secdnsaddr != "0.0.0.0") && ($.ifip(temp_secdnsaddr, true))) {
            $.alert(ERR_WAN_SECDNS_INVAD);
            $("#secDns" + linkType).tpAddress('focus');
            return null;
        }
		
		if ((temp_secdnsaddr != "") && (temp_secdnsaddr != "0.0.0.0") && $.isSameLan(temp_secdnsaddr, lanIPv4Cfg[0].IPInterfaceSubnetMask, lanIPv4Cfg[0].IPInterfaceIPAddress, lanIPv4Cfg[0].IPInterfaceSubnetMask)) {
            $.alert(ERR_WAN_DNSADDR_LAN_CONFLICT);
            $("#secDns").tpAddress('focus');
            return null;
        }
		
        temp_dnsaddr = (temp_dnsaddr) ? $.ip2ip(temp_dnsaddr) : "0.0.0.0";
        temp_secdnsaddr = (temp_secdnsaddr) ? $.ip2ip(temp_secdnsaddr) : "0.0.0.0";
        temp_dnsServers = temp_dnsaddr + "," + temp_secdnsaddr;

        var wanArg = {
            enable: 1,
            connectionType: "IP_Routed",
            addressingType: "Static",
            NATEnabled: 1,
            externalIPAddress: $.ip2ip(temp_ip),
            subnetMask: $.ip2ip(temp_mask),
            defaultGateway: (temp_gateway) ? $.ip2ip(temp_gateway) : "0.0.0.0",
            DNSOverrideAllowed: (temp_dnsServers == "0.0.0.0,0.0.0.0") ? 0 : 1,
            DNSServers: temp_dnsServers
        };

        return wanArg;
    }

    function addAttrsPptpL2tp(linkType) {
        if ($("#usr" + linkType).val() == "") {
            $.alert(ERR_USERNAME_INVAD);
            $("#usr" + linkType).focus().select();
            return null;
        }
        if ($("#pwd" + linkType).val() == "") {
            $.alert(ERR_WAN_PWD_INVAD);
            $("#pwd" + linkType).focus().select();
            return null;
        }
        var serverIpOrNameTmp = $("#serverIpOrName" + linkType).val();
        if (serverIpOrNameTmp == "") {
            $.alert(ERR_WAN_DA_SERVER_NAME_EMPTY);
            $("#serverIpOrName" + linkType).focus().select();
            return null;
        }
        var wanArg;
        var dnsModes = $("span.radio-click").parent("label");
        var dnsMode = "";
        $.each(dnsModes, function() {
            if ($(this).attr("for").search(linkType) != -1) {
                dnsMode = $(this).attr("for");
                return false;
            }
        });

        if (dnsMode == ("dnsModeDyn" + linkType)) {
            var defaultHostname = $.getDefaultHostname();
            wanArg = {
                enable: 1,
                connectionTypeIP: "IP_Routed",
                addressingType: "DHCP",
                NATEnabled: 1,
                serverIpOrName: serverIpOrNameTmp,
                username: $("#usr" + linkType).val(),
                password: $("#pwd" + linkType).val(),
                hostname: defaultHostname
            };
        } else if (dnsMode == ("dnsModeSta" + linkType)) {
            var temp_ip = $("#ip" + linkType).tpAddress('val');
            var temp_mask = $("#mask" + linkType).tpAddress('val');
            var temp_gateway = $("#gw" + linkType).tpAddress('val');
            if ((!$.ifip(temp_ip)) && (!$.mask(temp_mask)) && (!$.ipmask(temp_ip, temp_mask))) {} else {
                return null;
            }
            if ($.ifip(temp_gateway, true)) {
                $.alert(ERR_IP_FORMAT);
                $("#gw" + linkType).tpAddress('focus');
                return null;
            }
            if (!$.isSameLan(temp_gateway, temp_mask, temp_ip, temp_mask)) {
                $.alert(ERR_GATEWAY_INVAD);
                $("#gw" + linkType).tpAddress('focus');
                return null;
            }
            var temp_dnsaddr = $("#priDns" + linkType).tpAddress('val');
            var temp_secdnsaddr = $("#secDns" + linkType).tpAddress('val');
            var temp_dnsServers = "";

            if ($.ifip(temp_dnsaddr, true)) {
                $.alert(ERR_WAN_DNSADDR_INVAD);
                $("#priDns" + linkType).tpAddress('focus');
                return null;
            }
			
			if ($.isSameLan(temp_dnsaddr, lanIPv4Cfg[0].IPInterfaceSubnetMask, lanIPv4Cfg[0].IPInterfaceIPAddress, lanIPv4Cfg[0].IPInterfaceSubnetMask)) {
            $.alert(ERR_WAN_DNSADDR_LAN_CONFLICT);
            $("#priDns").tpAddress('focus');
            return null;
			}
			
            if ((temp_secdnsaddr != "") && (temp_secdnsaddr != "0.0.0.0") && ($.ifip(temp_secdnsaddr, true))) {
                $.alert(ERR_WAN_SECDNS_INVAD);
                $("#secDns" + linkType).tpAddress('focus');
                return null;
            }

			if ((temp_secdnsaddr != "") && (temp_secdnsaddr != "0.0.0.0") && $.isSameLan(temp_secdnsaddr, lanIPv4Cfg[0].IPInterfaceSubnetMask, lanIPv4Cfg[0].IPInterfaceIPAddress, lanIPv4Cfg[0].IPInterfaceSubnetMask)) {
            $.alert(ERR_WAN_DNSADDR_LAN_CONFLICT);
            $("#secDns").tpAddress('focus');
            return null;
			}

            temp_dnsaddr = (temp_dnsaddr) ? $.ip2ip(temp_dnsaddr) : "0.0.0.0";
            temp_secdnsaddr = (temp_secdnsaddr) ? $.ip2ip(temp_secdnsaddr) : "0.0.0.0";
            temp_dnsServers = temp_dnsaddr + "," + temp_secdnsaddr;

            if ($.ifip(serverIpOrNameTmp, true) && temp_dnsaddr == "0.0.0.0" && temp_secdnsaddr == "0.0.0.0") {
                $.alert(ERR_WAN_DA_DNS_EMPTY);
                $("#priDns" + linkType).tpAddress('focus');
                return null;
            }
            wanArg = {
                enable: 1,
                connectionTypeIP: "IP_Routed",
                addressingType: "Static",
                NATEnabled: 1,
                serverIpOrName: serverIpOrNameTmp,
                username: $("#usr" + linkType).val(),
                password: $("#pwd" + linkType).val(),
                externalIPAddressIP: $.ip2ip(temp_ip),
                subnetMaskIP: $.ip2ip(temp_mask),
                defaultGatewayIP: $.ip2ip(temp_gateway),
                DNSServersIP: temp_dnsServers
            };
        }
        return wanArg;
    }

    var diagId = true;
    var diagTimeout = $.getAsync();

    var bConnStaIP = true;

    function doInternetDiagnostic() {
	
		if($.sysMode == "WISP")
			return;
			
        var notePrefix = n_str["wanBasic"].t_detecting;
        var notePostfix = "...";

        if (diagId == false || !($.checkAsync(diagTimeout))) {
            return;
        }
        $("#div_detectStatus").removeClass("nd");
        $("#internetStatus").prop("value", notePrefix + notePostfix.substr(0, diagIndex));
        diagIndex++;
        diagIndex &= 3;

        if (diagIndex & 1 == 0) {
            $.timeout(doInternetDiagnostic, 500);
            return;
        }

        switch (diagStep) {
            case 0:
                var linkDiagFunc = function(err) {
                    if (err)
                        return;
                        if (ethLinkConfig.ethernetLinkStatus == "Up") {
                            diagStep++;

                            if (diagType == "Pptp" || diagType == "L2tp") {
                                $.timeout(doInternetDiagnostic, 5000);
                            } else {
                                $.timeout(doInternetDiagnostic, 500);
                            }
                        } else if (ethLinkConfig.ethernetLinkStatus == "Down" || ethLinkConfig.ethernetLinkStatus == "Unavailable") {
                            $("#internetStatus").prop("value", m_str.disconnected);
                        } else {
                            $.timeout(doInternetDiagnostic, 500);
                        }
                };

                if (systemMode == "ETH") {
                    ethLinkConfig = $.act(ACT_GET, WAN_ETH_LINK_CFG, intfCfgStack, null, ["EthernetLinkStatus"]);
                    $.exe(linkDiagFunc);
                }
                break;

            case 1:
                if (diagType == "PPPoE")
                    wanConn = $.act(ACT_GET, WAN_PPP_CONN, diagStack, null, ["LastConnectionError", "ConnectionStatus"]);
                else if (diagType == "DynamicIp" || diagType == "StaticIp")
                    wanConn = $.act(ACT_GET, WAN_IP_CONN, diagStack, null, ["ConnectionStatus"]);
                else if (INCLUDE_PPTP && diagType == "Pptp")
                    wanConn = $.act(ACT_GET, WAN_PPTP_CONN, diagStack, null, ["ConnectionStatus", "ConnectionStatusIP"]);
                else if (INCLUDE_PPTP && diagType == "L2tp")
                    wanConn = $.act(ACT_GET, WAN_L2TP_CONN, diagStack, null, ["ConnectionStatus", "ConnectionStatusIP"]);
                $.exe(function(err) {
                    if (err) return;
                    if (wanConn.connectionStatus == "Connected") {
                        diagStep++;
                        $.timeout(doInternetDiagnostic, 500);
                    } else if (wanConn.connectionStatus == "Connecting") {
                        $.timeout(doInternetDiagnostic, 500);
                    } else if (INCLUDE_PPTP && wanType == "pptp" && wanConn.connectionStatus == "Unconfigured" && bConnStaIP == true) {
                        if (wanConn.connectionStatusIP == "Disconnected") {
                            bConnStaIP = false;
                        }
                        $.timeout(doInternetDiagnostic, 500);
                    } else if (INCLUDE_PPTP && wanType == "l2tp" && wanConn.connectionStatus == "Unconfigured" && bConnStaIP == true) {
                        if (wanConn.connectionStatusIP == "Disconnected") {
                            bConnStaIP = false;
                        }
                        $.timeout(doInternetDiagnostic, 500);
                    } else {
                        $("#internetStatus").prop("value", m_str.disconnected);
                    }
                });
                break;

            case 2:
                diagTool = $.act(ACT_GET, DIAG_TOOL, null, null, ["LastResult"]);
                $.exe(function(err) {
                    if (err) return;
                    if (diagTool.lastResult == 3) {
                        $.timeout(doInternetDiagnostic, 500);
                    } else {
                        if (bDiagStart == true) {
                            if (diagTool.lastResult == 1) {
                                $("#internetStatus").prop("value", m_str.connected);
                            } else {
                                $("#internetStatus").prop("value", m_str.disconnected);
                            }
                        } else {
                            bDiagStart = true;
                            $.act(ACT_OP, ACT_OP_DIAG_DNSDIAG, diagTool.__stack);
                            $.exe(function(err) {
                                if (err) return;
                                $.timeout(doInternetDiagnostic, 500);
                            });
                        }
                    }
                });
                break;
        }
    }

    var systemMode;
    var diagStep = 0;
    var diagIndex = 0;
    var bDiagStart = false;
    var diagType = "";
    var diagStack = "";
	var type = "";
	var pStk;
	var ethWan;
	var wispWan;
	var l3f;
	var intfCfgStack;
	var wan_iplist_sta = {};
	var wan_iplist_dyn = {};
	var wan_pppoelist = {};
	var wan_l2tp_list = {};
	var wan_pptp_list = {};
	var brLanList;
	var defaultBrStack;
	var lanIPv4Cfg;
if (INCLUDE_USB_3G_DONGLE){
	var usb3gList;
}
    $.tpInit(init);
})();
</script>
