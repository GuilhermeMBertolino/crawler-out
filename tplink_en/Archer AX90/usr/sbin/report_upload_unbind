#!/usr/bin/lua
--created by wanghao

local error = require "cloud_report.report_error"
local sys   = require "luci.sys"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local json = require "luci.json"
local io    = require "io"
local uci			= require "luci.model.uci"
local uci_r			= uci.cursor()

local content_type = "Content-type: application/json"
local url_postfix = "/v1/license"
local CLOUD_HOMECARE_TOKEN_FILE = "/tmp/cloud/cloud_token_homecare"

local retry_count = 0
local token
local origin_url
local fp
local retry = false


while(retry_count <= 2)
do
	retry_count = retry_count + 1
	retry = false

	if not nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
		sys.call("cloud_getDevToken homecare")
	end

	if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
		fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
		token = fp:read("*line")
		origin_url = fp:read("*line")..url_postfix
		fp:close()
	else
		-- try again when not get the homecare token
		sys.call("cloud_getDevToken homecare")
		if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
			fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
			token = fp:read("*line")
			origin_url = fp:read("*line") .. url_postfix
			fp:close()
		else
			break
		end
	end
	
	local account = uci_r:get("cloud_config","device_status", "accountid") or arg[1]
	local data = {
		["deviceId"] = string.match(sys.exec("getfirm DEV_ID"), "%w+"),
		["accountId"] = account
	}

	sys.call("echo `date` >/var/log/cloud_report_unbind.result; echo '%s' >>/var/log/cloud_report_unbind.result" % {json.encode(data)})
	dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload request]:" .. json.encode(data))

	local ret
	fp = io.popen("curl -S -l -H \"%s\" -H \"Authorization: %s\" -X DELETE -k -d \'%s\' --connect-timeout 8 %s --retry 3 --retry-delay 1 2>>/var/log/cloud_report_unbind.result" % {content_type, token, json.encode(data), origin_url})
	if fp then
		ret = fp:read("*all")
		fp:close()
	end

	dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload response]:" .. ret)

	ret = json.decode(ret)

	if ret ~= nil then
		if tonumber(ret.code) == error.ERROR_MSG.ERROR_INVALID_DEVICE_TOKEN[1] then
			--refresh token and upload again
			sys.call("rm " .. CLOUD_HOMECARE_TOKEN_FILE)
			retry = true
		end
	end
	
	if retry == false then
		break
	end

end
