#!/usr/bin/lua
--created by gaocongcong
local error = require "cloud_report.report_error"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local json  = require "luci.json"
local io    = require "io"
local sys   = require "luci.sys"

local content_type  = "Content-type: application/json"
local url_postfix   = "/v1/messages/trigger-alert-notification"
local CLOUD_HOMECARE_TOKEN_FILE = "/tmp/cloud/cloud_token_homecare"

local type_table = {
    ["10"] = "PORT.SCANNING",
    ["20"] = "NETWORK.PENETRATION.ATTACK",
    ["30"] = "ATTACK",
    ["11"] = "PORT.SCANNING",
    ["21"] = "INCOMMING",
    ["22"] = "OUTGOING",
    ["31"] = "ATTACK.DDOS"
}

local function str_to_ip(str)
    local now = 1
    local ip = ""
    if string.len(str) == 8 then  --ipv4
        while true do
            local tmp
            tmp = string.sub(str, now , now + 1)
            if tmp == "" or tmp == " " then
                break
            end
            tmp = tonumber(tmp, 16)
            if tmp then
                ip = ip .. tmp .. "."
            end
            now = now + 2
        end
    end
    if string.len(str) > 8 then --ipv6
        while true do
            local tmp
            tmp = string.sub(str, now , now + 3)
            if tmp == "" or tmp == " " then
                break
            end
            if tmp then
                ip = ip .. tmp .. ":"
            end
            now = now + 4
        end
    end
    ip = string.sub(ip, 1 ,string.len(ip) - 1)
    return ip
end

local function str_to_mac(str)
    local tmp
    local now = 1
    local mac = ""
    while true do
        tmp = string.sub(str, now , now + 1)
        if tmp == "" or tmp == " "then
            break
        end
        if tmp then
            mac = mac .. tmp .. "-"
        end
        now = now + 2
    end
    mac = string.sub(mac, 1 ,string.len(mac) - 1)
    return mac
end

local function send_single_info(data)
    local retry = true
    local retry_count = 0
    while(retry_count <= 2) do
        retry_count = retry_count + 1

        if not nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            sys.call("cloud_getDevToken homecare")
        end

        local fp
        local token
        local origin_url
        if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
            token = fp:read("*line")
            origin_url = fp:read("*line")..url_postfix
            fp:close()
        else
            -- try again when not get the homecare token
            sys.call("cloud_getDevToken homecare")
            if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
                fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
                token = fp:read("*line")
                origin_url = fp:read("*line") .. url_postfix
                fp:close()
            else
                break
            end
        end

        data = json.encode(data)

        local ret
        sys.call("echo `date` >/var/log/cloud_report_alert.result; echo '%s' >>/var/log/cloud_report_alert.result" % {data})
        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload request]:", data)

        fp = io.popen("curl --location --request POST \'%s\' --header \'%s\' --header \'Authorization: %s\' -k -d \'%s\' 2>>/var/log/cloud_report_alert.result" % {origin_url, content_type, token, data})
        if fp then
            ret = fp:read("*all")
            fp:close()
        end

        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload response]:", ret)
        ret = json.decode(ret)

        if ret ~= nil then
            if tonumber(ret.code) == error.ERROR_MSG.ERROR_INVALID_DEVICE_TOKEN[1] then
                --refresh token and upload again
                sys.call("rm " .. CLOUD_HOMECARE_TOKEN_FILE)
                retry = true
            end
            if tonumber(ret.code) == error.ERROR_MSG.ERROR_NONE[1] then
                retry = false
            end
        end

        if retry == false then
            break
        end
    end
end

local function main()
    local data = {
        ["sourceMac"]  = str_to_mac(arg[1]),
        ["sourceIp"]   = str_to_ip(arg[2]),
        ["targetIp"]   = str_to_ip(arg[3]),
        ["attackType"] = type_table[arg[4]],
        ["eventType"]  = type_table[arg[5]]
    }
    send_single_info(data)
end

main()