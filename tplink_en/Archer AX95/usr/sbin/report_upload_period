#!/usr/bin/lua
--created by wanghao

local error = require "cloud_report.report_error"
local sys   = require "luci.sys"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local json  = require "luci.json"
local io    = require "io"

local RECV_HTTP_HEADER  = "/tmp/cloud/period_http_header"
local content_type      = "Content-type: application/json"
local url_postfix       = "/v1/services/insights-upload"
local CLOUD_HOMECARE_TOKEN_FILE = "/tmp/cloud/cloud_token_homecare"

local function parser_status(str)
    local status
    local start = 1
    local str_end = string.find(str, " ", start)
    while str_end ~= nil do
        local str_tmp = string.sub(str, start, str_end - 1)
        if tonumber(str_tmp) ~= nil and tonumber(str_tmp) >= 100 and tonumber(str_tmp) < 600 then
            status = str_tmp
            return status
        end
        start = str_end + 1
        str_end = string.find(str, " ", start)
    end
	return nil
end

local function parser_http_header()
    local fp = io.open(RECV_HTTP_HEADER, "r")
    if not fp then
        return
    end

    local header_table = {}
    local data
    local status
    status = fp:read("*line")
    header_table["status"] = parser_status(status)
    while tonumber(header_table["status"]) == 100 do
        fp:read("*line")
        status = fp:read("*line")
        header_table["status"] = parser_status(status)
    end

    return header_table
end

local function main()
    local retry = true
    local retry_count = 0
    while(retry_count <= 2) do
        retry_count = retry_count + 1

        if not nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            sys.call("cloud_getDevToken homecare")
        end

        local fp
        local token
        local origin_url
        if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
            token = fp:read("*line")
            origin_url = fp:read("*line")..url_postfix
            fp:close()
        else
            -- try again when not get the homecare token
            sys.call("cloud_getDevToken homecare")
            if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
                fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
                token = fp:read("*line")
                origin_url = fp:read("*line") .. url_postfix
                fp:close()
            else
                break
            end
        end

        local header_table = {}
        local data
        local ret = {}
        if nixio.fs.access("/tmp/cloud/cloud_report_period") then
            fp = io.open("/tmp/cloud/cloud_report_period", "r")
            data = fp:read("*all")
            fp:close()
        end

        if data == nil then
            break
        end

        sys.call("echo `date` >/var/log/cloud_report_period.result; echo '%s' >>/var/log/cloud_report_period.result" % {data})
        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload request]:", data)

        sys.call("curl -S -l -H \"%s\" -H \"Authorization: %s\" -X POST -d \'%s\' -k -D %s --connect-timeout 8 %s --retry 3 --retry-delay 1 2>>/var/log/cloud_report_period.result" % {content_type, token, data, RECV_HTTP_HEADER, origin_url})

        header_table = parser_http_header()
        if tonumber(header_table["status"]) == 200 then
            ret = {
                ["status"] = header_table["status"],
                ["message"] = "Everything OK!"
            }
        else
            ret = {
                ["status"] = header_table["status"],
                ["message"] = "faild to upload!"
            }
        end
        ret = json.encode(ret)
        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload response]:", ret)

        if tonumber(header_table.status) ~= 200 then
            --refresh token and upload again
            sys.call("rm " .. CLOUD_HOMECARE_TOKEN_FILE)
            retry = true
        else
            retry = false
        end

        if retry == false then
            break
        end
    end
end

main()