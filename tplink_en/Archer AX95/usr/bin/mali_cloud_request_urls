#!/usr/bin/lua
--created by gaocongcong

local error = require "cloud_report.report_error"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local json  = require "luci.json"
local io    = require "io"
local sys   = require "luci.sys"

local CLOUD_HASH_VALUE_TO_URL = "/tmp/mali_url/hash_to_urls"

local content_type  = "Content-type: application/json"
local url_postfix   = "/v1/url-library/retrieve-malicious-url"
local CLOUD_HOMECARE_TOKEN_FILE = "/tmp/cloud/cloud_token_homecare"

local function main()
    local retry = true
    local retry_count = 0
    while(retry_count <= 2) do
        retry_count = retry_count + 1

        if not nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            sys.call("cloud_getDevToken homecare")
        end

        local fp
        local token
        local origin_url
        if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
            fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
            token = fp:read("*line")
            origin_url = fp:read("*line")..url_postfix
            fp:close()
        else
            -- try again when not get the homecare token
            sys.call("cloud_getDevToken homecare")
            if nixio.fs.access(CLOUD_HOMECARE_TOKEN_FILE) then
                fp = io.open(CLOUD_HOMECARE_TOKEN_FILE, "r")
                token = fp:read("*line")
                origin_url = fp:read("*line") .. url_postfix
                fp:close()
            else
                break
            end
        end

        local ret
        local data = {
            ["urlHash"] = arg[1]
        }
        data = json.encode(data)
        sys.call("echo `date` >/var/log/cloud_request_hash_file.result; echo '%s' >>/var/log/cloud_request_hash_file.result" % {data})
        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload request]:", data)

        fp = io.popen("curl -S -l -H \"%s\" -H \"Authorization: %s\" -X POST -k -d \'%s\' --connect-timeout 8 %s --retry 3 --retry-delay 1 2>>/var/log/cloud_request_hash_file.result" % {content_type, token, data, origin_url})
        if fp then
            ret = fp:read("*all")
            fp:close()
        end

        dbg.print("[cloud-report][" .. arg[0] .. "][cloud_upload response]:", ret)
        ret = json.decode(ret)

        if ret ~= nil then
            sys.call("mkdir -p /tmp/mali_url")
            if tonumber(ret.code) == error.ERROR_MSG.ERROR_INVALID_DEVICE_TOKEN[1] then
                --refresh token and upload again
                sys.call("rm " .. CLOUD_HOMECARE_TOKEN_FILE)
                retry = true
            end

            if tonumber(ret.code) == error.ERROR_MSG.ERROR_NONE[1] then
                if not nixio.fs.access(CLOUD_HASH_VALUE_TO_URL) then
                    sys.call("touch %s" % {CLOUD_HASH_VALUE_TO_URL})
                else
                    sys.call("rm -rf %s && touch %s" % {CLOUD_HASH_VALUE_TO_URL, CLOUD_HASH_VALUE_TO_URL})
                end

                if ret.result ~= nil then
                    fp = io.open(CLOUD_HASH_VALUE_TO_URL, "w")
                    fp:write(ret.result["urlString"])
                    fp:close()
                end
                retry = false
            end
        end

        if retry == false then
            break
        end
    end
end

main()