#!/bin/sh /etc/rc.common

START=65
STOP=35

EXTRA_COMMANDS="stop_urlclass stop_aviraservice start_urlclass start_aviraservice"

AVIRAWATCHDOG_PROG="/etc/init.d/avirawatchdog"
AVIRAWATCHDOG_PROG_START="$AVIRAWATCHDOG_PROG start"
AVIRAWATCHDOG_PROG_STOP="$AVIRAWATCHDOG_PROG stop"

AVIRASELECTOR_PROG="/etc/init.d/aviraserviceselector"
AVIRASELECTOR_PROG_START="$AVIRASELECTOR_PROG start"
AVIRASELECTOR_PROG_STOP="$AVIRASELECTOR_PROG stop"

AVIRAFULL_PROG="/etc/init.d/avirasentinelfull"
AVIRAFULL_PROG_DISABLE="$AVIRAFULL_PROG disable"
AVIRAFULL_PROG_STOP="$AVIRAFULL_PROG stop"

AVIRALITE_PROG="/etc/init.d/avirasentinellite"
AVIRALITE_PROG_DISABLE="$AVIRALITE_PROG disable"
AVIRALITE_PROG_STOP="$AVIRALITE_PROG stop"

URLCLASS_PROG="/etc/init.d/url_class"
URLCLASS_PROG_START="$URLCLASS_PROG start"
URLCLASS_PROG_STOP="$URLCLASS_PROG stop"

AVIRAWATCHDOG_ENABLE="false"
AVIRASELECTOR_ENABLE="false"
URLCLASS_ENABLE="false"

NTPD_OUTPUT_FILE="/tmp/selected_ntp_ip"
AVIRA_RUNTIME_CONF="/tmp/aviraruntime.conf"
AVIRA_NTP_LIST_CONF_DEFAULT="ntp1.net.nortonlifelock.com;ntp2.net.nortonlifelock.com;ntp3.net.nortonlifelock.com;"
AVIRA_LICENSE_CHECK_BEGIN_VAL_DEFAULT=10
AVIRA_LICENSE_CHECK_BEGIN_CONF_DEFAULT="aviraserviceselector.licenseCheckBegin=$AVIRA_LICENSE_CHECK_BEGIN_VAL_DEFAULT"
AVIRA_LICENSE_CHECK_INTERVAL_VAL_DEFAULT=300
AVIRA_LICENSE_CHECK_INTERVAL_CONF_DEFAULT="aviraserviceselector.licenseCheckInterval=$AVIRA_LICENSE_CHECK_INTERVAL_VAL_DEFAULT"

load_profile_available() {
	config_get available "$1" available
	if [ "$available" == "true" ]; then
		AVIRAWATCHDOG_ENABLE="true"
		AVIRASELECTOR_ENABLE="true"
	fi
}

load_profile_content_filter() {
	config_get available "$1" available
	config_get filter_categories_list "$1" filter_categories_list "0"
	if [ "$available" == "true" -a "$filter_categories_list" != "0" ]; then
		URLCLASS_ENABLE="true"
	fi
}

set_dns_cache_list() {
	# update immediately after startup
	/usr/bin/dns-cache-list &
	
	local CRON_FILE="/etc/crontabs/root"
	local TMP_CRONTAB="/tmp/dns-cache-list_cron"
	local DNS_CACHE_LIST_BIN="/usr/bin/dns-cache-list"
	local new_cron_item="*/10 * * * * ${DNS_CACHE_LIST_BIN}"
	cron_item=`grep "${DNS_CACHE_LIST_BIN}" ${CRON_FILE}`
	[ "${cron_item}" != "${new_cron_item}" ] && {
	                echo "${new_cron_item}" > ${TMP_CRONTAB}
	                crontab -l | grep -v "${DNS_CACHE_LIST_BIN}" | cat - "${TMP_CRONTAB}" | crontab -
	                rm -f ${TMP_CRONTAB}
	}
}

del_dns_cache_list() {
	crontab -l | grep -v "dns-cache-list" | crontab -
}

set_ntp_to_avira() {
	### set net server list and interval to avira

	echo "ntp_server_list=$AVIRA_NTP_LIST_CONF_DEFAULT" > $AVIRA_RUNTIME_CONF
	echo "$AVIRA_LICENSE_CHECK_BEGIN_CONF_DEFAULT" >> $AVIRA_RUNTIME_CONF
	echo "$AVIRA_LICENSE_CHECK_INTERVAL_CONF_DEFAULT" >> $AVIRA_RUNTIME_CONF

	/usr/sbin/aviraservice ntp &
}


start_aviraservice() {
	local wan_type=$(uci get network.wan.wan_type)
	local pctl_v6_support=`uci get profile.@ipv6[0].parental_control_v6_support -c /etc/profile.d/ -q`
	if [ "x$wan_type" = "xv6plus" -o "x$wan_type" = "xdslite" ] && [ "$pctl_v6_support" != "yes" ]; then
		stop
		return 0
	fi

	local payment=$(uci get avira.info.state)
	local service=$(uci get avira.info.service)
	if [ "x$payment" == "xpaid" -o "x$service" == "xstart" ]; then
		$AVIRAWATCHDOG_PROG_START
		$AVIRASELECTOR_PROG_START
		return 0
	fi

	config_load "parental_control_v2"
	config_foreach load_profile_available owner

	if [ "$AVIRAWATCHDOG_ENABLE" != "true" ]; then
		stop_aviraservice
	else
		$AVIRAWATCHDOG_PROG_START
		$AVIRASELECTOR_PROG_START
	fi
}

start_urlclass() {
	local wan_type=$(uci get network.wan.wan_type)
	local pctl_v6_support=`uci get profile.@ipv6[0].parental_control_v6_support -c /etc/profile.d/ -q`
	if [ "x$wan_type" = "xv6plus" -o "x$wan_type" = "xdslite" ] && [ "$pctl_v6_support" != "yes" ]; then
		stop
		return 0
	fi

	local payment=$(uci get avira.info.state)
	local service=$(uci get avira.info.service)
	if [ "x$payment" == "xpaid" -o "x$service" == "xstart" ]; then
		$URLCLASS_PROG_START
		return 0
	fi

	config_load "parental_control_v2"
	config_foreach load_profile_content_filter owner

	if [ "$URLCLASS_ENABLE" != "true" ]; then
		stop_urlclass
	else
		$URLCLASS_PROG_START
	fi
}

homeshield_self() {
	### homeshield self
	### NOTE not router or not bind, stop all avira service and url class process
	local mode=$(uci get sysmode.sysmode.mode)
	local bind_status=$(uci get cloud_config.device_status.bind_status)
	if [ "x$mode" != "xrouter" ]; then
		stop
		return 0
	fi

	local wan_type=$(uci get network.wan.wan_type)
	local pctl_v6_support=`uci get profile.@ipv6[0].parental_control_v6_support -c /etc/profile.d/ -q`
	if [ "x$wan_type" = "xv6plus" -o "x$wan_type" = "xdslite" ] && [ "$pctl_v6_support" != "yes" ]; then
		stop
		return 0
	fi

	local payment=$(uci get avira.info.state)
	local security=$(uci get parental_control_v2.settings.sec_enable)
	if [ "$bind_status" == "1" ] && [ "x$payment" == "xpaid" ]; then
		# paid
		# start url-class
		$URLCLASS_PROG_START

		# start security
		if [ "$security" == "true" ]; then
			/etc/init.d/tp_security restart
		fi

		# upload the paid component to cloud
		lua /usr/sbin/report_upload_components full n
	else
		# free
		# start url-class, NOTE check if available profile and content filter existed
		config_load "parental_control_v2"
		config_foreach load_profile_content_filter owner
		if [ "$URLCLASS_ENABLE" != "true" ]; then
			stop_urlclass
		else
			$URLCLASS_PROG_START
		fi

		# upload the free component to cloud
		if [ "$bind_status" == "1" ]; then
			lua /usr/sbin/report_upload_components lite n
		fi
	fi
	
	return 0
}

start() {
	### homeshield self
	local status=$(uci get avira.info.status)
	if [ "${status}" == "unavailable" -o "${status}" == "libauc_available" ]; then
		echo "### homeshield_self aviraservicemaster status: [$status] ###" > /dev/console
		homeshield_self
		return 0
	fi

	### NOTE not router or not bind, stop all avira service and url class process
	local mode=$(uci get sysmode.sysmode.mode)
	local bind_status=$(uci get cloud_config.device_status.bind_status)
	local need_unbind=$(uci get cloud_config.device_status.need_unbind)
	if [ "x$mode" != "xrouter" ]; then
		stop
		return 0
	fi

	local wan_type=$(uci get network.wan.wan_type)
	local pctl_v6_support=`uci get profile.@ipv6[0].parental_control_v6_support -c /etc/profile.d/ -q`
	if [ "x$wan_type" = "xv6plus" -o "x$wan_type" = "xdslite" ] && [ "$pctl_v6_support" != "yes" ]; then
		stop
		return 0
	fi

	local payment=$(uci get avira.info.state)
	local service=$(uci get avira.info.service)
	if [ "$bind_status" == "1" ] && [ "x$payment" == "xpaid" -o "x$service" == "xstart" ]; then
		# paid
		$AVIRAWATCHDOG_PROG_START
		$AVIRASELECTOR_PROG_START
		$URLCLASS_PROG_START
		set_ntp_to_avira
		set_dns_cache_list
	else
		# free
		# NOTE check if available profile and content filter existed
		config_load "parental_control_v2"
		config_foreach load_profile_content_filter owner
		if [ "$URLCLASS_ENABLE" != "true" ]; then
			stop_urlclass
		else
			$URLCLASS_PROG_START
		fi

		# Do not start any avira related processes
		stop_aviraservice
		
		# When the avira process is not started, also need to upload a free component
		if [ "$AVIRAWATCHDOG_ENABLE" != "true" ] && [ "$bind_status" == "1" ]; then
			lua /usr/sbin/report_upload_components lite n
			echo "avira process is not started, also need to upload a free component!" > /dev/console
		fi
	fi
	
	return 0
}

stop_aviraservice() {

	$AVIRAWATCHDOG_PROG_STOP
	$AVIRASELECTOR_PROG_STOP

	$AVIRAFULL_PROG_DISABLE
	$AVIRAFULL_PROG_STOP
	$AVIRALITE_PROG_DISABLE
	$AVIRALITE_PROG_STOP
	del_dns_cache_list
}

stop_urlclass() {
	$URLCLASS_PROG_STOP
}

stop() {
	stop_aviraservice
	stop_urlclass
	/etc/init.d/tp_security stop
}

reload() {
	local status=$(uci get avira.info.status)
	if [ "$status" = "unavailable" ] || [ "$status" = "libauc_available" ]; then
		/etc/init.d/tp_security restart
	fi
}

