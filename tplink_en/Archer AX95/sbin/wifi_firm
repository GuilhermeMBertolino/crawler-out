#!/bin/sh

append DRIVERS "brcmwifi"

WL=/usr/sbin/wl
NVRAM=/usr/sbin/nvram
WLCONF=/usr/sbin/wlconf

STDOUT=/dev/null
#DEBUG=1
[ -n "${DEBUG}" ] && STDOUT="/dev/console"
#!/bin/sh
. /lib/functions.sh
. /lib/wifi/brcmwifi.sh
. /lib/wifi/brcm_wlan_var.sh

STDOUT="/dev/null"

VAP_NUM=3

DEV_NUM_START=0
DEV_NUM_END=0

# define for brcm

#DEV=wl
#VAP=wl

wifi_firm_info(){
	get_wlan_ini FEATURE_6G
	local mac=""
	local cfgmac=""
	local wps_pin=""
	local ssid=""
	local change_flag=""
	local product_id=`getfirm PRODUCT_ID`

	for dev in ${DEVICES}; do
		config_get band "${dev}" band
		
		case "$band" in
			2g)
				DEV_2G_NAME=${dev}
			;;
			5g)
				DEV_5G_NAME=${dev}
			;;
			5g_2)
				DEV_5G2_NAME=${dev}
			;;
			6g)
				DEV_6G_NAME=${dev}
			;;
		esac
		
		let DEV_NUM_END+=1
	done
	
	DEV=$(echo ${dev} | awk -F '[0-9]' '{print $1}')
	VAP=$(echo ${dev} | awk -F '[0-9]' '{print $1}')
	
	#DEV=wl VAP=wl
	
	for i in $(seq $DEV_NUM_START $DEV_NUM_END); do
		cfgmac="`uci get wireless.${DEV}$(($i)).macaddr`"
		if [ "${DEV}$(($i))" = ${DEV_2G_NAME} ]; then
			mac=$(network_get_firm "lan_dec1")
		else
			#5G_MAC = 2G_MAC - 1
			if [ "${DEV_NUM_END}" == "2" ]; then
				#du-band
				mac=$(network_get_firm "lan_dec2")
			elif [ "${DEV_NUM_END}" == "3" ]; then
				#tri-band
				if [ "${FEATURE_6G}" = "y" ]; then
					# For AXE75v1
					if [ "${product_id}" = "E7500001" ]; then
						if [ "${DEV}$(($i))" = ${DEV_5G_NAME} ]; then
							mac=$(network_get_firm "lan_dec5")
						else
							mac=$(network_get_firm "lan_dec4")
							mac=$(network_get_firm "virtual" ${mac})
						fi
					else
						if [ "${DEV}$(($i))" = ${DEV_5G_NAME} ]; then
								mac=$(network_get_firm "lan_dec2")
						else
								mac=$(network_get_firm "lan_dec3")
								mac=$(network_get_firm "virtual" ${mac})
						fi
					fi
				else
					if [ "${DEV}$(($i))" = ${DEV_5G_NAME} ]; then
						mac=$(network_get_firm "lan_dec3")
					else
						mac=$(network_get_firm "lan_dec2")
					fi
				fi
			elif [ "${DEV_NUM_END}" == "4" ]; then
				#four-band
				if [ "${DEV}$(($i))" = ${DEV_5G_NAME} ]; then
					mac=$(network_get_firm "lan_dec2")
				elif [ "${DEV}$(($i))" = ${DEV_5G2_NAME} ]; then
					mac=$(network_get_firm "lan_dec3")
				elif [ "${DEV}$(($i))" = ${DEV_6G_NAME} ]; then
					mac=$(network_get_firm "lan_dec4")
					mac=$(network_get_firm "virtual" ${mac})
				fi
			else
				echo "Invalid DEV_NUM_END=${DEV_NUM_END}" >/dev/console
			fi
		fi
		mac="`echo $mac | tr '[a-f]' '[A-F]'`"
		cfgmac="`echo $cfgmac | tr '[a-f]' '[A-F]'`"
		if [ -z ${cfgmac} ]; then
			uci set wireless.${DEV}$(($i)).macaddr="$mac"
			change_flag="1"
		elif [ "${mac}" != "${cfgmac}" ]; then
			uci set wireless.${DEV}$(($i)).macaddr="$mac"
			change_flag="1"
		else
			: 
		fi

		if [ -z "$(config_get ${DEV}$(($i)) hwmode)" ]; then
			if [ "${DEV}$(($i))" = ${DEV_2G_NAME} ]; then
				hwmode="bgnax"
			else
				hwmode="anacax_5"
			fi
			if [ "${FEATURE_6G}" = "y" ]; then
				if [ "${DEV}$(($i))" = ${DEV_6G_NAME} ]; then
					hwmode="ax_5"
				fi
			fi
			uci set wireless.${DEV}$(($i)).hwmode="$hwmode"
			change_flag="1"
		fi

		for j in $(seq $VAP_NUM); do
			#set default pin for vap
			if [ ! -z "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) wps_label)" -a \
				-z "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) wps_pin)" ]; then
				if [ -z "$wps_pin" ]; then
				wps_pin="$(getfirm PIN)"
				fi
				uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).wps_pin="${wps_pin}"
				change_flag="1"
			fi

			#set default ssid and security for home network
			local ssid_get
			if [ -z "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) guest)" -a \
				"$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) mode)" = "ap" ]; then
				config_get ssid_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) ssid
				
				if [ -z "${ssid_get}" ]; then
					ssid="$(getfirm SSID)"
					local suffix
					#suffix=$(uci get wireless.${DEV}$(($i)).macaddr|awk -F '-' '{printf $5$6}'|tr 'a-f' 'A-F')
					suffix=$(getfirm MAC|awk -F '-' '{printf $5$6}'|tr 'a-f' 'A-F')
					if [ "${DEV_NUM_END}" == "2" ]; then
					#du-band
						[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G"
					elif [ "${DEV_NUM_END}" == "4" ]; then
					#four-band
						[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G_1"
						[ "${DEV}$(($i))" = ${DEV_5G2_NAME} ] && suffix="${suffix}_5G_2"
						[ "${DEV}$(($i))" = ${DEV_6G_NAME} ] && suffix="${suffix}_6G"
					else
					#tri-band
						if [ "${FEATURE_6G}" = "y" ]; then
							[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G"
							[ "${DEV}$(($i))" = ${DEV_6G_NAME} ] && suffix="${suffix}_6G"
						else
							[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G_1"
							[ "${DEV}$(($i))" = ${DEV_5G2_NAME} ] && suffix="${suffix}_5G_2"
						fi
					fi
					uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).ssid="${ssid}_${suffix}"
					change_flag="1"
				fi

				if [ -z "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) encryption)" ]; then
					if [ -z "$wps_pin" ]; then
						wps_pin="$(getfirm PIN)"
					fi
					if [ "${FEATURE_6G}" = "y" ] && [ "${DEV}$(($i))" = ${DEV_6G_NAME} ]; then
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).encryption="psk_sae"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_cipher="aes"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_version="sae_only"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_key="${wps_pin}"
					else
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).encryption="psk"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_key="${wps_pin}"
					fi
					change_flag="1"
				fi
			fi

			#default security of guest network is none.
			if [ "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) guest)" = "on" ]; then
				config_get ssid_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) ssid
				if [ -z "${ssid_get}" ]; then
					ssid="$(getfirm SSID)"
					local suffix
					#suffix=$(uci get wireless.${DEV}$(($i)).macaddr|awk -F '-' '{printf $5$6}'|tr 'a-f' 'A-F')
					suffix=$(getfirm MAC|awk -F '-' '{printf $5$6}'|tr 'a-f' 'A-F')
					if [ "${DEV_NUM_END}" == "2" ]; then
					#du-band
						[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G"
					elif [ "${DEV_NUM_END}" == "4" ]; then
					#four-band
						[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G_1"
						[ "${DEV}$(($i))" = ${DEV_5G2_NAME} ] && suffix="${suffix}_5G_2"
						[ "${DEV}$(($i))" = ${DEV_6G_NAME} ] && suffix="${suffix}_6G"						
					else
					#tri-band
						if [ "${FEATURE_6G}" = "y" ]; then
							[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G"
							[ "${DEV}$(($i))" = ${DEV_6G_NAME} ] && suffix="${suffix}_6G"
						else
							[ "${DEV}$(($i))" = ${DEV_5G_NAME} ] && suffix="${suffix}_5G_1"
							[ "${DEV}$(($i))" = ${DEV_5G2_NAME} ] && suffix="${suffix}_5G_2"
						fi
					fi	
					
					uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).ssid="${ssid}_Guest_${suffix}"
					change_flag="1"
				fi
				
				if [ -z "$wps_pin" ]; then
					wps_pin="$(getfirm PIN)"
				fi
				if [ -z "$(config_get ${VAP}$(($i-$DEV_NUM_START))$(($j)) encryption)" ]; then
					if [ "${FEATURE_6G}" = "y" ] && [ "${DEV}$(($i))" = ${DEV_6G_NAME} ]; then
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).encryption="owe"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_cipher="aes"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_version="owe_only"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_key="${wps_pin}"
					else
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).encryption="none"
						uci set wireless.${VAP}$(($i-$DEV_NUM_START))$(($j)).psk_key="${wps_pin}"
					fi
					change_flag="1"
				fi
			fi
		done
	done

	if [ -z "$(config_get wps model_name)" ]; then
		local model="$(getfirm MODEL)"
		uci set wireless.wps.model_name="${model}"
		change_flag="1"
	fi

	if [ -z "$(config_get wps wps_manufacturer)" -o -z "$(config_get wps wps_manufacturer_url)" ]; then
		local firm="$(getfirm FIRM)"
		local website="$(getfirm WEBSITE)"
		uci set wireless.wps.wps_manufacturer="${firm}"
		uci set wireless.wps.wps_manufacturer_url="${website}"
		change_flag="1"
	fi
	if [ "$change_flag" = "1" ]; then
		wifi_commit
	fi
}

config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
			;;
		esac
}

config_load wireless

#add end
wifi_firm_info

nvram() {
	[ -n "${DEBUG}" ] && echo nvram "$@" >$STDOUT
	$NVRAM "$@"
}

wl() {
	[ -n "${DEBUG}" ] && echo wl "$@" >$STDOUT
	$WL "$@"
}

wlconf() {
	[ -n "${DEBUG}" ] && echo wlconf "$@" > $STDOUT
	$WLCONF "$@"
}

kill_nas() {
	echo "kill_nas" >$STDOUT
}

# parse the /etc/config/wireless and make sure there are no configuration incompatibilities.
scan_brcmwifi() {
	echo "=====>>>>> scan_brcmwifi" >$STDOUT
}

# bring up the wifi device and create application specific configuration files.
enable_brcmwifi() {
	echo "=====>>>>> enable_brcmwifi" >$STDOUT
}

# bring down the wifi device and all its virtual interfaces
disable_brcmwifi() {
	echo "=====>>>>> disable_brcmwifi" >$STDOUT
}

# looks for interfaces that are usable with the driver
detect_brcmwifi() {
	echo "=====>>>>> detect_brcmwifi" >$STDOUT
}
