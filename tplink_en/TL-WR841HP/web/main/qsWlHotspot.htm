<style type="text/css">
p b {
	line-height: 23px;
	height: 23px;
	vertical-align: middle;
}
input[type="text"] {
	height: 19px;
}

.save_line {
	padding-top: 25px;
	padding-bottom: 5px;
}	

.button.T_save {
	margin-left: 0px; 
}
.scanner_line {
	margin: 10px 0;
}
#t_scanner, #cpssid {
	margin-left: 0px;
}
</style>

<script language="javascript" type="text/javascript">

var mainChannel;
var authMode, encryptMode;
var cfgModified = false;

var regionInfo = new Array(
	"Albania", 1, 13, 2,
	"Algeria", 1, 13, 2,
	"Argentina", 1, 13, 2,
	"Armenia", 1, 13, 2,
	"Australia", 1, 13, 2,
	"Austria", 1, 13, 2,
	"Azerbaijan", 1, 13, 2,
	"Bahrain", 1, 13, 2,
	"Belarus", 1, 13, 2,
	"Belgium", 1, 13, 2,
	"Belize", 1, 13, 2,
	"Bolivia", 1, 13, 2,
	"Brazil", 1, 13, 2,
	"Brunei Darussalam", 1, 13, 2,
	"Bulgaria", 1, 13, 2,
	"Cambodia", 1, 13, 2,
	"Canada", 1, 11, 2,
	"Chile", 1, 13, 2,
	"China", 1, 13, 1,
	"Colombia", 1, 11, 2,
	"Costa Rica", 1, 13, 2,
	"Croatia", 1, 13, 2,
	"Cyprus", 1, 13, 2,
	"Czech Republic", 1, 13, 2,
	"Denmark", 1, 13, 2,
	"Dominican Republic", 1, 11, 2,
	"Ecuador", 1, 13, 2,
	"Egypt", 1, 13, 2,
	"El Salvador", 1, 13, 2,
	"Estonia", 1, 13, 2,
	"Finland", 1, 13, 2,
	"France", 1, 13, 2,
	"Georgia", 1, 13, 2,
	"Germany", 1, 13, 2,
	"Greece", 1, 13, 2,
	"Guatemala", 1, 11, 2,
	"Honduras", 1, 13, 2,
	"Hong Kong", 1, 13, 2,
	"Hungary", 1, 13, 2,
	"Iceland", 1, 13, 2,
	"India", 1, 13, 2,
	"Indonesia", 1, 13, 2,
	"Iran", 1, 13, 2,
	"Iraq", 1, 13, 2,
    "Ireland", 1, 13, 2,
	"Israel", 1, 13, 2,
	"Italy", 1, 13, 2,
	"Japan", 1, 13, 2,
	"Jordan", 1, 13, 2,
	"Kazakhstan", 1, 13, 2,
	"North Korea", 1, 13, 2,
	"Korea Republic", 1, 13, 2,
	"Kuwait", 1, 13, 2,
	"Latvia", 1, 13, 2,
	"Lebanon", 1, 13, 2,
	"Liechtenstein", 1, 13, 2,
	"Lithuania", 1, 13, 2,
	"Luxembourg", 1, 13, 2,
	"Macau", 1, 13, 2,
	"Macedonia", 1, 13, 2,
	"Malaysia", 1, 13, 2,
	"Malta", 1, 13, 2,
	"Mexico", 1, 11, 2,
	"Monaco", 1, 13, 2,
	"Morocco", 1, 13, 2,
	"Netherlands", 1, 13, 2,
	"New Zealand", 1, 13, 2,
	"Norway", 1, 13, 2,
	"Oman", 1, 13, 2,
	"Pakistan", 1, 13, 2,
	"Panama", 1, 11, 2,
    "Paraguay", 1, 13, 2,
	"Peru", 1, 13, 2,
	"Philippines", 1, 13, 2,
	"Poland", 1, 13, 2,
	"Portugal", 1, 13, 2,
	"Puerto Rico", 1, 11, 2,
	"Qatar", 1, 13, 2,
	"Romania", 1, 13, 2,
	"Russia", 1, 13, 2,
	"Saudi Arabia", 1, 13, 2,
	"Singapore", 1, 13, 2,
	"Serbia", 1, 13, 2,
	"Slovak Republic", 1, 13, 2,
	"Slovenia", 1, 13, 2,
	"South Africa", 1, 13, 2,
	"Spain", 1, 13, 2,
	"Sweden", 1, 13, 2,
	"Switzerland", 1, 13, 2,
	"Syrian Arab Republic", 1, 13, 2,
	"Taiwan", 1, 11, 2,
	"Thailand", 1, 13, 2,
	"Trinidad And Tobago", 1, 13, 2,
	"Tunisia", 1, 13, 2,
	"Turkey", 1, 13, 2,
	"Ukraine", 1, 13, 2,
	"United Arab Emirates", 1, 13, 2,
	"United Kingdom", 1, 13, 2,
	"United States", 1, 11, 2,
	"Uruguay", 1, 13, 2,
	"Uzbekistan", 1, 11, 2,
	"Venezuela", 1, 11, 2,
	"Viet Nam", 1, 13, 2,
	"Yemen", 1, 13, 2,
	"Zimbabwe", 1, 13, 2
);

var regionCodeInfo = new Array(
	[8, "AL ", 0,3, "ALBANIA"],
	[12,"DZ ", 0,3, "ALGERIA"],
	[32,"AR ", 0,3, "ARGENTINA"],
	[51,"AM ", 0,3,"ARMENIA"],
	[36,"AU ", 0,3, "AUSTRALIA"],
	[40,"AT ", 0,3,"AUSTRIA"],
	[31,"AZ ", 0,3,"AZERBAIJAN"],
	[48,"BH ", 0,3,"BAHRAIN"],
	[112,"BY", 0,3,"BELARUS"],
	[56,"BE ", 0,3,"BELGIUM"],
	[84,"BZ ", 0,8,"BELIZE"],
	[68,"BO ", 0,8,"BOLIVIA"],
	[76,"BR ", 0,3,"BRAZIL"],
	[96,"BN ", 0,3,"BRUNEI DARUSSALAM"],
	[100,"BG ", 0,3,"BULGARIA"],
	[116,"KH ", 0,3,"CAMBODIA"],
	[124,"CA ", 0,1,"CANADA"],
	[152,"CL ", 0,3,"CHILE"],
	[156,"CN ", 0,3,"CHINA"],
	[170,"CO ", 0,1,"COLOMBIA"],
	[188,"CR ", 0,3,"COSTA RICA"],
	[191,"HR ", 0,3,"CROATIA"],
	[196,"CY ", 0,3,"CYPRUS"],
	[203,"CZ ", 0,3,"CZECH REPUBLIC"],
	[208,"DK ", 0,3,"DENMARK"],
	[214,"DO ", 0,1,"DOMINICAN REPUBLIC"],
	[218,"EC ", 0,3,"ECUADOR"],
	[818,"EG ", 0,3,"EGYPT"],
	[222,"SV ", 0,3,"EL SALVADOR"],
	[233,"EE ", 0,3,"ESTONIA"],
	[246,"FI ", 0,3,"FINLAND"],
	[250,"FR ", 0,3,"FRANCE"],
	[268,"GE ", 0,3,"GEORGIA"],
	[276,"DE ", 0,3,"GERMANY"],
	[300,"GR ", 0,3,"GREECE"],
	[320,"GT ", 0,1,"GUATEMALA"],
	[340,"HN ", 0,3,"HONDURAS"],
	[344,"HK ", 0,3,"HONG KONG"],
	[348,"HU ", 0,3,"HUNGARY"],
	[352,"IS ", 0,3,"ICELAND"],
	[356,"IN ", 0,3,"INDIA"],
	[360,"ID ", 0,3,"INDONESIA"],
	[364,"IR ", 0,3,"IRAN"],
    [368,"IQ",  0,3, "IRAQ"],
	[372,"IE ", 0,3,"IRELAND"],
	[376,"IL ", 0,7,"ISRAEL"],
	[380,"IT ", 0,3,"ITALY"],
	[392,"JP ", 3,6,"JAPAN"],
	[400,"JO ", 0,3,"JORDAN"],
	[398,"KZ ", 0,3,"KAZAKHSTAN"],
	[410,"KP ", 2,3,"NORTH KOREA"],
	[408,"KR ", 2,3,"KOREA REPUBLIC"],
	[414,"KW ", 0,3,"KUWAIT"],
	[428,"LV ", 0,3,"LATVIA"],
	[422,"LB ", 0,3,"LEBANON"],
	[438,"LI ", 0,3,"LIECHTENSTEIN"],
	[440,"LT ", 0,3,"LITHUANIA"],
	[442,"LU ", 0,3,"LUXEMBOURG"],
	[446,"MO ", 0,3,"MACAU"],
	[807,"MK ", 0,3,"MACEDONIA"],
	[458,"MY ", 0,3,"MALAYSIA"],
	[470,"MT", 0,3, "MALTA",],
	[484,"MX ", 0,1,"MEXICO"],
	[492,"MC ", 0,3,"MONACO"],
	[504,"MA ", 0,3,"MOROCCO"],
	[528,"NL ", 0,3,"NETHERLANDS"],
	[554,"NZ ", 0,8,"NEW ZEALAND"],
	[578,"NO ", 0,3,"NORWAY"],
	[512,"OM ", 0,3,"OMAN"],
	[586,"PK ", 0,3,"PAKISTAN"],
	[591,"PA ", 0,1,"PANAMA"],
    [600,"PY",  0,3,"PARAGUAY"],
	[604,"PE ", 0,3,"PERU"],
	[608,"PH ", 0,3,"PHILIPPINES"],
	[616,"PL ", 0,3,"POLAND"],
	[620,"PT ", 0,3,"PORTUGAL"],
	[630,"PR ", 0,1,"PUERTO RICO"],
	[634,"QA ", 0,3,"QATAR"],
	[642,"RO ", 0,3,"ROMANIA"],
	[643,"RU ", 0,3,"RUSSIA"],
	[682,"SA ", 0,3,"SAUDI ARABIA"],
	[702,"SG ", 4,3,"SINGAPORE"],
	[688,"RS ", 0,3,"SERBIA"],
	[703,"SK ", 0,3,"SLOVAK REPUBLIC"],
	[705,"SI ", 0,3,"SLOVENIA"],
	[710,"ZA ", 0,3,"SOUTH AFRICA"],
	[724,"ES ", 0,3,"SPAIN"],
	[752,"SE ", 0,3,"SWEDEN"],
	[756,"CH ", 0,3,"SWITZERLAND"],
	[760,"SY ", 0,3,"SYRIAN ARAB REPUBLIC"],
	[158,"TW ", 1,1,"TAIWAN"],
	[764,"TH ", 0,3,"THAILAND"],
	[780,"TT ", 0,3,"TRINIDAD AND TOBAGO"],
	[788,"TN ", 0,3,"TUNISIA"],
	[792,"TR ", 0,3,"TURKEY"],
	[804,"UA ", 0,3,"UKRAINE"],
	[784,"AE ", 0,3,"UNITED ARAB EMIRATES"],
	[826,"GB ", 0,3,"UNITED KINGDOM"],
	[840,"US ", 0,1,"UNITED STATES"],
	[858,"UY ", 0,3,"URUGUAY"],
	[860,"UZ ", 0,1,"UZBEKISTAN"],
	[862,"VE ", 0,8,"VENEZUELA"],
	[704,"VN ", 0,3,"VIET NAM"],
	[887,"YE ", 0,3,"YEMEN"],
	[716,"ZW ", 0,3,"ZIMBABWE"]
);

var POWER_HIGH = 	100;
var POWER_MIDDLE = 	50;
var POWER_LOW = 	20;

var powerLabel = {
	100: 	s_str.high,
	50: 	s_str.medium,
	20: 	s_str.low
};

var regionDefaultPower = [
	/* Region, Default Power, Supported Power List */
	["SA", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Saudi Arabia */
	["QA", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Qatar */
	["AE", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* United Arab Emirates */
	["KW", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Kuwait */
	["IR", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Iran*/
	["IQ", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Iraq */
	["SY", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Syria CE or FCC ? */
	["EG", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Egypt */
	["JO", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Jordan */
	["DZ", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Algeria */
	["MA", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Morocco CE */
	["TN", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Tunisia */
	["YE", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Yemen */
	["LB", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Lebanon CE */
	["ZA", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* South Africa */
	["PK", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Pakistan */
	["BH", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Bahrain */
	["MX", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Mexico */
	["CO", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Colombia */
	["BR", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Brazil */
	["PY", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Paraguay CE or FCC ? */
	["PE", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Peru CE or FCC ? */
	["VE", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Venezuela CE or FCC ? */
	["EC", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Ecuador CE or FCC ? */
	["PA", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Panama CE or FCC */
	["GT", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Guatemala CE or FCC ? */
	["CR", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Costa Rica CE or FCC ? */
	["SV", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* El Salvador CE or FCC ? */
	["AR", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Argentina CE or FCC ?*/
	["CL", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Chile CE or FCC ? */
	["UY", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Uruguay CE or FCC ? */
	["BO", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Bolivia CE or FCC ? */
	["SG", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Singapore */
	["MY", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Malaysia */
	["KR", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* South Korea */
	["TW", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Taiwan */
	["HK", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Hong Kong */
	["ID", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Indonesia */
	["TH", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Thailand */
	["VN", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Viet Nam */
	["PH", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Philippines */
	["IN", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* India */
	["AU", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Australia */
	["NZ", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* New Zealand */
	["KH", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]], 		/* Cambodia */
	["IL", POWER_MIDDLE, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]],  		/* Israel */
	[".*", POWER_HIGH, [POWER_HIGH, POWER_MIDDLE, POWER_LOW]]  		/* else */
];

function isRegionSupported(region)
{
	if (INCLUDE_WLAN_REGION_LIST)
	{
		var supportedRegionList = $.qd.wl.supportedRegionList;
		var listLen = supportedRegionList.length;
		if (supportedRegionList == '*' || supportedRegionList == '')
		{
			return true;
		}
		for (var i = 0; i < listLen; i += 2)
		{
			var re = new RegExp("\s*" + supportedRegionList.substr(i, 2) + "\s*");
			if (re.test(region))
			{
				return true;
			}
		}
		return false;
	}
	else
	{
		return true;
	}
}

function toggleHelp(cname, show)
{
	var toggle = show ? $.removeClass : $.addClass;

	if (typeof parent.frames["helpFrame"].document.getElementsByClassName !== 'function')
	{
		parent.frames["helpFrame"].document.getElementsByClassName = function(className, element) {
			var children = parent.frames["helpFrame"].document.getElementsByTagName('*');
			var elements = new Array();
			for (var i = 0; i < children.length; i++)
			{
				var child = children[i];
				var classNameList = child.className.split(' ');
				for (var j = 0; j < classNameList.length; j++)
				{
					if (classNameList[j] == className)
					{
						elements.push(child);
						break;
					}
				}
			}
			return elements;
		}
	}

	var regionHelpElements = parent.frames["helpFrame"].document.getElementsByClassName(cname);

	if (regionHelpElements.length == 0)
	{
		setTimeout(function() { toggleHelp(cname, show); }, 100);
		return;
	}

	for (var index = 0; index < regionHelpElements.length; index++)
	{
		toggle(regionHelpElements[index], "nd");
	}

}

function initRegionList(domain)
{
	var region = $.id("region");
	var selectedIndex = 0;
	var optionIndex = 0;

	for ( i = 0; i < (regionInfo.length / 4); i++)
	{
		if (isRegionSupported(regionCodeInfo[i][1]) == false)
		{
			continue;
		}
		var opt=$.c("option");
		opt.value=i;
		if (country_str && country_str[i])
		{
			opt.text=country_str[i];
		}
		else
		{
			opt.text=regionInfo[4 * i];
		}
		try {
			region.add(opt,null);
		} catch(e) {
			region.add(opt);
		}

		if (regionCodeInfo[i][1] == domain)
		{
			selectedIndex=optionIndex;
		}
		optionIndex++;
	}

	region.selectedIndex=selectedIndex;

	if (INCLUDE_FORCE_REGION_SELECT)
	{
		g_selectedIndex=selectedIndex;
	}

	if ($.qd.wl.showRegion == 1)
	{
		$.removeClass($.id("regionTitle"), "nd");
		$.removeClass($.id("regionSelection"), "nd");
		$.removeClass($.id("regionNote"), "nd");
		toggleHelp('region_help', true);
	}
	else
	{
		toggleHelp('region', false);
		toggleHelp('region_help', true);
	}
}

function changeRegion()
{
	$.qd.wl.domain = regionCodeInfo[$.id("region").value][1];
	$.qd.wl.country = regionInfo[4 * $.id("region").value];
	setPowerList($.qd.wl.domain);
}

function setPowerList(region)
{
	var i=0;
	var pList = $.id("txpower");
	var list = new Array();
	var opt;

	if ($.id("region").value == -1)
	{
		$.id("txpower").disabled = true;
	}
	else
	{
		$.id("txpower").disabled = false;
	}

	for (i = 0; i < regionDefaultPower.length; i++)
	{
		if (new RegExp(regionDefaultPower[i][0]).test(region))
		{
			defaultPower = regionDefaultPower[i][1];
			supportedPowerList = regionDefaultPower[i][2];
			break;
		}
	}

	while ( pList.options.length > 0 )
	{
		pList.remove(0);
	}
	$.each(supportedPowerList, function(arg, index) {
			opt = $.c("option");
			opt.value = parseInt(this);
			opt.text = powerLabel[this];
			try {
				pList.add(opt, null);
			} catch (e) {
				pList.add(opt);
			}
			if (opt.value == defaultPower)
			{
				pList.selectedIndex = index;
			}
		});
	changePower();
}

function changePower()
{
	var currPower = $.id("txpower").value;
	if (currPower == POWER_HIGH && defaultPower != POWER_HIGH)
	{
		showBlock("powNote", true);
	}
	else
	{
		showBlock("powNote", false);
	}
}

function showBlock(id, display)
{
	if (display) 
	{
		$.removeClass($.id(id), "nd");
	}
	else
	{
		$.addClass($.id(id), "nd");
	}
}

var curChannel;

if (INCLUDE_LAN_WLAN_WDS_DETECT) {
    function changeAddrMode() {
        wlanObj.bridgeAddrMode = $.id("addrMode").value;
    }
}

function hide_wep()
{
	$.addClass($.id("wep_security"),"nd");
	$.addClass($.id("password"),"nd");

	$.id("connWepidx").disabled=true;
	$.id("authType").disabled=true;
	$.id("wepkeyFormat").disabled=true;
	$.id("connKeyText").disabled=true;
}

function show_wep()
{
	$.removeClass($.id("wep_security"),"nd");
	$.removeClass($.id("password"),"nd");

	$.id("connWepidx").disabled=false;
	$.id("authType").disabled=false;
	$.id("wepkeyFormat").disabled=false;
	$.id("connKeyText").disabled=false;
}

function hide_psk()
{
	$.addClass($.id("wpa_tkip_notice"),"nd");
	$.addClass($.id("password"),"nd");
	$.id("connKeyText").disabled=true;
}

function show_psk()
{
	if ( encryptMode != "TKIPEncryption")
	{
		encryptMode="AESEncryption";
	}
	else
	{
		$.removeClass($.id("wpa_tkip_notice"),"nd");
	}
	$.removeClass($.id("password"),"nd");
	$.id("connKeyText").disabled=false;
}

function getParam()
{
	beaconType = $.qd.wl.beaconType;
	basicAuthenticationMode =  $.qd.wl.basicAuthenticationMode;
	WEPKeyIndex = $.qd.wl.wepKeyIndex;

	$.each($.qd.wepList, function(arg,index){
		wepKeyArray[index] = this.WEPKey;
	});

	wepLevel = $.qd.wl.wepLevel.split(",");
	basicEncryptionModes = $.qd.wl.basicEncryptionModes;
	WPAAuthenticationMode = $.qd.wl.wpaAuthenticationMode;
	WPAEncryptionModes = $.qd.wl.wpaModes;
	IEEE11iAuthenticationMode = $.qd.wl.ieee11iAuthenticationMode;
	IEEE11iEncryptionModes = $.qd.wl.ieee11iEncryptionModes;
	X_TP_PreSharedKey = $.qd.wl.psk;
	X_TP_GroupKeyUpdateInterval = $.qd.wl.groupKeyUpdateInterval;
	X_TP_RadiusServerIP = $.qd.wl.radiusServerIP;
	X_TP_RadiusServerPort = $.qd.wl.radiusServerPort; 
	X_TP_RadiusServerPassword = $.qd.wl.radiusServerPassword;
}

function changeSec()
{
	if ("wep" == $.id("sec_select").value)
	{
		$.removeClass($.id("wep_idx"),"nd");
	}
	else
	{
		$.addClass($.id("wep_idx"),"nd");
	}
	
	if ("none" == $.id("sec_select").value)
	{
		$.id("extKeyText").disabled=true;
		$.id("extKeyText").value="";
		
	}
	else
	{
		$.id("extKeyText").disabled=false;
	}
}

function changeConnSec()
{		
	if ($.id("host_re").checked == false)
	{
		if ("wep" == $.id("keyType").value)
		{
			hide_psk();
			show_wep();
		}
		else if ("none" == $.id("keyType").value)
		{
			hide_psk();
			hide_wep();
		}
		else
		{
			hide_wep();
			show_psk();
		}	
		
		$.id("keyType").disabled = true;
		$.id("bridgeSSID").disabled = true;
		$.id("t_scanner").disabled = true;	
	}
	else
	{
		$.id("connKeyText").disabled = false;
		$.id("keyType").disabled = false;
		$.id("bridgeSSID").disabled = false;
		$.id("wep_security").disabled = false;
		$.id("t_scanner").disabled = false;
		
		if ("wep" == $.id("keyType").value)
		{
			hide_psk();
			show_wep();
		}
		else if ("none" == $.id("keyType").value)
		{
			hide_psk();
			hide_wep();
		}
		else
		{
			hide_wep();
			show_psk();
		}	
	
	}

	cfgModified  =  true;
}

function initWDS()
{
	if (1 == $.qd.wds.brdigeEnable || $.mainParam)
	{
		$.id("host_re").checked = true;
	}
	else
	{
		$.id("host_re").checked = false;
	}

	if ($.mainParam && $.mainParam.wdsExist == 1)
	{
		$.id("bridgeSSID").value = $.mainParam.SSID;
		$.id("bridgeBSSID").value = $.mainParam.BSSID;
		mainChannel = $.mainParam.channel;

		if ($.mainParam.authMode == 0 /*"Open"*/ && $.mainParam.wepStatus == 1/*"None"*/)
		{
			$.id("keyType").selectedIndex = 0;
		}
		else if($.mainParam.wepStatus == 0/*"WEPEncryption"*/ || $.mainParam.authMode == 2)
		{
			$.id("keyType").selectedIndex = 3;
			if($.mainParam.authMode == 1 /*"SharedAuthentication"*/)
			{
				$.id("authType").selectedIndex=1;
			}
			else if($.mainParam.authMode == 0 /*"Open"*/)
			{
				$.id("authType").selectedIndex = 0;
			}

			$.id("connWepidx").selectedIndex = $.qd.wds.wepKeyIndex - 1;
		}
		else
		{
			
			if ($.mainParam.authMode == 3 || $.mainParam.authMode == 5 || $.mainParam.authMode == 4 /*"PSKAuthentication"*/)
			{
				$.id("keyType").selectedIndex = 1;
			}
			else if ($.mainParam.authMode == 6 || $.mainParam.authMode == 7 /*"PSK2Authentication"*/ )
			{
				$.id("keyType").selectedIndex=2;
			}
			else 
			{
				$.id("keyType").selectedIndex=3;
			}
		}
		
		if ($.id("keyType").value == "none")
		{
			authMode = "Open";
			encryptMode = "None";
		}
		else if($.id("keyType").value == "wep")
		{
			encryptMode = "WEPEncryption";
			if ($.id("authType").value == "open")
			{
				authMode = "Open";
			}
			else
			{
				qauthMode = "SharedAuthentication";
			}
		}
		else if ($.id("keyType").value == "wpa")
		{
			authMode = "PSKAuthentication";
			encryptMode = "AESEncryption";
		}
		else if($.id("keyType").value == "wpa2")
		{
			authMode = "PSK2Authentication";
			encryptMode = "AESEncryption";
		}		
		else
		{
			authMode = "PSK2Authentication";
			encryptMode = "AESEncryption";
		}
		
		if ($.mainParam.wepStatus == 4)
		{	
			if($.mainParam.authMode == 3 || $.mainParam.authMode == 5 || $.mainParam.authMode == 4/*"PSKAuthentication"*/)
			{
				authMode = "PSKAuthentication";
			}
			else 
			{
				authMode = "PSK2Authentication";
			}
				
			encryptMode="TKIPEncryption";
		}
			
	}
	else
	{
		$.id("bridgeSSID").value = $.qd.wds.ssid;
		$.id("bridgeBSSID").value = $.qd.wds.bssid;
		//no scan param input, reset channel to active channel scanning
		if ($.qd.wl.chnn != 6)
		{
			mainChannel = 6;
		}
		else
		{
			mainChannel = 5;
		}		
		authMode = $.qd.wds.authMode;
		encryptMode = $.qd.wds.encryptMode;
	
		if ($.qd.wds.authMode == "Open" && $.qd.wds.encryptMode == "None")
		{
			$.id("keyType").selectedIndex = 0;
			$.id("connKeyText").value = "";
		}
		else if ($.qd.wds.encryptMode == "WEPEncryption")
		{
			$.id("keyType").selectedIndex = 3;
			if ($.qd.wds.authMode == "SharedAuthentication")
			{
				$.id("authType").selectedIndex = 1;
			}
			else if($.qd.wds.authMode == "Open")
			{
				$.id("authType").selectedIndex = 0;
			}

			if ($.qd.wds.key.length == 5 || $.qd.wds.key.length == 13 || $.qd.wds.key.length == 16)
			{
				$.id("wepkeyFormat").selectedIndex = 0;
			}
			else if ($.qd.wds.key.length == 10 || $.qd.wds.key.length == 26 || $.qd.wds.key.length == 32)
			{
				$.id("wepkeyFormat").selectedIndex = 1;
			}

			$.id("connWepidx").selectedIndex = $.qd.wds.wepKeyIndex - 1;
			$.id("connKeyText").value = $.qd.wds.key;
		}
		else if ($.qd.wds.authMode == "PSKAuthentication")
		{
			$.id("keyType").selectedIndex = 1;
			$.id("connKeyText").value = $.qd.wds.key;
		}
		else if ($.qd.wds.authMode == "PSK2Authentication")
		{
			$.id("keyType").selectedIndex = 2;
			$.id("connKeyText").value = $.qd.wds.key;
		}	
		else
		{
			$.id("keyType").selectedIndex = 3;				
			$.id("connKeyText").value = $.qd.wds.key;
		}
	}
				
	changeConnSec();
}

function initShow()
{
	var i;

	if (INCLUDE_LAN_WLAN_WDS)
	{
		initWDS();
	}

	if (INCLUDE_LAN_WLAN_HWSWITCH)
	{
		$.addClass($.id("wifiswitch"), "nd");
	}
	else
	{
		if (1 ==  $.qd.wl.enable)
		{
			$.id("apen").checked=true;
		}
	}

	$.id("ssidBroadcast").checked = (1 == $.qd.wl.ssidBcastEnable);

	$.id("extssid").value = $.qd.wl.ssid;
	
	if (beaconType == "Basic" && basicEncryptionModes == "None")
	{
		$.id("sec_select").value = "none";
	}
	else if (beaconType == "Basic" && basicEncryptionModes == "WEPEncryption")
	{
		$.id("sec_select").value = "wep";
		for (i = 1; i <= 4; i++)
		{
			if (wepKeyArray[i-1] != "")
			{
				$.id("extKeyText").value = wepKeyArray[i-1];
				$.id("extWepidx").value = i;
				break;
			}
		}		
	}
	else if (beaconType == "WPA")
	{
		if (WPAAuthenticationMode == "PSKAuthentication")
		{
			$.id("sec_select").value = "wpa";
		}
		else
		{
			$.id("sec_select").value = "wpa";

		}
		
		$.id("extKeyText").value = X_TP_PreSharedKey;
	}
	else if(beaconType == "11i" || beaconType == "WPAand11i")
	{
		if(IEEE11iAuthenticationMode == "PSKAuthentication")
			$.id("sec_select").value = "wpa";
		else
			$.id("sec_select").value = "wpa";
			
		$.id("extKeyText").value = X_TP_PreSharedKey;
	}
	else
	{
	}
		
	changeSec();
}

function apScan(obj)
{
	if (INCLUDE_FORCE_REGION_SELECT && $.id("region").value == -1)
	{
		if (typeof ERR_WLAN_REGION_IS_EMPTY == "undefined")
			alert("Please Select the Region !");
		else
			$.alert(ERR_WLAN_REGION_IS_EMPTY);			

		$.id("region").focus();
		//$.id("region").select();		
		return false;
	}

	$.qd.wl.power = $.id("txpower").value;
	$.qd.wl.domainSetByUser = 1;

	$.act(ACT_OP, ACT_OP_WLAN_SCAN, $.qd.wl.stack);
	$.addLoading(obj);
	param = new Object();
	param.ssid = $.qd.wl.ssid;
	param.standard = $.qd.wl.mode;
	param.channel = $.qd.wl.chnnl;
	param.autoChannel =  $.qd.wl.autoChan;
	param.bandWidth = $.qd.wl.bandwidth;
	param.multiMode = 3; //0 Router, 1 Repeater, 2 Client, 3 WISP

	param.apEn = 1;
	
	$.qm[$.curPage].__v = true;

	param.SSIDAdvertisementEnabled = $.qd.wl.ssidBcastEnable;
	$.exe(function(ret){ if (!ret) $.loadMain("qsWlScanClient.htm",param)});
}

function isHex(str)
{
	str=str.toLowerCase();
	for(var i=0;i<str.length;i++)
	{
		if((str.charAt(i)>='0'&&str.charAt(i)<='9')||(str.charAt(i)>='a'&&str.charAt(i)<='f'))
			continue;
		else
		{
			$.alert(ERR_WLAN_WDS_HEX_KEY_INVALID);
			return false;
		}
	}
	if(parseInt(str,16)==0)
	{
		$.alert(ERR_WLAN_WDS_HEX_KEY_OUTRANGE);
		return false;
	}
	return true;
}

function checkClientParam()
{
	var briSSID = $.id("bridgeSSID");
	var ssidLen = $.realLen(briSSID.value);

	if (ssidLen <= 0)
	{
		$.alert(ERR_WLAN_WDS_SSID_IS_EMPTY);
		briSSID.focus();
		briSSID.select();
		return false;
	}
	else if (ssidLen > 32)
	{
		$.alert(ERR_WLAN_WDS_SSID_LEN_OUTRANGE);
		briSSID.focus();
		briSSID.select();
		return false;
	}

	var bss = $.id("bridgeBSSID");
	if (bss.value.length == 0)
	{
		$.alert(ERR_WLAN_WDS_BSSID_IS_EMPTY);
		bss.focus();
		bss.select();
		return false;
	}
	else if ($.mac(bss.value, true))
	{
		$.alert(ERR_WLAN_WDS_BSSID_INVALID);
		bss.focus();
		bss.select();
		return false;
	}
	
	var key = $.id("connKeyText");
	if ($.id("keyType").value == "none")
	{
	}
	else if ($.id("keyType").value == "wep")
	{
        if ($.id("wepkeyFormat").value == "ascii")
		{ 
			if (key.value.length != 5 && key.value.length != 13 && key.value.length != 16)
			{
				$.alert(ERR_WLAN_WDS_ASCII_KEY_OUTRANGE);
				key.focus();
				key.select();
				return false;
			}
			else if($.asc(key.value,true))
			{
				$.alert(ERR_WLAN_WDS_ASCII_KEY_INVALID);
				key.focus();
				key.select();
				return false;				
			}
		}
        else if ($.id("wepkeyFormat").value == "hex")
		{
			if (key.value.length != 10 && key.value.length != 26 && key.value.length != 32)
			{
                $.alert(ERR_WLAN_WDS_HEX_KEY_OUTRANGE);
                key.focus();
                key.select();
                return false;
            }		
			else if(!isHex(key.value))
			{
				key.focus();
				key.select();
				return false;			
			}				
		}
	}
	else
	{
		if (key.value.length > 64 || key.value.length < 8)
		{
			$.alert(ERR_WLAN_WDS_PSK_OUTRANGE);
			key.focus();
			key.select();
			return false;
		}
		else if (key.value.length == 64)
		{
			if (!isHex(key.value))
			{
				key.focus();
				key.select();
				return false;
			}
		}
		else
		{
			if ($.asc(key.value,true))
			{
				$.alert(ERR_WLAN_WDS_ASCII_KEY_INVALID);
				key.focus();
				key.select();
				return false;
			}
		}
	}

	return true;
}

function doCollectClientSettings()
{
	if (false == checkClientParam())
	{
		return false;
	}

	var index = 0;
	if (INCLUDE_LAN_WLAN_WDS)
	{
		var wdsEn = $.id("host_re").checked ? 1 : 0;
	}

	var vapIndex = 0;

	if ($.id("keyType").value == "none")
	{
		authMode = "Open";
		encryptMode = "None";
	}
	else if($.id("keyType").value == "wep")
	{
		encryptMode = "WEPEncryption";
		if($.id("authType").value == "open")
		{
			authMode = "Open";
		}
		else
		{
			authMode = "SharedAuthentication";
		}
	}
	else if($.id("keyType").value == "wpa")
	{
		authMode="PSKAuthentication";
		//		encryptMode="AESEncryption";
	}
	else if($.id("keyType").value == "wpa2")
	{
		authMode = "PSK2Authentication";
		//		encryptMode = "AESEncryption";
	}		
	else
	{
		authMode = "PSK2Authentication";
		//		encryptMode = "AESEncryption";
	}

	if (INCLUDE_LAN_WLAN_WDS)
	{
		$.qd.wds.bridgeEnable = wdsEn;
		if (1 == wdsEn)
		{
			$.qd.wds.ssid = $.id("bridgeSSID").value;
			$.qd.wds.bssid = $.id("bridgeBSSID").value;
			$.qd.wds.authMode = authMode;
			$.qd.wds.encryptMode = encryptMode;
			$.qd.wds.wepKeyIndex = $.id("connWepidx").value;
			$.qd.wds.key = $.id("connKeyText").value;
		}
	}

	if ($.id("keyType").value != "none" && encryptMode == 'WEPEncryption')
	{
		$.qd.wps.enable = 0;
	}

	return true;
}

function checkApParam()
{
	var extSSID=$.id("extssid");
	var ssidLen=$.realLen(extSSID.value);
	if(ssidLen<=0)
	{
		$.alert(ERR_WLAN_SSID_IS_EMPTY);
		extSSID.focus();
		extSSID.select();
		return false;
	}
	else if(ssidLen>32)
	{
		$.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
		extSSID.focus();
		extSSID.select();
		return false;
	}

	var key=$.id("extKeyText");
	if($.id("sec_select").value=="none")
	{
	}
	else if($.id("sec_select").value=="wep")
	{
		if(key.value.length!=5&&key.value.length!=13&&key.value.length!=16&&key.value.length!=10&&key.value.length!=26&&key.value.length!=32)
		{
			$.alert(ERR_WLAN_WDS_ASCII_KEY_OUTRANGE);
			key.focus();
			key.select();
			return false;
		}
		else
		{
			if(key.value.length==5||key.value.length==13||key.value.length==16)
			{
				if($.asc(key.value,true))
				{
					$.alert(ERR_WLAN_WDS_ASCII_KEY_INVALID);
					key.focus();
					key.select();
					return false;				
				}
			}
			else if(key.value.length==10||key.value.length==26||key.value.length==32)
			{
				if(!isHex(key.value))
				{
					key.focus();
					key.select();
					return false;			
				}				
			}
		}		
	}
	else
	{
		if(key.value.length>64||key.value.length<8)
		{
			$.alert(ERR_WLAN_WPA_PSK_LENGTH_INVALID);
			key.focus();
			key.select();
			return false;
		}
		else if(key.value.length==64)
		{
			if(!isHex(key.value))
			{
				key.focus();
				key.select();
				return false;
			}
		}
		else
		{
			if($.asc(key.value,true))
			{
				$.alert(ERR_WLAN_WPA_PSK_ASCII_INVALID);
				key.focus();
				key.select();
				return false;
			}
		}
	}

	return true;
}

function doCollectApSettings()
{
	if (false == checkApParam())
	{
		return false;
	}

	var ssid = $.id("extssid").value;
	var apEn = $.id("apen").checked ? 1 : 0;

	var ssidBcastEnabled = $.id("ssidBroadcast").checked ? 1 : 0;

	var vapIndex =0;
	
	$.qd.wl.en = true;
	$.qd.wl.ssid = ssid;
	$.qd.wl.ssidBcastEnable = ssidBcastEnabled;
        $.qd.wl.sec = true;
	if ($.id("sec_select").value == "none")
	{
		$.qd.wl.beaconType = "Basic";
		$.qd.wl.basicEncryptionModes = "None";
		$.qd.wl.basicAuthenticationMode = "None";
		$.qd.wl.sec = false;
	}
	else if ($.id("sec_select").value == "wep")
	{
		var index=0;
		var authType;

		authType = "Auto";
		wepKeyIdx = $.id("extWepidx").value;

		$.each($.qd.wepList, function(arg,index) {
			var key;
			if ($.id("extWepidx").value != (index + 1))
			{
				key = "";
			}
			else
			{
				key = $.id("extKeyText").value;
			}
				
			/* $.act(ACT_SET, LAN_WLAN_WEPKEY, this.__stack, null, ["WEPKey="+key]); */
			this.WEPKey = key;
		});

		$.qd.wl.pwd = $.id("extKeyText").value;

		/*
		$.act(ACT_SET, LAN_WLAN, $.qd.wl.stack, null, 
				["BeaconType=Basic",
				"WEPKeyIndex=" + wepKeyIdx,
				"BasicAuthenticationMode=" + authType,
				"BasicEncryptionModes=WEPEncryption"]); */

		$.qd.wl.beaconType = "Basic";
		$.qd.wl.wepKeyIndex = wepKeyIdx;
		$.qd.wl.basicAuthenticationMode = authType;
		$.qd.wl.basicEncryptionModes = "WEPEncryption";
		$.qd.wl.encryptMode = "WEPEncryption";
	}
	else if($.id("sec_select").value == "wpa")
	{
		var groupInterval = X_TP_GroupKeyUpdateInterval;
		var encryType = "AESEncryption";
		/*
		$.act(ACT_SET, LAN_WLAN, $.qd.wl.stack, null, 
				["BeaconType=WPAand11i", "WPAEncryptionModes=" + encryType,
				"WPAAuthenticationMode=PSKAuthentication","IEEE11iAuthenticationMode=PSKAuthentication",
				"IEEE11iEncryptionModes=" + encryType,"X_TP_PreSharedKey=" + $.id("extKeyText").value,
				"X_TP_GroupKeyUpdateInterval=" + groupInterval]);
				*/
		$.qd.wl.beaconType = "WPAand11i";
		$.qd.wl.wpaModes = encryType;
		$.qd.wl.wpaAuthenticationMode = "PSKAuthentication";
		$.qd.wl.ieee11iAuthenticationMode = "PSKAuthentication";
		$.qd.wl.ieee11iEncryptionModes = encryType;
		$.qd.wl.psk = $.id("extKeyText").value;
		$.qd.wl.pwd = $.qd.wl.psk;
		$.qd.wl.groupKeyUpdateInterval = groupInterval;
	}

	return true;
}

function doCollectRegionSetting()
{
	if (INCLUDE_FORCE_REGION_SELECT && $.id("region").value == -1)
	{
		if (typeof ERR_WLAN_REGION_IS_EMPTY == "undefined")
			alert("Please Select the Region !");
		else
			$.alert(ERR_WLAN_REGION_IS_EMPTY);
				
		$.id("region").focus();
		
		return false;
	}

	var domain = regionCodeInfo[$.id("region").value][1];
	if ($.qd.wl.domain != domain || 
			(INCLUDE_FORCE_REGION_SELECT && $.qd.wl.domainSetByUser == 0))
	{
		if (INCLUDE_FORCE_REGION_SELECT)
		{
			$.qd.wl.domainSetByUser = 1;
			$.qd.wl.domain = domain;
		}
		else
		{
			$.qd.wl.domain = domain;
		}
	}

	$.qd.wl.power = $.id("txpower").value;

	return true;
}

function doCollect()
{
	return doCollectRegionSetting() && 
		doCollectClientSettings() &&
		doCollectApSettings();
}

function goNext()
{
	if (INCLUDE_FORCE_REGION_SELECT && $.id("region").value == -1)
	{
		if (typeof ERR_WLAN_REGION_IS_EMPTY == "undefined")
			alert("Please Select the Region !");
		else
			$.alert(ERR_WLAN_REGION_IS_EMPTY);			

		$.id("region").focus();
		//$.id("region").select();		
		return false;
	}
	if (!doCollect()) {
		return;
	}
	$.qf.next();
}

function goPrev()
{
    $.qf.prev();
}
</script>
<p class="et T" id="et">Quick Setup - Wireless</p>
<div class="con1 M">
	<p class="ct"></p>
	<p class="bl"></p>

	<div class="con2" id="regionBox">
		<p class="st T T_region nd" id="regionTitle">Region</p><br/>
		<p id="regionSelection" class="nd">
			<b class="item T T_region">Region</b> 
			<select id="region" name="region" onchange="changeRegion();"> </select>
		</p>
		<p class="warning nd" id="regionNote">
			<b class="item T T_warn">Warning:</b>
			<span class="fl" style="width:60%">
				<span class="T" id="t_warn1">Please ensure to select the correct country for your current region to confirm with local laws.</span><br/>
				<span class="T" id="t_warn2">Incorrect settings may cause interference.</span>
			</span>
		</p>
		<p>
			<b class="item T T_txpow">Transmit Power:</b>
			<select id="txpower" name="txpower" onchange="changePower();"></select>
		</p>
		<p class="warning nd" id="powNote">
			<b class="item T T_note">Note:</b>
			<span class="fl">
				<span class="T" id="t_pownote">Transmit Power you set beyond the local criterion.</span>
			</span>
		</p>
		<p class="bl"></p>
	</div>

	<div class="con2">
		<p class="st T " id="t_cli">Client Setting</p><br/>

		<p class="nd">
			<b class="item T T_host_net">2.4GHz Network:</b>
			<input id="host_re" type="checkbox" onclick="changeConnSec();"/>
			<span class="T" id="t_enre">Connect to 2.4GHz Network</span>
		</p>

		<p>
			<b class="item T" id="t_brssid">SSID(to be bridged):</b>
			<input type="text" class="T" size="24" maxlength="32" id="bridgeSSID"/>
		</p>
		<p>
			<b class="item T" id="t_brbssid">MAC Address(to be bridged):</b>
			<input type="text" class="T" size="24" maxlength="32" id="bridgeBSSID"/>
		</p>
		<p class="scanner_line">
			<b class="item">&nbsp;</b>
			<input type="button" class="button XL T" id="t_scanner" value="Wireless Scanner" onclick="apScan(this);"/>
		</p>
		<p>
			<b class="item T T_security">Security:</b>
			<select id="keyType" name="keyType" style="width:160px" onchange="changeConnSec();">
				<option value="none" class="T T_noneEnc">No Security</option>
				<option value="wpa" selected>WPA-PSK</option>
				<option value="wpa2" selected>WPA2-PSK</option>
				<option value="wep">WEP</option>
			</select>
		</p>

		<div id="wpa_tkip_notice">
			<p>
				<b class="item">&nbsp;</b>
				<span class="L fl warning" id="t_tkip_notice">
					We do not recommend using the TKIP encryption if this device operates in 802.11n mode due to the fact that TKIP is not supported by 802.11n specification.
				</span>
			</p>
		</div>
		<div id="wep_security">
			<p>
				<b class="item">&nbsp;</b>
				<span class="L fl warning" id="t_wep_notice">
				We do not recommend using the WEP encryption if this device operates in 802.11n mode due to the fact that WEP is not supported by 802.11n specification.
				</span>
			</p>
			<p>
				<b class="item T" id="t_wepidx">Index:</b>
				<select id="connWepidx" name="connWepidx" style="width:160px">
					<option value="1" class="T T_idx1" selected>1</option>
					<option value="2" class="T T_idx2">2</option>
					<option value="3" class="T T_idx3">3</option>
					<option value="4" class="T T_idx4">4</option>
				</select>
			</p>
			<p>
				<b class="item T T_authtype">WEP Authentication Type:</b>
				<select id="authType" name="authType" style="width:160px">
					<option class="T T_opensys" value="open">Open System</option>
					<option class="T T_sharekey" value="shared">Shared Key</option>
				</select>
			</p>
			<p>
				<b class="item T" id="t_weptype">WEP KeyFormat:</b>
				<select id="wepkeyFormat" name="wepkeyFormat" style="width:160px">
					<option class="T T_ascii" value="ascii">ASCII</option>
					<option class="T T_hex" value="hex">Hexadecimal</option>
				</select>
			</p>
		</div>
		<div id="password">
			<p>
				<b class="item T T_passwd">Password:</b>
				<input type=text class="T" id="connKeyText" size="24"/>
			</p>
		</div>
		<p class="bl"></p>
	</div>

	<div class="con2">
		<p class="st T" id="t_ap">AP Setting</p><br/>
		<p class="nd">
			<b class="item T T_ext_net">Extended 2.4GHz:</b>
			<input id="apen" type="checkbox"/><span class="T" id="t_enre">Enable</span>
		</p>
		<p>
			<b class="item T" id="t_localwlname">Extended 2.4GHz SSID:</b>
			<input type="text" class="T" size="24" maxlength="32" id="extssid"/>
		</p>
		<p>
			<b class="item T" id="t_ext_security">Extended 2.4GHz Security:</b>
			<select id="sec_select" name="sec_select" onchange="changeSec();">
				<option value="none" class="T T_noneEnc">No Security</option>
				<option value="wpa" selected>WPA-PSK/WPA2-PSK</option>
				<option value="wep">WEP</option>
			</select>
		</p>
		<p>
			<b class="item T" id="t_ext_password">Extended 2.4GHz Password:</b>
			<input type=text class="T" id="extKeyText" size="24" />
		</p>
		<div id="wep_idx">
			<p>
				<b class="item">&nbsp;</b>
				<span class="L fl warning" id="t_ext_wep_notice">
				We do not recommend using the WEP encryption if this device operates in 802.11n mode due to the fact that WEP is not supported by 802.11n specification.
				</span>
			</p>
			<p>
				<b class="item T" id="t_ext_wepidx">Index:</b>
				<select id="extWepidx" name="extWepidx" style = "width:160px">
					<option value="1" class="T T_idx1" selected>1</option>
					<option value="2" class="T T_idx2">2</option>
					<option value="3" class="T T_idx3">3</option>
					<option value="4" class="T T_idx4">4</option>
				</select>
			</p>
		</div>

		<p> 
			<b class="item">&nbsp;</b> 
			<input id="ssidBroadcast" type="checkbox" value="1"/><span class="T T_enSsidBrc" id="t_enbcast">Enable SSID Broadcast</span>
		</p>
	</div>

	<p class="bl"></p>
	<p class="tail ctr">
	    <input type="button" class="button L T T_back" value="Back" onclick="goPrev()" />
	    <input type="button" class="button L T T_next" value="Next" onclick="goNext()" />
	</p>

</div>

<script language="javascript" type="text/javascript">

var wepList, wlanObj, wdsObj;
var wepKeyArray = new Array(4);
if (INCLUDE_FORCE_REGION_SELECT)
{
	var g_selectedIndex ;
}

(function() {
    $.loadHelpFrame("QsWlClientHelpRpm.htm");
    if (!$.mainParam) return $.loadMain("qsStart.htm");

    var requestArgs = [   
			"AutoChannelEnable",
			"BasicAuthenticationMode",
			"BasicEncryptionModes",
			"beaconType",
			"Channel",
			"enable",
			"IEEE11iAuthenticationMode",
			"IEEE11iEncryptionModes",
			"name",
			"PossibleChannels",
			"RegulatoryDomain",
			"SSID",
			"SSIDAdvertisementEnabled",
			"Standard",
			"TransmitPower",
			"WMMEnable",
			"WPAAuthenticationMode",
			"WEPEncryptionLevel",
			"WPAEncryptionModes",
			"WEPKeyIndex",
			"X_TP_Band",
			"X_TP_Bandwidth",
			"X_TP_Configuration_Modified",
			"X_TP_FragmentThreshold",
			"X_TP_GroupKeyUpdateInterval",
			"X_TP_PreSharedKey",
			"X_TP_RadiusServerIP",
			"X_TP_RadiusServerPassword",
			"X_TP_RadiusServerPort",
			"X_TP_ShowRegionSelectionOnWeb"
			];

    if (INCLUDE_FORCE_REGION_SELECT)
    {
	    requestArgs.push("X_TP_DomainSetByUser");
    }

    if (INCLUDE_WLAN_REGION_LIST)
    {
	    requestArgs.push("X_TP_SupportedRegionList");
    }

    if (!$.qm[$.curPage].__v) {
        $.qd.wl = {};
        var wls = $.act(ACT_GL, LAN_WLAN, null, null, requestArgs);
        if ($.exe()) return;

        if ($.local) {
            wls = [{
                name: "wlan0",
                enable: "1",
                standard: "n",
                SSID: "TPLINK_332265",
                regulatoryDomain: "CN ",
                possibleChannels: "1-13",
                autoChannelEnable: "1",
                channel: "11",
                X_TP_PreSharedKey: "12345678"
            }];
        }
        if (INCLUDE_LAN_WLAN_DUALBAND)
        {
            $.each(wls, function(arg, index) {
                if ($.mainParam.band == this.X_TP_Band)
                {
                    wlanObj = this;
                    return;
                }
            });
        }
        else
        {
            wlanObj = wls[0];
        }
        $.qd.wl.stack = wlanObj.__stack;
/*        $.qd.wl.en = 1; */
        $.qd.wl.autoChan = wlanObj.autoChannelEnable;
	$.qd.wl.basicAuthenticationMode = wlanObj.basicAuthenticationMode;
	$.qd.wl.basicEncryptionModes = wlanObj.basicEncryptionModes;
	$.qd.wl.beaconType = wlanObj.beaconType;
        $.qd.wl.chnn = wlanObj.channel; //auto Channel // channel
	$.qd.wl.enable = wlanObj.enable;
	$.qd.wl.ieee11iAuthenticationMode = wlanObj.IEEE11iAuthenticationMode;
	$.qd.wl.ieee11iEncryptionModes = wlanObj.IEEE11iEncryptionModes;
	$.qd.wl.name = wlanObj.name;
        $.qd.wl.chnns = wlanObj.possibleChannels;
        $.qd.wl.domain = wlanObj.regulatoryDomain;
        $.qd.wl.ssid = wlanObj.SSID;
	$.qd.wl.ssidBcastEnable = wlanObj.SSIDAdvertisementEnabled;
        $.qd.wl.mode = wlanObj.standard;
	$.qd.wl.power = wlanObj.transmitPower;
	$.qd.wl.wmmEnable = wlanObj.WMMEnable;
	$.qd.wl.wpaAuthenticationMode = wlanObj.WPAAuthenticationMode;
	$.qd.wl.wepLevel = wlanObj.WEPEncryptionLevel;
	$.qd.wl.wpaModes = wlanObj.WPAEncryptionModes;
	$.qd.wl.wepKeyIndex = wlanObj.WEPKeyIndex;
        $.qd.wl.band = wlanObj.X_TP_Band;
        $.qd.wl.bandwidth = wlanObj.X_TP_Bandwidth;
	$.qd.wl.groupKeyUpdateInterval = wlanObj.X_TP_GroupKeyUpdateInterval;
        $.qd.wl.psk = wlanObj.X_TP_PreSharedKey;
	$.qd.wl.radiusServerIP = wlanObj.X_TP_RadiusServerIP;
	$.qd.wl.radiusServerPort = wlanObj.X_TP_RadiusServerPort;
	$.qd.wl.radiusServerPassword = wlanObj.X_TP_RadiusServerPassword;
        $.qd.wl.showRegion = wlanObj.X_TP_ShowRegionSelectionOnWeb;

	if (INCLUDE_FORCE_REGION_SELECT)
	{
		$.qd.wl.domainSetByUser = wlanObj.X_TP_DomainSetByUser;
	}

	if (INCLUDE_WLAN_REGION_LIST)
	{
		$.qd.wl.supportedRegionList= wlanObj.X_TP_SupportedRegionList;
	}

	if (INCLUDE_FORCE_REGION_SELECT)
	{
		$.qd.wl.domainSetByUser = wlanObj.X_TP_DomainSetByUser;
	}

        //$.qd.wl.pwd = wlanObj.X_TP_PreSharedKey;
        curChannel = wlanObj.channel;

        $.qd.wds = {};
	$.qd.wep = {};
	$.qd.wps = {};
        wdsObj = $.act(ACT_GET, LAN_WLAN_WDSBRIDGE, wlanObj.__stack, null,
			["BridgeEnable", "BridgeAddrMode", "BridgeBSSID", "BridgeSSID", "BridgeAuthMode",
			"BridgeEncryptMode", "BridgeKey", "BridgeWepKeyIndex"]);

	wepList = $.act(ACT_GL, LAN_WLAN_WEPKEY, null, wlanObj.__stack, ["WEPKey"]);

        if ($.exe()) return;

	$.qd.wepList = wepList;
	$.qd.wds.stack = wdsObj.__stack;
        $.qd.wds.enable = 1; //wdsObj.bridgeEnable;
	$.qd.wds.brdigeEnable = wdsObj.bridgeEnable;
        if (INCLUDE_LAN_WLAN_WDS_DETECT) {
            $.qd.wds.addrMode = wdsObj.bridgeAddrMode;
        }
        $.qd.wds.bssid = wdsObj.bridgeBSSID;
        $.qd.wds.ssid = wdsObj.bridgeSSID;
        $.qd.wds.authMode = wdsObj.bridgeAuthMode;
        $.qd.wds.encryptMode = wdsObj.bridgeEncryptMode;
        $.qd.wds.key = wdsObj.bridgeKey;
        $.qd.wds.wepKeyIndex = wdsObj.bridgeWepKeyIndex;
    }

    initRegionList($.qd.wl.domain);
    if (INCLUDE_FORCE_REGION_SELECT && $.qd.wl.domainSetByUser == 0 && $.qd.wl.showRegion == 1)
    {
	    var t_opt = $.c("option");
	    t_opt.text = "--Please Select--"; 
	    if (s_str.noselect)
		    t_opt.text = s_str.noselect ;
	    t_opt.value =  -1;

	    $.id("region").add(t_opt);
	    $.id("region").value = -1;
	    //$.id("region").remove(t_opt);
	    $.addClass(t_opt, "nd");
    }
    setPowerList($.qd.wl.domain);
    $.id("txpower").value = $.qd.wl.power;
    changePower();

    getParam();
    initShow();
})();
</script>
<script language="javascript" type="text/javascript">$.styleInputElements();</script>
