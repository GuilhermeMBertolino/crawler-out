<script language="javascript" type="text/javascript">
var bInSubnet = true;
var oldLanIp;
var oldLanMask;
var oldLanGw;
var ipList;
var dhcpCfg;
//var igmpCfg;
var tmpBrname = $.mainParam;
function doShowNote()
{
	if ($.id("enableRefer").checked == true)
	{
		$.id("show_refernote").style.display = "";
	}
	else if ($.id("enableRefer").checked == false)
	{
		$.id("show_refernote").style.display = "none";
	}
}
function isSameLan(lan1Ip, lan1Mask, lan2Ip, lan2Mask) {
	var count = 0;
	lan1a = lan1Ip.split('.');
	lan1m = lan1Mask.split('.');
	lan2a = lan2Ip.split('.');
	lan2m = lan2Mask.split('.');
	for (i = 0; i < 4; i++) 
	{
		l1a_n = parseInt(lan1a[i], 10);
		l1m_n = parseInt(lan1m[i], 10);
		l2a_n = parseInt(lan2a[i], 10);
		l2m_n = parseInt(lan2m[i], 10);

		if ((l1a_n & l1m_n) == (l2a_n & l2m_n))
			count++;
	}
	if (count == 4)
	{
		var testIp = $.ip2num(lan1Ip);
		var lanMask = $.ip2num(lan1Mask);
		if (((testIp & (~lanMask)) == 0) || ((testIp & (~lanMask)) == (~lanMask)))
			return false;
		else
			return true;
	}
	else
		return false;
}
function setDhcpAddresses() {
	var lanIp = $.id("lanIp").value;
	var netMask = $.id("netmask").value;
	var addrParts;
	var maskParts;
	var poolStart =[];
	var poolEnd =[];
	var index;
	var pos;
	var gw;
	
	$.id("ip1").value = "";
	$.id("ip2").value = "";

	if ($.ifip(lanIp, true))
	{
		$.alert(ERR_LAN_IP_INVAD);
		return false;
	}

	if ($.mask(netMask, true))
	{
		$.alert(ERR_LAN_MASK_INVAD);
		return false;
	}
	if ($.ipmask(lanIp, netMask, true))
	{
		$.alert(ERR_LAN_IPMASK_INVAD);
		return false;
	}
	
	addrParts = lanIp.split('.');
	maskParts = netMask.split('.');
	

	for (index = 0; index < 4; index++)
	{
		poolStart[index] = addrParts[index] & maskParts[index];
	}
	poolStart[3] += 1;

	for (index = 0; index < 3; index++)
	{
		poolEnd[index] = poolStart[index];
	}
	pos = $.getrightfirstonebitpos(maskParts[3]);
	poolEnd[3] = poolStart[3] + Math.pow(2,pos) - 3;
	

	if ((poolEnd[3]>=200)&&(poolStart[3]<=100))
	{
		poolStart[3] = 100;
		poolEnd[3] = 199;
	}

	for (index = 0; index < 4; index++)
	{
		if (index == 3 )
		{
			$.id("ip1").value = $.id("ip1").value + poolStart[index];
			$.id("ip2").value = $.id("ip2").value + poolEnd[index];
		}
		else
		{
			$.id("ip1").value = $.id("ip1").value + poolStart[index] + ".";
			$.id("ip2").value = $.id("ip2").value + poolEnd[index] + ".";
		}
	}
	

	$.id("gateway").value = $.id("lanIp").value;
}
function changeDhcpMode() {
	if ($.id("dhcp_disable").checked)
	{
		$.addClass($.id("dhcp_cfg_div"), "nd");
		$.addClass($.id("relay_div"), "nd");
	}
	else if ($.id("dhcp_relay").checked)
	{
		$.addClass($.id("dhcp_cfg_div"), "nd");
		$.removeClass($.id("relay_div"), "nd");
	}
	else
	{
		$.removeClass($.id("dhcp_cfg_div"), "nd");
		$.addClass($.id("relay_div"), "nd");
	}
}
function secIpClick() {
	if ($.id("secIp_en").checked == 1)
		$.removeClass($.id('secIp_div'), 'nd');
	else
		$.addClass($.id('secIp_div'), 'nd');
}
function init() {
	if (INCLUDE_UN_IPTV) {
		$.addClass($.id("igmp_snoop"), "nd");
	}
    if (INCLUDE_LAN_AP_GATEWAY) {
        $.removeClass($.id("static_Gateway"), 'nd');
    }
	$.act(ACT_CGI, "/cgi/info");
	var brList = $.act(ACT_GL, L2_BRIDGING_ENTRY, null, null, ["bridgeName"]);
	if (!$.exe()) {
		if (brList.length == 1) {
			$.addClass($.id("returnBtn"), "nd");
		}
		for(var index = 0; index < brList.length; index++) {
			if (brList[index].bridgeName == tmpBrname) {
				dhcpCfg = $.act(ACT_GET, LAN_HOST_CFG, brList[index].__stack, null, null);
				if (INCLUDE_LAN_AP_GATEWAY) {
					if(INCLUDE_ENABLE_REFER)
						ipList = $.act(ACT_GS, LAN_IP_INTF, null, brList[index].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "__ifName", "IPInterfaceGateway", "X_TP_MACAddress", "enableRefer"]);
					else
						ipList = $.act(ACT_GS, LAN_IP_INTF, null, brList[index].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "__ifName", "IPInterfaceGateway", "X_TP_MACAddress"]);
				} else{
					if(INCLUDE_ENABLE_REFER)
						ipList = $.act(ACT_GS, LAN_IP_INTF, null, brList[index].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "__ifName", "X_TP_MACAddress", "enableRefer"]);
					else
						ipList = $.act(ACT_GS, LAN_IP_INTF, null, brList[index].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "__ifName", "X_TP_MACAddress"]);
				}
				//igmpCfg = $.act(ACT_GET, LAN_IGMP_SNOOP, brList[index].__stack, null, ["enabled"]);
				if(!$.exe()) {
					$.h($.id("brname"), brList[index].bridgeName);
					if (dhcpCfg.DHCPServerEnable == 0) {
						$.id("dhcp_disable").checked = 1;
					} else if (dhcpCfg.DHCPServerEnable == 1 && dhcpCfg.DHCPRelay == 1) {
						$.id("dhcp_relay").checked = 1;
					} else {
						$.id("dhcp_enable").checked = 1;
					}
					oldLanIp = (ipList[0].IPInterfaceIPAddress) ? ipList[0].IPInterfaceIPAddress : "0.0.0.0";
					oldLanMask = (ipList[0].IPInterfaceSubnetMask) ? ipList[0].IPInterfaceSubnetMask : "0.0.0.0";
					if (INCLUDE_LAN_AP_GATEWAY) {
						oldLanGw = (ipList[0].IPInterfaceGateway) ? ipList[0].IPInterfaceGateway : "0.0.0.0";
						$.id("static_gateway").value = oldLanGw;
					}
					if(INCLUDE_ENABLE_REFER)
					{
						$.id("enableRefer").checked = (ipList[0].enableRefer == 1) ? true : false;
						$.id("show_refer_switch").style.display = "";
						$.id("show_refernote").style.display = (ipList[0].enableRefer == 1) ? "" : "none";
					}
					bInSubnet = !$.ipmaskgw(oldLanIp, oldLanMask, clientIp, true);
					$.id("lanIp").value = oldLanIp;
					$.id("netmask").value = oldLanMask;
					$.h($.id("lanmac"),ipList[0].X_TP_MACAddress);

					$.id("ip1").value = (dhcpCfg.minAddress) ? dhcpCfg.minAddress : "0.0.0.0";
					$.id("ip2").value = (dhcpCfg.maxAddress) ? dhcpCfg.maxAddress : "0.0.0.0";
					$.id("lease").value = (dhcpCfg.DHCPLeaseTime == "") ? 1440 : (dhcpCfg.DHCPLeaseTime/60);
					$.id("gateway").value = (dhcpCfg.IPRouters == "") ? "0.0.0.0" : dhcpCfg.IPRouters;									
					$.id("domain").value = (dhcpCfg.domainName == "") ? "" : dhcpCfg.domainName;
					$.id("dnsserver1").value = (dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[0];
					$.id("dnsserver2").value = (dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[1];
					$.id("rmtSrv").value = (dhcpCfg.X_TP_DhcpRelayServer == "") ? "0.0.0.0" : dhcpCfg.X_TP_DhcpRelayServer;
				//	if (!INCLUDE_UN_IPTV)
				//	{
				//		$.id("igmp_en").checked = (igmpCfg.enabled == 1) ? 1 : 0;
				//	}
					

					if (ipList.length == 1) {
						$.id("secIp_en").checked = 0;
						$.addClass($.id("secIp_div"), "nd");
					} else if (ipList.length == 2) {
						$.id("secIp_en").checked = 1;
						$.removeClass($.id("secIp_div"), "nd");
						$.id("secIp").value = (ipList[1].IPInterfaceIPAddress) ? ipList[1].IPInterfaceIPAddress : "0.0.0.0";
						$.id("secMask").value = (ipList[1].IPInterfaceSubnetMask) ? ipList[1].IPInterfaceSubnetMask : "0.0.0.0";
					}
					if(INCLUDE_SMART_DHCP) {
						$.removeClass($.id("address-type-div"), "nd");
						$.id("lantype").value = dhcpCfg.X_TP_DHCPAuto;
						changeLanType();
					}
				}
				break;
			}
		}
	}
	changeDhcpMode();
/*	wanIpConList = $.act(ACT_GL, WAN_IP_CONN, null, null);
	wanPppConList = $.act(ACT_GL, WAN_PPP_CONN, null, null);

	if (!$.exe()) {
		$.each(wanIpConList, function() {
			if (this.enable == 1) {
				if (this.X_TP_IGMPProxyEnabled == 1)
					$.id("imgp_proxy").value = "igmpen";
				else
					$.id("imgp_proxy").value = "igmpdis";
			}
		});

		$.each(wanPppConList, function() {
			if (this.enable == 1) {
				if(this.X_TP_IGMPProxyEnabled == 1)
					$.id("imgp_proxy").value = "igmpen";
				else
					$.id("imgp_proxy").value = "igmpdis";
			}

		});
	}*/
}
function addAttrs() {
	var element;
	if ($.ifip($.id("lanIp").value, true)) {
		$.alert(ERR_LAN_IP_INVAD);
		element = $.id("lanIp");
		if(element) {
			element.focus();
			element.select();
		}
		return false;
	}
	if ($.mask($.id("netmask").value, true)) {
		$.alert(ERR_LAN_MASK_INVAD);
		element = $.id("netmask");
		if(element) {
			element.focus();
			element.select();
		}
		return false;
	}

	if ($.ipmask($.id("lanIp").value, $.id("netmask").value, true)) {
		$.alert(ERR_LAN_IPMASK_INVAD);
		element = $.id("lanIp");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (INCLUDE_LAN_AP_GATEWAY) {
		if (($.id("static_gateway").value != "") && $.ifip($.id("static_gateway").value, true)) {
			$.alert(ERR_DHCP_GATEWAY_INVAD);
			element = $.id ("static_gateway");
			if (element) {
				element.focus();
				element.select();
			}
			return false;
		}
		if ($.ipmaskgw($.id("lanIp").value, $.id("netmask").value, $.id("static_gateway").value, true)) {
			$.alert(ERR_GATEWAY_INVAD);
			element = $.id("static_gateway");
			if (element) {
				element.focus();
				element.select();
			}
			return false;
		}
	}
/*
	if ($.ifip($.id("ip1").value, true))
	{
		$.alert(ERR_DHCP_START_IP_INVAD);
		element = $.id("ip1");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if ($.ifip($.id("ip2").value, true))
	{
		$.alert(ERR_DHCP_END_IP_INVAD);
		element = $.id("ip2");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if ((parseInt($.id("ip1").value.split(".")[3], 10) == 0) || (parseInt($.id("ip1").value.split(".")[3], 10) == 255))
	{
		$.alert(ERR_DHCP_START_IP_INVAD_1);
		element = $.id("ip1");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if ((parseInt($.id("ip2").value.split(".")[3], 10) == 0) || (parseInt($.id("ip2").value.split(".")[3], 10) == 255))
	{
		$.alert(ERR_DHCP_END_IP_INVAD_1);
		element = $.id("ip2");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (!$.isOrderIp($.id("ip1").value, $.id("ip2").value))
	{
		$.alert(ERR_TC_IP_ORDER_INVAD);
		element = $.id("ip2");
		if(element){
			element.focus();
			element.select();
		}
		return;
	}
	if (!isSameLan($.id("ip1").value, $.id("netmask").value, $.id("lanIp").value, $.id("netmask").value))
	{
		$.alert(ERR_DHCP_POOL_INVAD);
		element = $.id("ip1");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (!isSameLan($.id("ip2").value, $.id("netmask").value, $.id("lanIp").value, $.id("netmask").value))
	{
		$.alert(ERR_DHCP_POOL_INVAD);
		element = $.id("ip2");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if ($.num($.id("lease").value, [1, 2880], true))
	{
		$.alert(ERR_DHCP_LEASE_INVAD);
		element = $.id("lease");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("gateway").value != "") && ($.id("gateway").value != "0.0.0.0") && ($.ifip($.id("gateway").value, true)))
	{
		$.alert(ERR_DHCP_GATEWAY_INVAD);
		element = $.id("gateway");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("gateway").value != "") && ($.id("gateway").value != "0.0.0.0") 
			&& (!isSameLan($.id("gateway").value, $.id("netmask").value, $.id("lanIp").value, $.id("netmask").value)))
	{
		$.alert(ERR_GATEWAY_INVAD);
		element = $.id("gateway");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("domain").value != "") && (!$.isdomain($.id("domain").value)))
	{
		$.alert(ERR_DOMAIN_INVAD);
		element = $.id("domain");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("dnsserver1").value != "") && ($.id("dnsserver1").value != "0.0.0.0") && ($.ifip($.id("dnsserver1").value, true)))
	{
		$.alert(ERR_DHCP_DNS1_INVAD);
		element = $.id("dnsserver1");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("dnsserver2").value != "") && ($.id("dnsserver2").value != "0.0.0.0") && ($.ifip($.id("dnsserver2").value, true)))
	{
		$.alert(ERR_DHCP_DNS2_INVAD);
		element = $.id("dnsserver2");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("dhcp_relay").checked == 1) && (($.id("rmtSrv").value == "") || ($.id("rmtSrv").value == "0.0.0.0")))
	{
		$.alert(ERR_DHCP_RMT_SRV_EMPTY);
		element = $.id("rmtSrv");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	if (($.id("rmtSrv").value != "") && ($.id("rmtSrv").value != "0.0.0.0") && ($.ifip($.id("rmtSrv").value, true)))
	{
		$.alert(ERR_DHCP_RMT_SRV_INVAD);
		element = $.id("rmtSrv");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}

	if($.id("secIp_en").checked == 1)
	{
		if ($.ifip($.id("secIp").value, true))
		{
			$.alert(ERR_IP_FORMAT);
			element = $.id("secIp");
			if(element){
				element.focus();
				element.select();
			}
			return false;
		}
		if ($.mask($.id("secMask").value, true))
		{
			$.alert(ERR_MASK_INVAD);
			element = $.id("secMask");
			if(element){
				element.focus();
				element.select();
			}
			return false;
		}
		if ($.ip2ip($.id("secIp").value) == $.ip2ip($.id("lanIp").value))
		{
			$.alert(ERR_LAN_SEC_IP_INVAD);
			element = $.id("secIp");
			if(element){
				element.focus();
				element.select();
			}
			return false;
		}
	}
	*/
	return true; 
}
function doSave()
{
	var ret;
	var dhcpEnable = 0;
	var dhcpRelayEnable = 0;
	
	if ($.id("dhcp_disable").checked)
	{
		dhcpEnable = 0;
		dhcpRelayEnable = 0;
	}
	else if ($.id("dhcp_enable").checked)
	{
		dhcpEnable = 1;
		dhcpRelayEnable = 0;
	}
	else if ($.id("dhcp_relay").checked)
	{
		dhcpEnable = 1;
		dhcpRelayEnable = 1;
	}
	
	if (!(ret = addAttrs()))
		return;
		
	var tmpLanIp =  ($.id("lanIp").value) ? $.id("lanIp").value : "0.0.0.0";
	var tmpLanMask =  ($.id("netmask").value) ? $.id("netmask").value : "0.0.0.0";
	if (INCLUDE_LAN_AP_GATEWAY) {
		var tmpLanGw = ($.id("static_gateway").value) ? $.id("static_gateway").value : "0.0.0.0";
	}
	if(INCLUDE_ENABLE_REFER)
	{
		var enRefer = $.id("enableRefer").checked ? 1 : 0;
	}
	var tmpMinAddr = ($.id("ip1").value) ? $.id("ip1").value : "0.0.0.0";
	var tmpMaxAddr = ($.id("ip2").value) ? $.id("ip2").value : "0.0.0.0";
	var tmpGateway = ($.id("gateway").value) ? $.id("gateway").value : "0.0.0.0";
	var tmpLease = ($.id("lease").value) ? parseInt($.id("lease").value, 10) : 1440;
	var tmpDomain = ($.id("domain").value) ? $.id("domain").value : "";
	var tmpDnsserver1 = ($.id("dnsserver1").value) ? $.id("dnsserver1").value : "0.0.0.0";
	var tmpDnsserver2 = ($.id("dnsserver2").value) ? $.id("dnsserver2").value : "0.0.0.0";
	var tmpRmtSrv = ($.id("rmtSrv").value) ? $.id("rmtSrv").value : "0.0.0.0";
	var tmpSecIp = ($.id("secIp").value) ? $.id("secIp").value : "0.0.0.0";
	var tmpSecMask = ($.id("secMask").value) ? $.id("secMask").value : "0.0.0.0";
	var bReboot = false;
	var bSmartIP = false;
	var paraChange = true;
	var oldValue;

	if (($.ip2num(oldLanIp) != $.ip2num(tmpLanIp) || $.ip2num(oldLanMask) != $.ip2num(tmpLanMask))) {
		bReboot = true;
	}else{
		paraChange = false;
	}

	var test = $.act(ACT_GET, LAN_HOST_CFG,dhcpCfg.__stack, null, ["X_TP_DHCPAuto"]);
	

	if(!$.exe()){
		oldValue = test.X_TP_DHCPAuto;
		if (oldValue == 0 && $.id("lantype").value == 1)
			paraChange = true;
	}

	if(INCLUDE_SMART_DHCP){
		if($.id("lantype").value == 1){
			$.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, ["X_TP_DHCPAuto=1"]);
			if(INCLUDE_ENABLE_REFER)
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceAddressingType=Static", "enableRefer=" + enRefer]);
			else
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceAddressingType=Static"]);
			bReboot = true;
			bSmartIP = true;		
		}
	}
	
	if (bReboot && paraChange)
	{
		if (!confirm(c_str.lan_reboot)) return;
	}
	
	$.addLoading($.id("saveBtn"));	
	
	if(INCLUDE_SMART_DHCP && $.id("lantype").value == 0){
		if (INCLUDE_LAN_AP_GATEWAY) {
			if(INCLUDE_ENABLE_REFER)
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceIPAddress=" + $.ip2ip(tmpLanIp), 
										"IPInterfaceSubnetMask=" + $.ip2ip(tmpLanMask),
										"IPInterfaceGateway=" + $.ip2ip(tmpLanGw),
										"IPInterfaceAddressingType=Static", "enableRefer=" + enRefer]);
			else
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceIPAddress=" + $.ip2ip(tmpLanIp), 
										"IPInterfaceSubnetMask=" + $.ip2ip(tmpLanMask),
										"IPInterfaceGateway=" + $.ip2ip(tmpLanGw),
										"IPInterfaceAddressingType=Static"]);
		}else {
			if(INCLUDE_ENABLE_REFER)
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceIPAddress=" + $.ip2ip(tmpLanIp), 
										"IPInterfaceSubnetMask=" + $.ip2ip(tmpLanMask),
										"IPInterfaceAddressingType=Static", "enableRefer=" + enRefer]);
			else
				$.act(ACT_SET, LAN_IP_INTF, ipList[0].__stack, null, ["IPInterfaceIPAddress=" + $.ip2ip(tmpLanIp), 
										"IPInterfaceSubnetMask=" + $.ip2ip(tmpLanMask),
										"IPInterfaceAddressingType=Static"]);
		}								
		$.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, ["DHCPServerEnable=1",
									"minAddress=" + $.ip2ip(tmpMinAddr),
									"maxAddress=" + $.ip2ip(tmpMaxAddr),
									"IPRouters=" + $.ip2ip(tmpGateway),
									"DHCPLeaseTime=" + (tmpLease * 60),
									"domainName=" + tmpDomain,
									"DNSServers=" + $.ip2ip(tmpLanIp) + "," + $.ip2ip(tmpDnsserver2),
									"DHCPRelay=" + dhcpRelayEnable,
									"X_TP_DhcpRelayServer=" + $.ip2ip(tmpRmtSrv),
									"X_TP_DHCPAuto=" + $.id("lantype").value]);
									
	}
	//if(!INCLUDE_UN_IPTV)
	//{
	//	$.act(ACT_SET, LAN_IGMP_SNOOP, igmpCfg.__stack, null, ["enabled=" + (($.id("igmp_en").checked) ? 1 : 0)]);
	//}
	
	if ($.id("secIp_en").checked == 1)
	{
		if (ipList.length == 1)
		{
			var pStk = ipList[0].__stack.split(",")[0] + ",0,0,0,0,0";
			$.act(ACT_ADD, LAN_IP_INTF, null, pStk, ["IPInterfaceIPAddress=" + $.ip2ip(tmpSecIp), 
								"IPInterfaceSubnetMask=" + $.ip2ip(tmpSecMask)]);	
		}
		else if (ipList.length == 2)
		{
			var oldLanIp2 = ipList[1].IPInterfaceIPAddress ? ipList[1].IPInterfaceIPAddress:"0.0.0.0";
			var oldLanMask2 = ipList[1].IPInterfaceSubnetMask ? ipList[1].IPInterfaceSubnetMask:"0.0.0.0";

			$.act(ACT_SET, LAN_IP_INTF, ipList[1].__stack, null, ["IPInterfaceIPAddress=" + $.ip2ip(tmpSecIp),  "IPInterfaceSubnetMask=" + $.ip2ip(tmpSecMask)]);	
		}
		
	}
	else if ($.id("secIp_en").checked == 0)
	{
		if (ipList.length == 2)
		{
			$.act(ACT_DEL, LAN_IP_INTF, ipList[1].__stack, null);	
		}
	}
	
/*	wanIpConList = $.act(ACT_GL, WAN_IP_CONN, null, null);
	wanPppConList = $.act(ACT_GL, WAN_PPP_CONN, null, null);

	if (!$.exe()) {
		$.each(wanIpConList, function() {
			if (this.enable == 1) {
				var enIgmpProxy=$.id("imgp_proxy").value == "igmpen" ? 1 : 0;
				$.act(ACT_SET, WAN_IP_CONN, this.__stack, null, 
					["X_TP_IGMPProxyEnabled=" + enIgmpProxy]);
			}
		});

		$.each(wanPppConList, function() {
			if (this.enable == 1) {
				var enIgmpProxy=$.id("imgp_proxy").value == "igmpen" ? 1 : 0;
				$.act(ACT_SET, WAN_PPP_CONN, this.__stack, null, 
					["X_TP_IGMPProxyEnabled=" + enIgmpProxy]);
			}
		});
	}*/
	
	$.exe(function(err)
	{
		if (!err)
		{
			if (bReboot)
			{
				if (bSmartIP)
				{
					tmpLanIp = dhcpCfg.X_TP_DefaultIp;
				}
			
				if (paraChange)
				{
				$.guage(["<span class='T T_rebooting'>"+s_str.rebooting+"</span>", "<span class='T T_wait_reboot'>"+s_str.wait_reboot+"</span>",], 100, 1200, function(){window.parent.$.refresh(tmpLanIp);});
				}else{
					$.loadMain("lanAP.htm");
				}
			
			}
			else
			{
				$.loadMain("lanAP.htm");
			}
		}
	});
	
	
	
}

function changeLanType() {
	if($.id('lantype').value == 1){
		//if(dhcpCfg.X_TP_DHCPAuto != 0){
			$.id('lanIp').value = ipList[0].IPInterfaceIPAddress ? ipList[0].IPInterfaceIPAddress : dhcpCfg.X_TP_DefaultIp;
			$.id('netmask').value = ipList[0].IPInterfaceSubnetMask ? ipList[0].IPInterfaceSubnetMask : "255.255.255.0";
		//}
		$.id("lanIp").disabled = true;
		$.id("netmask").disabled = true; 
		if(INCLUDE_LAN_AP_GATEWAY) {
			$.id("static_gateway").disabled = true;
		}
	}else{
		$.id("lanIp").value = ipList[0].IPInterfaceIPAddress ? ipList[0].IPInterfaceIPAddress : "0.0.0.0";
		$.id("netmask").value = ipList[0].IPInterfaceSubnetMask ? ipList[0].IPInterfaceSubnetMask : "255.255.255.0";
		$.id("lanIp").disabled = false;
		$.id("netmask").disabled = false;
		if(INCLUDE_LAN_AP_GATEWAY) {
			$.id("static_gateway").disabled = false;
		}
	}
}
</script>

<p class="et T" id="et">LAN</p>
<div class="con1 M">
<p class="ct"></p>
<p class="bl"></p>
<div class="con2">
<div class="nd" id="address-type-div">
<p><b class="item T T_lantype">Type: </b><select id="lantype" onchange="changeLanType()"><option value="0" class="T T_staip">Static IP</option><option value="1" id="t_smart">Smart IP(DHCP)</option></select></p>
<p><b class="item">&nbsp;</b><span class="L fl T" id="t_lantype1">Note: The IP parameters cannot be configured if you have chosen Smart IP(DHCP)</span></p>
<p class="br"></p>
<p><b class="item">&nbsp;</b><span class="L fl T" id="t_lantype2">(In this situation the device will help you configure the IP parameters automatically as you need).</span></p>
</div>
<p><b class="item">&nbsp;</b><span class="L fl L1 T nd" id="t_note">Note: If the LAN IP address or subnet mask is changed, please makes sure the DHCP Address Pool and the static IP assigned by DHCP Server are in the same subnet with the new LAN IP.</span></p>
<p class="br"></p>
<p class="L2 nd"><b class="item L T T_group">Group:</b><b style="padding-left:12px" id="brname"></b></p>
<p class="L2"><b class="item L T T_macaddr">MAC Address:</b><span id="lanmac"></span></p>
<p class="L2"><b class="item L T T_ipaddr">IP Address: </b><input class="text" type="text" size="15"  maxlength="15" id="lanIp" value="0.0.0.0" onchange="setDhcpAddresses()"/></p>
<p class="L2"><b class="item L T T_netmask">Subnet Mask: </b><input class="text" type="text" size="15"  maxlength="15" id="netmask" value="0.0.0.0" onchange="setDhcpAddresses()"/></p>
<p class="L2 nd" id="static_Gateway"><b class="item L T T_gateway">Gateway: </b><input class="text" type="text" size="15"  maxlength="15" id="static_gateway" value="192.168.0.1"/><span class="T T_optional">(optional)</span></p>
<p id="show_refer_switch" style="display:none"> 
  <b class="item">&nbsp;</b> 
  <input id="enableRefer" name="enableRefer" type="checkbox" onClick="doShowNote();"/> <span class="T" id="t_enableRefer">Allow remote access</span>
</p>
<p id="show_refernote" style="display:none;color:#C11C66"><b class="item">&nbsp;</b><span class="L fl T" id="t_referNote">Note: Remote access will lower the security level of local network, so it is suggested to <br>enable remote access only when is needed.</span></p>
<!-- <p class="L2"><b class="item L T T_igmpproxy">IGMP Proxy:</b>
<select id="imgp_proxy" class="M">
<option class="T T_disable" id="igmpdis" value="igmpdis" selected >Disabled</option>
<option class="T T_enbale" id="igmpen" value="igmpen">Enabled</option>
</select></p>
<span id="t_chng" style="color:#C11C66"><br>Note: IGMP(Internet Group Management Protocol) works for IPTV multicast stream.<br>The device supports both IGMP proxy with enable or disable option and IGMP snooping.</span> -->
<p class="br"></p>
<!--
<p class="L2" id="igmp_snoop"><b class="item L T" id="t_ensnoop">Enable IGMP Snooping</b><input type="checkbox" id="igmp_en"/></p>
-->
<p class="L2 nd"><b class="item L T" id="t_ensecip">Enable Second IP</b><input type="checkbox" id="secIp_en" onclick="secIpClick();"/></p>
<div id="secIp_div" class="nd">
<p class="L2"><b class="item L T T_ipaddr">IP Address: </b><input class="text" type="text" size="15"  maxlength="15" id="secIp" value="0.0.0.0" /></p>
<p class="L2"><b class="item L T T_netmask">Subnet Mask: </b><input class="text" type="text" size="15"  maxlength="15" id="secMask"  value="0.0.0.0"/></p>
</div>
<div id="dhcp_div" class="nd">
<p class="L2"><b class="item L T" id="t_dhcp">DHCP Server: </b>
<input name="dhcpserver"  id="dhcp_disable" type="radio" onclick="changeDhcpMode()"/><span class="T T_dis">Disable</span>
<input name="dhcpserver" id="dhcp_enable"  type="radio" onclick="changeDhcpMode()"/><span class="T T_en">Enable</span>
<input name="dhcpserver" id="dhcp_relay" type="radio" onclick="changeDhcpMode()"/><span class="T" id="t_relay">DHCP Relay</span>
</p>
<div id="dhcp_cfg_div">
<p class="L2"><b class="item L T" id="t_poolstart">Start IP Address: </b><input id="ip1" type="text" class="text" size="15" value="0.0.0.0" maxlength="15"/></p>
<p class="L2"><b class="item L T" id="t_poolend">End IP Address: </b><input id="ip2" type="text" class="text" size="15" value="0.0.0.0" maxlength="15"/></p>
<p class="L2"><b class="item L T" id="t_leasetime">Leased Time: </b><input id="lease" type="text" class="text" value="120" size="4"  maxlength="4"/> <span class="T T_minutes">minutes</span> <span class="T" id="t_leaseval" >(1~2880 minutes, the default value is 120)</span></p>
<p class="L2"><b class="item L T T_gateway">Gateway: </b><input id="gateway" type="text" class="text" value="0.0.0.0" size="15" maxlength="15"/><span class="T T_optional">(optional)</span></p>
<p class="L2"><b class="item L T" id="t_defdomain">Default Domain: </b><input id="domain" type="text" class="text" value="" size="15" maxlength="30"/><span class="T T_optional">(optional)</span></p>
<p class="L2"><b class="item L T T_dns">DNS server: </b><input id="dnsserver1" type="text" class="text" value="0.0.0.0" size="15" maxlength="15"/><span class="T T_optional">(optional)</span></p>
<p class="L2"><b class="item L T T_secdns">Secondary DNS server: </b><input id="dnsserver2" type="text" class="text" value="0.0.0.0" size="15" maxlength="15"/><span class="T T_optional">(optional)</span></p>
</div>
<div id="relay_div">
<p class="br"></p>
<p class="L2"><b class="item L T" id="t_remote">Remote Server Address:</b><input id="rmtSrv" type="text" class="text" value="" size="15" maxlength="15"/></p>
<p class="L1"><i class="T" id="t_relay_warn">Note: You have to disable NAT of the WAN connections. Or the DHCP Relay may not take effect!</i></p>
</div>
</div>
</div>
<p class="bl"></p>
<p class="tail" id="tail"><input type="button" class="button L T T_save" id="saveBtn" value="Save" onclick="doSave();" /><input type="button" class="button L T T_back nd" value="Back" onclick="$.loadMain('lan.htm')" /></p>
</div>
<script language="javascript" type="text/javascript">
	$.loadHelpFrame("NetworkCfgHelpRpm_AP.htm");
init();
</script>
<script language="javascript" type="text/javascript">$.styleInputElements();</script>
