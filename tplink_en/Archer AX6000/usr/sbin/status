#!/bin/sh

. /lib/bcmenet/bcmenet_c5400s.sh

local in_lan_status=""
local ou_lan_status=""
local wan_status=""
local in_lan_speed=""
local ou_lan_speed=""
local wan_speed=""
local speeds=""
local wan_duplex=""
local in_lan_duplex=""
local ou_lan_duplex=""
local duplexs=""

local support_53134=$(uci get profile.@switch[0].bcm490x_switch_support_53134 -c "/etc/profile.d" -q)

insert_status()
{
	eval $1=\"$2' '\$$1\"
}

append_status()
{
	eval $1=\"\$$1' '$2\"
}

get_nfield_info()
{
	local info=$(c5400s_get_lan_phy_state | awk -v unit=$1 -v filed=$2 '{
		if($2==unit)
		{
			if(NF>=filed)
			{
				print $filed
			}
			else
			{
				print "NONE"
			}
		}
	}')
	echo $info
}

prouce_status()
{
	local count=0
	for i in $1
	do
		let count=count+1
		if [ "$support_53134" == "yes" ]
		then
			#53134
			#insert_status "$2" "$i"

			#rtl8367s
			if [ $3 == 0 ]
			then
				insert_status "$2" "$i"
			else
				append_status "$2" "$i"
			fi
		else
			if [ $count -le 4 ]
			then
				insert_status "$2" "$i"
			else
				append_status "$2" "$i"
			fi
		fi
	done
}

get_in_lan_status()
{
	local tmp_status=$(get_nfield_info 1 5)
	tmp_status=$(echo $tmp_status | sed 's/down/unconnected/g;s/up/connected/g')
	prouce_status "$tmp_status" "in_lan_status" 0
}

get_ou_lan_status()
{
	local tmp_status=$(get_nfield_info 2 5)
	tmp_status=$(echo $tmp_status|sed 's/down/unconnected/g;s/up/connected/g')
	prouce_status "$tmp_status" "ou_lan_status" 1
}

get_lan_status()
{
	get_in_lan_status
	if [ "$support_53134" == "yes" ]
	then
		get_ou_lan_status
	fi
}

get_in_lan_speed()
{
	local tmp_status=$(get_nfield_info 1 6)
	tmp_status=$(echo $tmp_status | sed 's/NONE/0/g;s/M//g')
	prouce_status "$tmp_status" "in_lan_speed" 0
}

get_ou_lan_speed()
{
	local tmp_status=$(get_nfield_info 2 6)
	tmp_status=$(echo $tmp_status | sed 's/NONE/0/g;s/M//g')
	prouce_status "$tmp_status" "ou_lan_speed" 1
}

get_lan_speed()
{
	get_in_lan_speed
	if [ "$support_53134" == "yes" ]
	then
		get_ou_lan_speed $i
	fi
}

get_in_lan_duplex()
{
	local tmp_status=$(get_nfield_info 1 7)
	tmp_status=$(echo $tmp_status | sed 's/FD/FULL/g;s/HD/HALF/g')
	prouce_status "$tmp_status" "in_lan_duplex" 0
}

get_ou_lan_duplex()
{
	local tmp_status=$(get_nfield_info 2 7)
	tmp_status=$(echo $tmp_status | sed 's/FD/FULL/g;s/HD/HALF/g')
	prouce_status "$tmp_status" "ou_lan_duplex" 1
}

get_lan_duplex()
{
	get_in_lan_duplex
	if [ "$support_53134" == "yes" ]
	then
		get_ou_lan_duplex $i
	fi
}

phy1g_get_wan_speed()
{
	local speed=$(ethctl eth0 media-type | grep up | egrep -o "[0-9]+")
	if [ -n "$speed" ]
	then
		append_status "wan_speed" "$speed"
	else
		append_status "wan_speed" "0"
	fi
}

phy2g5_get_wan_speed()
{
	local speed=$(ethctl eth0 media-type | grep -i " Up " | egrep -o "[0-9\.]+.")
	if [ -n "$speed" ]
	then
		case $speed in
		"2.5G")
			speed="2500"
			;;
		"1G")
			speed="1000"
			;;
		"1000M")
			speed="1000"
			;;
		"100M")
			speed="100"
			;;
		*)
			echo "bad wan speed: $speed"
			speed="0"
			;;
		esac
		
		append_status "wan_speed" "$speed"
	else
		append_status "wan_speed" "0"
	fi
}

get_wan_speed()
{
	local phy_2g5_support=$(uci get profile.@phyport[0].phyport_2g5_support -c /etc/profile.d)

	if [ x"$phy_2g5_support" == x"yes" ]; then
		phy2g5_get_wan_speed
	else
		phy1g_get_wan_speed
	fi
}

get_wan_status()
{
	ethctl eth0 media-type | grep -q up
	if [ $? -eq 0 ]; then
		append_status "wan_status" "connected"
	else
		append_status "wan_status" "unconnected"
	fi
}

get_wan_duplex()
{
	local duplex=$(ethctl eth0 media-type | grep -i " Up " | egrep -io "duplex:.*"| awk '{print $2}')
	if [ -n "$duplex" ]
	then
		if [ "$duplex" == "FD" ]
		then
			append_status "wan_duplex" "FULL"
		else
			append_status "wan_duplex" "HALF"
		fi
	else
		append_status "wan_duplex" "NONE"
	fi
}

case $1 in
	"lan_status")
		get_lan_status
		echo -n $in_lan_status $ou_lan_status 
		;;
	"lan_speed")
		get_lan_speed
		echo -n $in_lan_speed $ou_lan_speed
		;;
	"wan_status")
		get_wan_status 
		echo -n $wan_status
		;;
	"wan_speed")
		get_wan_speed
		echo -n $wan_speed
		;;
	"lan_duplex")
		get_lan_duplex
		echo -n $in_lan_duplex $ou_lan_duplex
		;;
	"wan_duplex")
		get_wan_duplex
		echo -n $wan_duplex
		;;
	"speed")
		get_wan_speed
		get_lan_speed
		echo -n $wan_speed $in_lan_speed $ou_lan_speed
		;;
	"duplex")
		get_wan_duplex
		get_lan_duplex
		echo -n $wan_duplex $in_lan_duplex $ou_lan_duplex
		;;
		*)
		echo "bad choice"
		;;
esac



