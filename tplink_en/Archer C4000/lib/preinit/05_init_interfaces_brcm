#!/bin/sh

. /lib/switch/core_phy.sh

have_module () {
	grep "^$1" /proc/modules
	return $?
}

check_module () {
  module="$1"; shift; params="$*"

  insmod "$module" "$params"
  # sleep 1
  grep "^$module" /proc/modules
  return $?
}

vlan_untag () {
	echo "$(nvram get vlan$1ports)" | grep "u" -q
	return $?
}

init_eth () {
	check_module et && {
		
		set_defaut_duplex_all_ports

		# default to link down all 5 phy ports.
		# they will be link up when all apps is ready!
		link_down_all_ports
		# et driver will setup some default vlans based on nvram settings.
		clear_all_vlans

		vconfig set_name_type DEV_PLUS_VID_NO_PAD
		vconfig add eth0 1
	}
}

init_dpsta () {
	check_module dpsta
}

init_ctf () {
	#nvram set ctf_disable=0
	#nvram set nga_enable=1

	# ppp_generic depends on slhc
	check_module slhc
	
	# ctf depends on ppp_generic
	[ $? -eq 0 ] && check_module ppp_generic
        
	[ $? -eq 0 ] && {
        	router_ctf_disable=$(nvram get router_ctf_disable)
        	[ ! -z ${router_ctf_disable} ] && nvram set ctf_disable="${router_ctf_disable}"     
		
		[ "x$(nvram get ctf_disable)" = "x0" ] && check_module ctf
		# OR
		[ "x$(nvram get ctf_disable)" = "x" ] && check_module ctf
	}
}

init_emf () {
	check_module hnd && check_module emf && check_module igs
}

init_brcm_mount_fs(){
	/bin/mount -a

	# Mount point for determining image version
	mkdir /mnt/fs_update

	# Mount /dev/pts as devpts
	mkdir /dev/pts
	mount -t devpts devpts /dev/pts

	# Configure hotplug handler
	echo /etc/hp_wrapper.sh > /proc/sys/kernel/hotplug

	# Initialize and run mdev to crete dynamic device nodes
	/sbin/mdev -s

	# Create static device nodes
	/etc/make_static_devnodes.sh

	# set kernel printk loglevel to 1
	echo 1 > /proc/sys/kernel/printk
	
	# mount bootfs for upgrade 
	mount -t jffs2 mtd:bootfs /bootfs/ -r
	mount -t jffs2 mtd:data /data -rw
	
	# mount tp_data
	/etc/tp_data.sh mount_tpdata

	echo 1 > /proc/sys/kernel/printk
}

#
# The installation of some modules are moved to /etc/rc.d/S18bcment
# because they rely on configuration
#
init_brcm_base_drivers() {
	insmod /lib/modules/*/extra/wlcsm.ko

	insmod /lib/modules/*/extra/rdp_fpm.ko  
	insmod /lib/modules/*/extra/bdmf.ko bdmf_chrdev_major=215 

#	insmod /lib/modules/*/extra/rdpa_gpl.ko  
#	insmod /lib/modules/*/extra/rdpa_gpl_ext.ko  
#	insmod /lib/modules/*/extra/rdpa.ko  
#	insmod /lib/modules/*/extra/rdpa_mw.ko
	  
#	insmod /lib/modules/*/extra/chipinfo.ko  
#	insmod /lib/modules/*/extra/pktflow.ko
	
#	insmod /lib/modules/*/extra/bcm_enet.ko  

#	insmod /lib/modules/*/extra/pktrunner.ko  
#	insmod /lib/modules/*/extra/nciTMSkmod.ko

#	insmod /lib/modules/*/extra/wfd.ko 

#	insmod /lib/modules/*/extra/bcmvlan.ko  
#	insmod /lib/modules/*/extra/pwrmngtd.ko  
#	insmod /lib/modules/*/extra/bcmpdc.ko  
#	insmod /lib/modules/*/extra/bcmspu.ko  
	
#	insmod /lib/modules/*/extra/rdpa_cmd.ko

#	insmod /lib/modules/*/kernel/net/ipv4/netfilter/nf_nat_ipv4.ko
	insmod /lib/modules/*/kernel/net/ipv4/udp_tunnel.ko
	insmod /lib/modules/*/kernel/net/ipv6/ip6_udp_tunnel.ko
	insmod /lib/modules/*/kernel/net/ipv4/ip_tunnel.ko
#	insmod /lib/modules/*/kernel/net/ipv4/netfilter/nf_nat_masquerade_ipv4.ko
#	insmod /lib/modules/*/kernel/net/netfilter/nf_nat_redirect.ko
#	insmod /lib/modules/*/kernel/net/ipv6/netfilter/nf_reject_ipv6.ko

	if  [ ! -f /data/.kernel_nvram.setting ]; then
		cp /etc/wlan/kernel_nvram.setting /data/.kernel_nvram.setting
	fi
	nvram kernelset /data/.kernel_nvram.setting

}
#
# do init based on config, so
# Moved to /etc/rc.d/S18bcmenet
#	
init_brcm_enet() {
	/bin/swmdk &

	ethswctl -c wan -o enable -i eth0
	tmctl porttminit --devtype 0 --if eth0 --flag 1
	tmctl porttminit --devtype 0 --if eth1 --flag 1
	tmctl porttminit --devtype 0 --if eth2 --flag 1
	tmctl porttminit --devtype 0 --if eth3 --flag 1
	tmctl porttminit --devtype 0 --if eth4 --flag 1
	tmctl porttminit --devtype 0 --if eth5 --flag 1

	fcctl config --gre 0
}

init_brcm_base_config() {
	## for basic network config
    ifconfig lo 127.0.0.1 netmask 255.0.0.0 broadcast 127.255.255.255 up
	brctl addbr br-lan
	brctl setfd br-lan 0
	brctl stp br-lan on
	brctl addif br-lan eth1
	brctl addif br-lan eth2
	brctl addif br-lan eth3
	brctl addif br-lan eth4
    brctl addif br-lan eth5
	ifconfig eth1 up
	ifconfig eth2 up
	ifconfig eth3 up
	ifconfig eth4 up
    ifconfig eth5 up
	ifconfig br-lan 192.168.0.1 netmask 255.255.255.0 up
}

#init_br () {
#	brctl addbr br0
#	brctl setfd br0 0
#	brctl stp br0 off
#	brctl addif br0 eth0.1
#	#wireless iface to br0
#}

#boot_hook_add preinit_main init_ctf
#boot_hook_add preinit_main init_eth

#boot_hook_add preinit_main init_dpsta
#boot_hook_add preinit_main init_br

# For bcm4908 init function 
boot_hook_add preinit_main init_brcm_mount_fs
boot_hook_add preinit_main init_brcm_base_drivers
#boot_hook_add preinit_main init_brcm_enet
boot_hook_add preinit_main init_emf
#boot_hook_add preinit_main init_brcm_base_config

