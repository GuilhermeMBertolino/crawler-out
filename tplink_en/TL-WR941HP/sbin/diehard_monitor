#!/bin/sh
# Copyright (c) 2016 Shenzhen TP-LINK Technologies Co.Ltd.
# Author  : Tony Lin <tony.lin@tp-link.com>
# Date    : 15 Aug 2016

DIEHARD_MONITOR_PID="/var/run/diehard_monitor.pid"

local dnsmasq_enable
local hostapd_wifi0_disabled
local hostapd_wifi0_disabled_all
local hostapd_wifi1_disabled
local hostapd_wifi1_disabled_all
local hostapd_ath0_enable
local hostapd_ath1_enable
local hostapd_ath0_hidden
local hostapd_ath1_hidden
local hostapd_ath0_encryption
local hostapd_ath1_encryption
local hostapd_ath01_enable
local hostapd_ath11_enable
local hostapd_ath01_encryption
local hostapd_ath11_encryption
local wpa_ath02_enable
local wpa_ath12_enable
local process_name

MODE=$1

. /lib/config/uci.sh
. /lib/wifi/wireless_schedule_func.sh

CHECK_INTERVAL=15

[ -n $MODE ] || exit 0
[ -n $CHECK_INTERVAL ] || exit 0

diehard_debug_print() {
	local time=`date| awk '{split($0, array, " ")} END{print array[4]}'`
	echo "[diehard debug $time]: $1" > /dev/console
	return
}

if [ -e "${DIEHARD_MONITOR_PID}" ]
then
	local pid
	pid=`cat ${DIEHARD_MONITOR_PID}`
	if [ -n "$pid" ]
	then
		diehard_debug_print "kill previous $pid"
		kill -9 $pid
	fi
	rm -f ${DIEHARD_MONITOR_PID}
fi

echo $$ > ${DIEHARD_MONITOR_PID}
echo -1000 > /proc/$$/oom_score_adj

diehard_debug_print "Diehard monitor check at $MODE every $CHECK_INTERVAL seconds"

process_restart() {
	case $process_name in
		"dnsmasq")
			/etc/init.d/dnsmasq restart
			;;
		"hostapd"|"wpa_supplicant")
			/sbin/wifi reload
			;;
		"smartdhcp_monitor")
			/etc/init.d/smartdhcp restart
			;;
		"client_mgmt")
			/etc/init.d/client_mgmt restart
			;;
		"uhttpd")
			/etc/init.d/uhttpd restart
			;;
		"ubusd")
			/etc/init.d/ubus restart
			;;
		"netifd")
			/sbin/netifd &
			;;
	esac
}

reset_err() {
	case $process_name in
		"dnsmasq")
			dnsmasq_err=0
			;;
		"hostapd")
			hostapd_err=0
			;;
		"wpa_supplicant")
			wpa_supplicant_err=0
			;;
		"smartdhcp_monitor")
			smartdhcp_monitor_err=0
			;;
		"client_mgmt")
			client_mgmt_err=0
			;;
		"uhttpd")
			uhttpd_err=0
			;;
		"ubusd")
			ubusd_err=0
			;;
		"netifd")
			netifd_err=0
			;;
	esac
}

check_err() {
	local err=0
	diehard_debug_print "$process_name number error!!!"
	case $process_name in
		"dnsmasq")
			dnsmasq_err=$((dnsmasq_err+1))
			if [ "$dnsmasq_err" -gt "3" ]; then
				err=1
				dnsmasq_err=0
			fi
			;;
		"hostapd")
			hostapd_err=$((hostapd_err+1))
			if [ "$hostapd_err" -gt "3" ]; then
				process_restart
				diehard_debug_print "$process_name restart"
				hostapd_err=0
			fi
			;;
		"wpa_supplicant")
			wpa_supplicant_err=$((wpa_supplicant_err+1))
			if [ "$wpa_supplicant_err" -gt "3" ]; then
				process_restart
				diehard_debug_print "$process_name restart"
				wpa_supplicant_err=0
			fi
			;;
		"smartdhcp_monitor")
			smartdhcp_monitor_err=$((smartdhcp_monitor_err+1))
			if [ "$smartdhcp_monitor_err" -gt "3" ]; then
				err=1
				smartdhcp_monitor_err=0
			fi
			;;
		"client_mgmt")
			client_mgmt_err=$((client_mgmt_err+1))
			if [ "$client_mgmt_err" -gt "3" ]; then
				err=1
				client_mgmt_err=0
			fi
			;;
		"uhttpd")
			uhttpd_err=$((uhttpd_err+1))
			if [ "$uhttpd_err" -gt "3" ]; then
				err=1
				uhttpd_err=0
			fi
			;;
		"ubusd")
			ubusd_err=$((ubusd_err+1))
			if [ "$ubusd_err" -gt "3" ]; then
				err=1
				ubusd_err=0
			fi
			;;
		"netifd")
			netifd_err=$((netifd_err+1))
			if [ "$netifd_err" -gt "3" ]; then
				err=1
				netifd_err=0
			fi
			;;
	esac
	if [ "$err" -eq "1" ]; then
		for i in $1
		do
			diehard_debug_print "kill $i"
			kill -9 $i &
		done
		process_restart
		diehard_debug_print "$process_name restart"
	fi
}

check_process() {
	local pid=`pidof $process_name`
	local process_num=`echo $pid| awk '{n=split($0, array, " ")} END{print n}'`
	case $process_name in
		"wpa_supplicant")
			local wpa_supplicant_num=0
			if [ "$wpa_ath02_enable" == "on" ]; then
				wpa_supplicant_num=$((wpa_supplicant_num+1))
			fi
			if [ "$wpa_ath12_enable" == "on" ]; then		
				wpa_supplicant_num=$((wpa_supplicant_num+1))
			fi
			if [ "$process_num" -lt "$wpa_supplicant_num" ]; then
				check_err "$pid"
			else
				reset_err "$pid"
			fi
			;;
		"hostapd")
			local hostapd_num=0
			if [ "$hostapd_ath0_enable" == "on" ] && [ "$(wireless_schedule_disable_wifi 2g)" = "1" ]; then
				if [ "$hostapd_ath0_encryption" == "none" ] && [ "$hostapd_ath0_hidden" == "off" ]; then
					hostapd_num=$((hostapd_num+1))
				elif [ "$hostapd_ath0_encryption" == "psk" ]; then
					hostapd_num=$((hostapd_num+1))
				fi
			fi
			if [ "$hostapd_ath1_enable" == "on" ] && [ "$(wireless_schedule_disable_wifi 5g)" = "1" ]; then
				if [ "$hostapd_ath1_encryption" == "none" ] && [ "$hostapd_ath1_hidden" == "off" ]; then
					hostapd_num=$((hostapd_num+1))
				elif [ "$hostapd_ath1_encryption" == "psk" ]; then
					hostapd_num=$((hostapd_num+1))
				fi
			fi
			if [ $MODE == "router" ] || [ $MODE == "ap" ]; then
				if [ "$hostapd_ath0_enable" == "on" ] && [ "$hostapd_ath01_enable" == "on" ] && [ "$hostapd_ath01_encryption" == "psk" ] && [ "$(wireless_schedule_disable_wifi 2g)" = "1" ]; then
					hostapd_num=$((hostapd_num+1))
				fi
				if [ "$hostapd_ath1_enable" == "on" ] && [ "$hostapd_ath11_enable" == "on" ] && [ "$hostapd_ath11_encryption" == "psk" ] && [ "$(wireless_schedule_disable_wifi 5g)" = "1" ]; then
					hostapd_num=$((hostapd_num+1))
				fi
			fi
			if [ "$process_num" -lt "$hostapd_num" ]; then
				check_err "$pid"
			else
				reset_err "$pid"
			fi
			;;
		*)
			if [ "$process_num" -lt "1" ]; then
				check_err "$pid"
			else
				reset_err "$pid"
			fi
			;;
	esac

	pid=`pidof $process_name`
	for p in $pid
	do
		echo -1000 > /proc/$p/oom_score_adj
	done
}

process() {
	process_name="$1"
	case $process_name in
		"dnsmasq")
			if [ $dnsmasq_enable == 0 ]; then
				check_process
			fi
			;;
		"hostapd")
			if [ "$hostapd_ath0_enable" == "on" ] || [ "$hostapd_ath1_enable" == "on" ] || [ "$hostapd_ath01_enable" == "on" ] || [ "$hostapd_ath11_enable" == "on" ]; then
				check_process
			fi
			;;
		"wpa_supplicant")
			if [ "$wpa_ath02_enable" == "on" ] || [ "$wpa_ath12_enable" == "on" ]; then
				check_process
			fi
			;;
		*)
			check_process
			;;
	esac
}
		
while [ true ]
do
	dnsmasq_enable=`uci get dhcp.lan.ignore`
	hostapd_wifi0_disabled=`uci get wireless.wifi0.disabled`
	hostapd_wifi0_disabled_all=`uci get wireless.wifi0.disabled_all`
	hostapd_wifi1_disabled=`uci get wireless.wifi1.disabled`
	hostapd_wifi1_disabled_all=`uci get wireless.wifi1.disabled_all`
	hostapd_ath0_enable=`uci get wireless.ath0.enable`
	hostapd_ath1_enable=`uci get wireless.ath1.enable`
	hostapd_ath0_encryption=`uci get wireless.ath0.encryption`
	hostapd_ath1_encryption=`uci get wireless.ath1.encryption`
	hostapd_ath0_hidden=`uci get wireless.ath0.hidden`
	hostapd_ath1_hidden=`uci get wireless.ath1.hidden`
	hostapd_ath01_enable=`uci get wireless.ath01.enable`
	hostapd_ath11_enable=`uci get wireless.ath11.enable`
	hostapd_ath01_encryption=`uci get wireless.ath01.encryption`
	hostapd_ath11_encryption=`uci get wireless.ath11.encryption`
	wpa_ath02_enable=`uci get wireless.ath02.enable`
	wpa_ath12_enable=`uci get wireless.ath12.enable`
	if [ $MODE == "router" ]; then
		process dnsmasq
	elif [ $MODE == "ap" ]; then
		process smartdhcp_monitor
	elif [ $MODE == "re" ]; then
		process smartdhcp_monitor
		process wpa_supplicant
	fi
	process client_mgmt
	process uhttpd
	process ubusd
	process netifd
	process hostapd

	if [ `free| grep "^Mem:"| awk '{print $4}'` -lt "5120" ]; then
		echo 3 > /proc/sys/vm/drop_caches
	fi
	sleep $CHECK_INTERVAL
done

exit 0
