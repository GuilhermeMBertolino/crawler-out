# lighttpd configuration file
#
## modules to load
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules = (
	"mod_rewrite",
	"mod_redirect",
	"mod_alias",
	"mod_auth",
	"mod_authn_file",
	"mod_setenv",
	"mod_fastcgi",
	"mod_cgi",
	"mod_session",
	"mod_access",
	"mod_accesslog",
	"mod_openssl",
	"mod_proxy"
)

var.realm = "MODEL_NAME"

## force use of the "write" backend (closes: #2401)
server.network-backend = "write"

## a static document-root, for virtual-hosting take look at the
## server.virtual-* options
server.document-root = "/webs/"

$HTTP["scheme"] == "http" {
    server.document-root = "/webs/"
}

## where to send error-messages to
#server.errorlog = "/var/log/lighttpd/error.log"

## access log
$HTTP["url"] =~ "^/start.html" {
	accesslog.syslog-level = 4
	accesslog.use-syslog = "enable"
	accesslog.format = "[Webaccess][admin login] from source %h"
}

## files to check for if .../ is requested
index-file.names = ( "index.html" )

## mimetype mapping
mimetype.assign = (
	".pdf"   => "application/pdf",
	".class" => "application/octet-stream",
	".pac"   => "application/x-ns-proxy-autoconfig",
	".swf"   => "application/x-shockwave-flash",
	".json"   => "application/json",
	".wav"   => "audio/x-wav",
	".gif"   => "image/gif",
	".jpg"   => "image/jpeg",
	".jpeg"  => "image/jpeg",
	".png"   => "image/png",
	".svg"   => "image/svg+xml",
	".css"   => "text/css",
	".html"  => "text/html",
	".htm"   => "text/html",
	".htm2"   => "text/html",
	".js"    => "text/javascript",
	".txt"   => "text/plain",
	".dtd"   => "text/xml",
	".xml"   => "text/xml"
 )

## Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetypes.use-xattr = "enable"

## send a different Server: header
## be nice and keep it at lighttpd
#server.tag = "lighttpd"

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
server.port = 80

## bind to localhost (default: all interfaces)
#server.bind = "localhost"
server.bind = "0.0.0.0"

## Enable Ipv6
#server.bind = "[::]"
#server.set-v6only = "disable"
$SERVER["socket"] == "[::]:80" {  }

## error-handler for status 404
#server.error-handler-404 = "/error-handler.php"

## to help the rc.scripts
server.pid-file = "/var/run/lighttpd2.pid"

## cgi-bin
$HTTP["url"] =~ "^(/cgi-bin/|/xCloud_Debug_log.zip)" {
       cgi.assign = ( "" => "" )
}
cgi.assign = ( ".cgi"  => "" )

####compress module
compress.allowed-encodings = ("bzip2", "gzip", "deflate")
#compress.cache-dir          = "/tmp/cache/lighttpd/compress/"
#compress.filetype           = ("text/json","text/plain","text/css", "text/xml", "text/javascript","application/javascript","application/json")


##
## Format: <errorfile-prefix><status>.html
## -> ..../status-404.html for 'File not found'
## server.errorfile-prefix = var.VendorPath+"/www/error-"

## virtual directory listings
#server.dir-listing = "enable"

## send unhandled HTTP-header headers to error-log
#debug.dump-unknown-headers = "enable"

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot = "/"

## change uid to <uid> (default: don't care)
#server.username = "nobody"
server.upload-dirs = ( "/tmp" )

## change uid to <uid> (default: don't care)
#server.groupname = "nobody"

#### fastcgi module
## read fastcgi.txt for more info
fastcgi.map-extensions = ( ".html" => ".php", ".htm" => ".php" )
fastcgi.server += (
	".php" => ((
		"socket" => "/var/run/php-fpm.sock",
		#"bin-path" => "/bin/php-fpm -n -R -y /etc/php-fpm.conf",
		#"max-procs" => 1,
		"broken-scriptfilename" => "enable"
	))
)

#max num of secs to wait for existing requests to complete during graceful restart (default: infinite)
server.feature-flags = ( "server.graceful-shutdown-timeout" => "1" )

## performance issue, disable keep-alive
server.max-keep-alive-requests = 0

## Limit max request size to 100MB
server.max-request-size = 100000

#### auth module
$HTTP["url"] !~ "^(/js|/soap|/images|/fonts|/css|/favicon.ico|/debuginfo.htm|/currentsetting.htm|/LGO_logout.html|/jdoedw18ge|/acblock*|/WEB_site_block.html|/shares|/tm_block)" {
	auth.backend = "htpasswd"
	auth.backend.htpasswd.userfile = "/var/user.htpasswd"
	auth.require = (
		"" => (
			"method"  => "basic",
			"realm"   => realm,
			"require" => "valid-user"
		)
	)
	auth.login_data = ("max-try" => "3")

	session.username = "admin"
	session.lifetime = 300
	session.realm = realm
}

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

alias.url = ("/shares" => "/var/samba/share/")

#### setenv module
#TT#191 [PSV-2017-2449] Broken Auth and Session Management
setenv.add-response-header = (
          "Access-Control-Allow-Origin" => "http://readyshare.routerlogin.net|http://readyshare.routerlogin.com|http://routerlogin.net|http://www.routerlogin.net|http://routerlogin.com|http://www.routerlogin.com|https://readyshare.routerlogin.net|https://readyshare.routerlogin.com|https://routerlogin.net|https://www.routerlogin.net|https://routerlogin.com|https://www.routerlogin.com",
          "Access-Control-Allow-Headers" => "accept, origin, x-requested-with, content-type",
          "Access-Control-Allow-Methods" => "GET, POST",
          "X-Frame-Options" => "SAMEORIGIN",
          "Cache-Control" => "private, no-store, no-cache, must-revalidate"
)

alias.url = ("/shares" => "/var/samba/share/")

# IPv4 SOAP https 5043 port , reverse proxy to http 127.0.0.1
$SERVER["socket"] == "0.0.0.0:5043" {
	$HTTP["url"] =~ "^/soap" {
		url.access-allow = ("")
	}
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	# proxy.debug = 1
	proxy.server = ( "" => ( "" => ( "host" => "127.0.0.1", "port" => "5000" ) ) )
}

# IPv6 SOAP https 5043 port , reverse proxy to http 127.0.0.1
$SERVER["socket"] == "[::]:5043" {
	$HTTP["url"] =~ "^/soap" {
		url.access-allow = ("")
	}
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	# proxy.debug = 1
	proxy.server = ( "" => ( "" => ( "host" => "127.0.0.1", "port" => "5000" ) ) )
}



# HTTPS enable
$SERVER["socket"] == "0.0.0.0:443" {
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	server.document-root = "/webs/"

	# https://10.0.0.1:443 reverse proxy to http://127.0.0.1:80
	$HTTP["host"] == "10.0.0.1" {
		# proxy.debug = 1
		proxy.server = ( "" => ( "" => ( "host" => "127.0.0.1", "port" => "80" ) ) )
	}

	# https://192.168.1.1:443 reverse proxy to http://127.0.0.1:80
	$HTTP["host"] == "192.168.1.1" {
		# proxy.debug = 1
		proxy.server = ( "" => ( "" => ( "host" => "127.0.0.1", "port" => "80" ) ) )
	}

	# https://*routerlogin*:443 reverse proxy to http://127.0.0.1:80
	$HTTP["host"] =~ "routerlogin" {
		# proxy.debug = 1
		proxy.server = ("" => (( "host" => "127.0.0.1", "port" => "80" )))
	}

	# usb storage LAN/WAN side
	$HTTP["url"] =~ "^/shares" {
		static-file.exclude-extensions = ()
		cgi.assign = ()
		fastcgi.map-extensions = ()
		fastcgi.server = ()
		mimetype.assign = ()
	}
}
$SERVER["socket"] == "[::]:443" {
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	server.document-root = "/webs/"

	# https://*routerlogin*:443 reverse proxy to http://127.0.0.1:80
	$HTTP["host"] =~ "routerlogin" {
		# proxy.debug = 1
		proxy.server = ("" => (( "host" => "127.0.0.1", "port" => "80" )))
	}

	# usb storage LAN/WAN side
	$HTTP["url"] =~ "^/shares" {
		static-file.exclude-extensions = ()
		cgi.assign = ()
		fastcgi.map-extensions = ()
		fastcgi.server = ()
		mimetype.assign = ()
	}
}

#### Access Control Block Page
$SERVER["socket"] == "0.0.0.0:28081" {
#url.rewrite-once = (
#    "^(?!(/jdoedw18ge/.*))" => "/acblock.htm"
#    ) 

url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/acblock.htm"
    )
}
$SERVER["socket"] == "[::]:28081" {
#url.rewrite-once = (
#    "^(?!(/jdoedw18ge/.*))" => "/acblock.htm"
#    ) 

url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/acblock.htm"
    )
}

#### Access Control Block Page
$SERVER["socket"] == "0.0.0.0:28443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
#url.rewrite-once = ( 
#    "^(?!(/jdoedw18ge/.*))" => "/acblock.htm"
#    )    

url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/acblock.htm"
    ) 
}
$SERVER["socket"] == "[::]:28443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
#url.rewrite-once = ( 
#    "^(?!(/jdoedw18ge/.*))" => "/acblock.htm"
#    )  

url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/acblock.htm"
    ) 
}


#### Traffic Warning Page
$SERVER["socket"] == "0.0.0.0:27081" {
url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/tm_block/tm_warning.html" 
    ) 
}
$SERVER["socket"] == "[::]:27081" {
url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/tm_block/tm_warning.html" 
    ) 
}

$SERVER["socket"] == "0.0.0.0:27443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/tm_block/tm_warning.html" 
    )    
}
$SERVER["socket"] == "[::]:27443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/tm_block/tm_warning.html" 
    )    
}


#### Traffic Limited Page
$SERVER["socket"] == "0.0.0.0:26081" {
url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/tm_block/tm_limited.html" 
    ) 
}
$SERVER["socket"] == "[::]:26081" {
url.rewrite-once = (
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "^(/currentsetting.htm)" => "$0",
    "^(/debug.htm|/debug_m.htm|/XCloudLog.htm|/cgi-bin/debug.cgi|/xCloud_Debug_log.zip|/debug_log.zip|/XCloudLog.zip)" => "$0",
    "(^/.*)" => "/tm_block/tm_limited.html" 
    ) 
}

$SERVER["socket"] == "0.0.0.0:26443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/tm_block/tm_limited.html" 
    )    
}
$SERVER["socket"] == "[::]:26443" {
ssl.engine = "enable"
ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
url.rewrite-once = ( 
    "^/(css|php|js|cgi-bin|tm_block)/.*" => "$0",
    "(^/.*)" => "/tm_block/tm_limited.html" 
    )    
}

## add usb_http.inc & usb_https.inc for Netgear readyshare
include "usb_http.inc"
#include "usb_https.inc"
## add https_on_lan.inc for Netgear https on lan
include "https_on_lan.inc"
include "DNS_rebind_prevent.inc"

