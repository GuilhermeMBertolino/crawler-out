#!/bin/sh
# This script is used for the FW recovery commands from drvhlpr.
# It dumps FW memory and stop/start hostapd
# It is an API between drvhlpr and scripts

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_RECOVERY_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_recovery.sh

interface_name=$1
command=$2

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index FW_RECOVERY "Running $script_name with: $*"

# Delete the runner file. It will be regenerated by the script.
rm -f ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

handle_fw_crash()
{
	local interface_name
	interface_name=$1
	
	fw_dumps_colloect_and_save $interface_name
}

handle_fw_recovery_end()
{
	# Currently, nothing to do for fw_recovery_end
	
	# Define local parameters
	local interface_name
	
	interface_name=$1
	
	print2log $radio_index FW_RECOVERY "$script_name: currently, fw_recovery_end is not supported"
}

handle_hostapd_stop()
{
	# Define local parameters
	local interface_name radio_name
	
	interface_name=$1
	radio_name=${interface_name%%.*}

	# Delete the runner
	rm -f ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "[ ! \"\$LIB_COMMON_SOURCED\" ] && . /tmp/fapi_wlan_wave_lib_common.sh" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	endpoint_suffix=${radio_name##wlan}
	endpoint_suffix=$((endpoint_suffix+1))
	endpoint_name="wlan${endpoint_suffix}"
	(. $ETC_PATH/fapi_wlan_wave_down $radio_name "IN_FW_RECOVERY" "$AP" 0 "$radio_name" "$endpoint_name" "$radio_index")

	# Execute the runner
	if [ -e "${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}" ]
	then
		echo "exit 0" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
		chmod +x ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
		${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	fi
	# DEBUG: set debug_save_runner in fapi_wlan_wave_lib_common.sh to save the runner script
	[ "$debug_save_runner" ] && [ -e ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ] && cp ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ${CONF_DIR}/runner_fw_recovery_stop_${interface_name}.sh
}

handle_hostapd_start()
{
	# Define local parameters
	local interface_name
	
	interface_name=$1

	(. $ETC_PATH/fapi_wlan_wave_up $interface_name "IN_FW_RECOVERY")
}

handle_hostapd_restart()
{
	# Define local parameters
	local interface_name

	interface_name=$1
	handle_hostapd_stop $interface_name
	handle_hostapd_start $interface_name
}

case "$command" in
	"fw_crash")
		handle_fw_crash $interface_name
		;;
	"fw_recovery_end")
		handle_fw_recovery_end $interface_name
		;;
	"hostapd_stop"|"hostapd_restart") # when hostapd_stop is called, the hostapd will be restarted
		print2log $radio_index FW_RECOVERY "$script_name: $command is called, restarting hostapd"
		handle_hostapd_restart $interface_name
		;;
	"hostapd_start") # hostapd_start is ignored as hostapd_stop performs restart
		print2log $radio_index FW_RECOVERY "$script_name: $command is called, ignoring it"
		#handle_hostapd_start $interface_name
		;;
	*)
		print2log $radio_index FW_RECOVERY "$script_name: unknown command $command"
		;;
esac

print2log $radio_index FW_RECOVERY "$script_name Done"
exit 0
