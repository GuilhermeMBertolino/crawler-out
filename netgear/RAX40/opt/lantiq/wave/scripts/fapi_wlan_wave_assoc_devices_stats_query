#!/bin/sh
# Return the AccessPoint.AssociatedDevice Stats
# Needed objects: None or AccessPoint.AssociatedDevice.Stats with partial list of parameters

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

interface_name=$1

# Find the radio index
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $radio_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

# Verify interface is up and ready. If not, exit
[ `check_interface_is_ready $interface_name` = "1" ] && exit

# no need stats for UCC certification(WLANRTSYS-3866)
[ "$(is_certifiction)" = "1" ] && update_conf_out "wlan_configuration_status" "success" && exit

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/assoc_devices_stats_query_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
associated_devices_stats_index=`map_param_index Object $ACCESSPOINT_ASSOCIATED_DEVICES_STATS_OBJECT`

# If an object that needs to be in the output conf wasn't in the input conf, set it with an index
next_object_index=`get_next_object_index`
[ -z "$associated_devices_stats_index" ] && associated_devices_stats_index=$next_object_index && next_object_index=$((next_object_index+1))

# Get list of connected devices
iw dev $interface_name station dump > ${TEMP_DIR}/sta_dump_${interface_name}
grep ^Station ${TEMP_DIR}/sta_dump_${interface_name} > ${TEMP_DIR}/sta_dump_${interface_name}_tmp
mv ${TEMP_DIR}/sta_dump_${interface_name}_tmp ${TEMP_DIR}/sta_dump_${interface_name}

# Functions to read the statistics

read_dwpal_cli()
{
	if [ -z "$stats_read" ] && [ -n "$mac" ]
	then
		dwpal_cli_output=`dwpal_cli $interface_name TR181PeerStat $mac`
		stats_read="yes"
	fi
}

bytes_sent_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	bytes_sent=0
	read_dwpal_cli
	if [ "$stats_read" = "yes" ]
	then
		pre_stat_text="Peer Traffic Statistics"
		post_stat_text=" : BytesSent"
		bytes_sent=`extract_stats_from_dwpal_cli "$dwpal_cli_output" "$post_stat_text" "$pre_stat_text"`
	fi
}

bytes_received_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	bytes_received=0
	read_dwpal_cli
	if [ "$stats_read" = "yes" ]
	then
		pre_stat_text="successfully"
		post_stat_text=" : BytesReceived"
		bytes_received=`extract_stats_from_dwpal_cli "$dwpal_cli_output" "$post_stat_text" "$pre_stat_text"`
	fi
}

packets_sent_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	packets_sent=0
	read_dwpal_cli
	if [ "$stats_read" = "yes" ]
	then
		pre_stat_text="received"
		post_stat_text=" : PacketsSent"
		packets_sent=`extract_stats_from_dwpal_cli "$dwpal_cli_output" "$post_stat_text" "$pre_stat_text"`
	fi
}

packets_received_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	packets_received=0
	read_dwpal_cli
	if [ "$stats_read" = "yes" ]
	then
		pre_stat_text="transmitted"
		post_stat_text=" : PacketsReceived"
		packets_received=`extract_stats_from_dwpal_cli "$dwpal_cli_output" "$post_stat_text" "$pre_stat_text"`
	fi
}


# TODO: how to read the following parameters:
errors_sent_stats()
{
	errors_sent=0
}

retrans_count_stats()
{
	retrans_count=0
}

failed_retrans_count_stats()
{
	failed_retrans_count=0
}

retry_count_stats()
{
	retry_count=0
}

multiple_retry_count_stats()
{
	multiple_retry_count=0
}

# Create the output configuration file and set the statistics in it
cat /dev/null > ${OUT_CONF}

# Return only the requested statistics
stats_read=""

# If object is empty, return all statistics
current_associated_devices_stats_index=0
if [ `wc -c < ${IN_CONF}` = "0" ]
then

	# Go over the list of MACs and do the following:
	# Count MACs
	# Read statistics from dwpal_cli
	# Write associated device's statistics to the output conf file

	while read Station mac param3
	do
		bytes_sent_stats
		bytes_received_stats
		packets_sent_stats
		packets_received_stats
		errors_sent_stats
		retrans_count_stats
		failed_retrans_count_stats
		retry_count_stats
		multiple_retry_count_stats
		# Write the AssociatedDevice.Stats object parameters to the output conf file
		update_conf_out "Object_${current_associated_devices_stats_index}" "$ACCESSPOINT_ASSOCIATED_DEVICES_STATS_OBJECT"
		update_conf_out "BytesSent_${current_associated_devices_stats_index}" "$bytes_sent"
		update_conf_out "BytesReceived_${current_associated_devices_stats_index}" "$bytes_received"
		update_conf_out "PacketsSent_${current_associated_devices_stats_index}" "$packets_sent"
		update_conf_out "PacketsReceived_${current_associated_devices_stats_index}" "$packets_received"
		update_conf_out "ErrorsSent_${current_associated_devices_stats_index}" "$errors_sent"
		update_conf_out "RetransCount_${current_associated_devices_stats_index}" "$retrans_count"
		update_conf_out "FailedRetransCount_${current_associated_devices_stats_index}" "$failed_retrans_count"
		update_conf_out "RetryCount_${current_associated_devices_stats_index}" "$retry_count"
		update_conf_out "MultipleRetryCount_${current_associated_devices_stats_index}" "$multiple_retry_count"
		current_associated_devices_stats_index=$((current_associated_devices_stats_index+1))
	done < ${TEMP_DIR}/sta_dump_${interface_name}
fi

while read statistics
do
	stats_name=${statistics%_*}
	case $stats_name in
		"Object")
			object_index=${statistics##*_}
			object_index=${object_index%%=*}
			object_name=${statistics##*=}
			update_conf_out "Object_${object_index}" "$object_name"
			;;
		"MACAddress")
			eval mac=\${MACAddress_${object_index}}
			mac=$(printf "%b" "$mac")
			update_conf_out "MACAddress_${object_index}" "$mac"
			;;
		"BytesSent")
			bytes_sent_stats
			update_conf_out "BytesSent_${object_index}" "$bytes_sent"
			;;
		"BytesReceived")
			bytes_received_stats
			update_conf_out "BytesReceived_${object_index}" "$bytes_received"
			;;
		"PacketsSent")
			packets_sent_stats
			update_conf_out "PacketsSent_${object_index}" "$packets_sent"
			;;
		"PacketsReceived")
			packets_received_stats
			update_conf_out "PacketsReceived_${object_index}" "$packets_received"
			;;
		"ErrorsSent")
			errors_sent_stats
			update_conf_out "ErrorsSent_${object_index}" "$errors_sent"
			;;
		"RetransCount")
			retrans_count_stats
			update_conf_out "RetransCount_${object_index}" "$retrans_count"
			;;
		"FailedRetransCount")
			failed_retrans_count_stats
			update_conf_out "FailedRetransCount_${object_index}" "$failed_retrans_count"
			;;
		"RetryCount")
			retry_count_stats
			update_conf_out "RetryCount_${object_index}" "$retry_count"
			;;
		"MultipleRetryCount")
			multiple_retry_count_stats
			update_conf_out "MultipleRetryCount_${object_index}" "$multiple_retry_count"
			;;
	esac
done < ${IN_CONF}
# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/assoc_devices_stats_query_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
