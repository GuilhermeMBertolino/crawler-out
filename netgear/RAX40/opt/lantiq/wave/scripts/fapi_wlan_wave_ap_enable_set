#!/bin/sh
# Enable/disable AccessPoint
# Needed object: Device.WiFi.AccessPoint with the parameter Enable

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh

interface_name=$1

radio_name=${interface_name%%.*}

# Find the radio index
interface_index="0"
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/ap_enable_set_in_conf_${interface_name}
# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# If interface name is the radio name, exit
if [ "$interface_name" = "$radio_name" ]
then
	print2log $radio_index ERROR "$script_name: cannot enable/disable the main VAP ($radio_name)"
	update_conf_out "wlan_configuration_status" "FAILURE"
	exit 1
fi

# Source in.conf
in_conf_source

# Update the status file with the real-time interface status
interface_enabled=`db2fapi_convert boolean Enable $interface_index`
[ -e "${INTERFACES_STATUS}_${radio_name}" ] && sed -i '/^'$interface_name'_rt=.*/d' ${INTERFACES_STATUS}_${radio_name}
echo "${interface_name}_rt=${interface_enabled}" >> ${INTERFACES_STATUS}_${radio_name}

# Check if the configuration files for the VAP exist
confs_exist=`check_configurations_exist $interface_name $VAP`
if [ "$confs_exist" = "no" ]
then
	print2log $radio_index ERROR "$script_name: configuration files for $interface_name are missing"
	update_conf_out "wlan_configuration_status" "FAILURE"
	exit 1
fi

# Check if interface is in the hostapd conf
interface_in_conf=`grep -c "^bss=$interface_name" ${CONF_DIR}/hostapd_${radio_name}.conf`

# Update the hostapd.conf
if [ "$interface_enabled" = "1" ]
then
	# If interface not in hostapd.conf, copy confs to TEMP_DIR and add it at the end
	if [ "$interface_in_conf" -eq 0 ]
	then
		cp ${CONF_DIR}/${HOSTAPD_VAP_CONF_PREFIX}_${interface_name}.conf ${TEMP_DIR}
		cp ${CONF_DIR}/${DRIVER_POST_UP_CONF_PREFIX}_${interface_name}.conf ${TEMP_DIR}
		cat ${TEMP_DIR}/${HOSTAPD_VAP_CONF_PREFIX}_${interface_name}.conf >> ${CONF_DIR}/hostapd_${radio_name}.conf
	fi
else
	# If interface is in hostapd.conf, remove it by re-creating the conf without this VAP
	if [ "$interface_in_conf" -gt 0 ]
	then
		# Delete conf files of disabled interface from TEMP_DIR
		rm -f ${TEMP_DIR}/${HOSTAPD_VAP_CONF_PREFIX}_${interface_name}.conf ${TEMP_DIR}/${DRIVER_POST_UP_CONF_PREFIX}_${interface_name}.conf
		# Merge hostapd configuration files
		cat ${CONF_DIR}/${HOSTAPD_PHY_CONF_PREFIX}_${radio_name}.conf ${CONF_DIR}/${HOSTAPD_VAP_CONF_PREFIX}_${radio_name}.conf > ${CONF_DIR}/hostapd_${radio_name}.conf
		cat ${TEMP_DIR}/${HOSTAPD_VAP_CONF_PREFIX}_${radio_name}.*.conf >> ${CONF_DIR}/hostapd_${radio_name}.conf 2>/dev/null
	fi
fi

# Create a runner script to reconfigure hostapd and configure enabled VAP
# Delete the runner file
rm -f ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

echo "##### `basename $script_name` commands ####" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
if [ "$interface_enabled" = "0" ]
then
	echo "ppacmd dellan -i ${interface_name}" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi
echo "### Reconfigure hostapd for add/del VAPs ###" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "/tmp/hostapd_cli_${radio_name} -i${radio_name} reconf" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

up_add_wait_for_hostapd_to_runner $radio_name

if [ "$interface_enabled" = "1" ]
then
	echo -ne "\n" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "### AccessPoint post-up commands ###" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	cat ${TEMP_DIR}/${DRIVER_POST_UP_CONF_PREFIX}_${interface_name}.conf >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi

# Execute the runner (if exists)
if [ -e ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ]
then
	echo "exit 0" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	chmod +x ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	# If runner execution failed, return FAILURE
	if [ $? -gt 0 ]
	then
		# Create the output configuration file
		update_conf_out "wlan_configuration_status" "FAILURE"
		# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
		[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/ap_enable_set_out_conf_${interface_name}
		up_clean_and_restore $radio_name
		exit 1
	fi
fi

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/ap_enable_set_out_conf_${interface_name}

up_clean_and_restore $radio_name

# DEBUG: set debug_save_runner in fapi_wlan_wave_lib_common.sh to save the runner script
[ "$debug_save_runner" ] && [ -e ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ] && cp ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ${CONF_DIR}/runner_ap_enable_set_${interface_name}.sh

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
