#!/bin/sh
# Configure AccessPoint parameters
# Needed object: AccessPoint, AccessPoint.X_LANTIQ_COM_Vendor

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh

interface_name=$1
pid=$$

radio_name=${interface_name%%.*}
if [ -e "$INIT_FLAG" ] && ([ -e ${USE_CURRENT_CONF}_${radio_name} ] || [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ])
then
	if [ -e "$INIT_STOP_SET_DUT_MODE_FLAG" ]; then
		echo "####### $script_name: init flow DUT MODE" > /dev/console
	else
		echo "####### $script_name: init flow with conf from previous setting - FAST BOOT" > /dev/console
	fi
	# Create the output configuration file
	cat /dev/null > ${OUT_CONF}

	# Configuration is completed successfully
	update_conf_out "wlan_configuration_status" "success"
	exit 0
fi

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/ap_set_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
access_point_index=`map_param_index Object $ACCESSPOINT_OBJECT`
access_point_vendor_index=`map_param_index Object $ACCESSPOINT_VENDOR_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
[ -n "$access_point_index" ] && save_db_params ap_set $interface_name $access_point_index $interface_index
[ -n "$access_point_vendor_index" ] && save_db_params ap_set $interface_name $access_point_vendor_index $interface_index

# When not on init flow after factory reset, source HS2.0 DB
if [ ! -e "$INIT_FLAG" ]
then
	hs20_conf_exist=`local_db_exist HS20`
	if [ "$hs20_conf_exist" = "1" ]
	then
		local_db_source HS20
		hs20_enable=`db2fapi_convert boolean Enable $interface_index`
		osen_enable=`db2fapi_convert boolean OSENEnabled $interface_index`
	else
		hs20_enable=0
		osen_enable=0
	fi
	if [ "$hs20_enable" = "0" ]
	then
		access_network_type=
	else
		access_network_type=`db2fapi_convert regular AccessNetworkType $interface_index`
	fi
else
	hs20_enable=0
	osen_enable=0
	access_network_type=
fi

# Source RADIO and ACCESSPOINT DBs
local_db_source RADIO
local_db_source ACCESSPOINT

# Read SoC name only for RDKB
[ -f "$RDKBOS_WIFI_UTIL" ] && PUMA_SOC=`cat /sys/devices/virtual/dmi/id/product_name | awk '{print $1$2}'`

comment="___AccessPoint_parameters___###"

# Define list of AccessPoint parameters
driver_params="sAPforwarding
AP_ISO
sReliableMcast
sIpxPpaEnabled
sBridgeMode
sPeerAPkeyIdx
sFourAddrMode
sWdsWepEncCfg
sAggrConfig
s11nProtection"

if [ -f "$RDKBOS_WIFI_UTIL" ] && [ "$PUMA_SOC" != "PUMA7" ]
then
	driver_params+="sUdmaVlanId
	sUdmaEnabled"
fi

hostapd_params="ignore_broadcast_ssid
ap_isolate
dtim_period
ap_max_inactivity
mesh_mode
max_num_sta
num_res_sta
opmode_notif
qos_map_set
wmm_enabled
uapsd_advertisement_enabled
proxy_arp
macaddr_acl
accept_mac_file
deny_mac_file
gas_comeback_delay
wds_wpa_sta_file
enable_bss_load_ie
authresp_elements
vendor_elements
assocresp_elements"

hostapd_mbo_params="mbo
mbo_cell_aware
rrm_neighbor_report
bss_transition
mbo_pmf_bypass
interworking
access_network_type"

hostapd_11k_params="rrm_link_measurement
rrm_sta_statistics
rrm_channel_load
rrm_noise_histogram
rrm_beacon_report_passive
rrm_beacon_report_table"

hostapd_vap_atf_params="atf_vap_stations_and_weights"

# Update the status file with the interface status (real-time and init)
update_enable_disable $radio_name $interface_name $interface_index $radio_name

# Update the EnableOnline file with the interfaces EnableOnline status
update_enable_online $radio_name $interface_name $interface_index

# Update RouterEnable status of the interfaces
update_router_enable $radio_name $interface_name $interface_index

# Prepare the temporary configuration files to use
prepare_confs $interface_name $radio_name $pid $VAP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${radio_name}

# Read current values and initiate new values file.
driver_current_values=${CONF_DIR}/driver_current_values_${interface_name}
hostapd_current_values=${CONF_DIR}/hostapd_current_values_${interface_name}_${pid}

read_current_values $HOSTAPD_VAP_CONF_PREFIX $interface_name $hostapd_current_values
read_current_values $DRIVER_POST_UP_CONF_PREFIX $interface_name $driver_current_values

# Calculate new values.
# Some commands are executed according to the fastpath state
fastpath_enabled=`db2fapi_convert boolean WaveFastpathEnabled $radio_index`

### 802.11 parameters
AP_ISO=""

ignore_broadcast_ssid=`convert_ignore_broadcast_ssid $interface_index`
ap_isolate=`db2fapi_convert boolean IsolationEnable $interface_index`
# When ap_isolate is enabled, sAPforwarding is disabled and vice versa
sAPforwarding=$((ap_isolate^1))
# Add hs_cli AP_ISO command to set ap isolation if fastpath is enabled
[ "$fastpath_enabled" = "1" ] && AP_ISO=`convert_ap_iso $ap_isolate`

dtim_period=`db2fapi_convert regular WaveDTIMPeriod $interface_index`

### Station inactivity parameters
ap_max_inactivity=`db2fapi_convert regular APMaxInactivity $interface_index`

### Mesh mode parameter
mesh_mode=`db2fapi_convert regular WaveMeshMode $interface_index`

### VAP limits
if [ "$mesh_mode" = "bAP" ]
then
	max_num_sta=1
	num_res_sta=0
else
	max_num_sta=`db2fapi_convert regular MaxAssociatedDevices $interface_index`
	num_res_sta=`db2fapi_convert regular ReservedAssociatedDevices $interface_index`
fi

### 11ac parameters
opmode_notif=`convert_opmode_notif $radio_index`

### Multicast parameters
sReliableMcast=`db2fapi_convert boolean ReliableMuticastEnable $interface_index`

if [ -f "$RDKBOS_WIFI_UTIL" ] && [ "$PUMA_SOC" != "PUMA7" ]
then
	### UDMA parameters
	sUdmaVlanId=`db2fapi_convert regular UdmaVlanId $interface_index`
	sUdmaEnabled=`db2fapi_convert boolean UdmaEnabled $interface_index`
fi

### PPA parameters
# Configure PPA only if ppacmd
sIpxPpaEnabled=""
# sIpxPpaEnabled is set on interfaces that are not fastpath enabled
ppacmd_exists=`which ppacmd`
[ "$fastpath_enabled" != "1" ] && [ -n "$ppacmd_exists" ] && sIpxPpaEnabled=`db2fapi_convert boolean PPAEnable $interface_index`
# For grx750_haven_park, PPA will be always enabled
if [ "$CONFIG_IFX_CONFIG_CPU" = "GRX750" ] 
then
	sIpxPpaEnabled=1
fi
proxy_arp=`db2fapi_convert boolean ProxyArp $interface_index`

### QOS map parameter
chip_id=`check_wave_chip_id wlan$radio_index`
qos_map_set=""
[ "$chip_id" != "$GEN6_CHIP_ID" ] && [ "$chip_id" != "$GEN6D2_CHIP_ID" ] && qos_map_set=`db2fapi_convert regular QosMap $interface_index`

## WMM parameters
wmm_enabled=`db2fapi_convert boolean WMMEnable $interface_index`
uapsd_advertisement_enabled=`db2fapi_convert boolean UAPSDEnable $interface_index`

### WDS parameters
wds_mode=`db2fapi_convert regular WaveWDSMode $interface_index`
sBridgeMode=0
wds_wpa_sta_file=""
if [ "$wds_mode" = "$WDS_ENABLED" ]
then
	sBridgeMode=1
	sPeerAPkeyIdx=`convert_peer_ap_key_index $interface_index`
	# Configure the wep keys if wep is set
	[ $sPeerAPkeyIdx -gt 0 ] && sWdsWepEncCfg=`convert_wds_wep_keys $interface_index`
	# Get the list of peer APs in driver and in the DB
	driver_peer_aps=`get_wds_driver_list $interface_name wds`
	db_peer_aps=`get_wds_db_list $interface_index wds`
elif [ "$wds_mode" = "$WDS_HYBRID" ]
then
	sBridgeMode=1
	wds_wpa_sta_file=${CONF_DIR}/wds_hybrid_${interface_name}.conf
	update_wds_wpa_sta_file $interface_name $interface_index $pid
fi

### 4 addresses parameters
sFourAddrMode=`convert_four_addresses_mode $interface_index`
authresp_elements=""
db_vendor_elements=""
assocresp_elements=""
# If 4 addresses is enabled, need to set sBridgeMode to 1
[ $sFourAddrMode -gt 0 ] && sBridgeMode=1
# If 4 addresses mode is List (value is $WDS_4ADDR_LIST=3), set the list of STAs
# Get the list of 4 addresses STAs in driver and in the DB
if [ "$sFourAddrMode" = "$WDS_4ADDR_LIST" ]
then
	driver_4_addr_stas=`get_wds_driver_list $interface_name four_addr`
	db_4_addr_stas=`get_wds_db_list $interface_index four_addr`
fi

# If 4 addresses mode is Dynamic (value is $WDS_4ADDR_DYNAMIC=4), mode is DWDS, set additional information elements
if [ "$sFourAddrMode" = "$WDS_4ADDR_DYNAMIC" ]
then
	authresp_elements=`db2fapi_convert regular WaveAuthRespElements $interface_index`
	db_vendor_elements=`db2fapi_convert regular WaveVendorElements $interface_index`
	assocresp_elements=`db2fapi_convert regular WaveAssocRespElements $interface_index`
fi
vendor_elements=${LEGACY_VENDOR_ELEMENTS}${db_vendor_elements}

### ACL parameters
acl_db=`db2fapi_convert regular MACAddressControlMode $interface_index`

# if ACL mode is Allow and ACL list is empty disable it, fix WLANSW-4814.
if [ "$acl_db" = "Allow" ]; then
	db_acl_list=`db2fapi_convert regular MACAddressControlList $interface_index`
	if [ -z "$db_acl_list" ]; then
		acl_db="Disabled"
		build_wlan_notification "servd" "NOTIFY_WIFI_UPDATE_PARAM" "Name:$interface_name Object:${ACCESSPOINT_VENDOR_OBJECT} MACAddressControlMode:$acl_db"
	fi
fi
macaddr_acl=`convert_macaddr_acl $acl_db`
accept_mac_file=""
deny_mac_file=""

# If ACL is enabled in DB (Allow or Deny), set ACL files parameters
if [ "$acl_db" != "Disabled" ]
then
	accept_mac_file="${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf"
	deny_mac_file="${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf"
	touch ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	touch ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
fi

gas_comeback_delay=`db2fapi_convert regular GasComebackDelay $interface_index`

### Aggregation config
sAggrConfig=`convert_aggregation_config $interface_index`

### Protection parameter
s11nProtection=`convert_protection_mode $interface_index`

### MBO parameters
mbo_comment="___MBO_parameters___###"
mbo=`db2fapi_convert boolean WaveMBOEnabled $interface_index`
mbo_cell_aware=""
rrm_neighbor_report=""
bss_transition=""
mbo_pmf_bypass=""

if [ "$mbo" = "1" ]
then
	mbo_cell_aware=`db2fapi_convert boolean WaveMBOCellAware $interface_index`
	rrm_neighbor_report=`db2fapi_convert boolean WaveMBORrmNeighborReport $interface_index`
	bss_transition=`db2fapi_convert boolean WaveMBOBssTransition $interface_index`
	mbo_pmf_bypass=`db2fapi_convert boolean WaveMBOPmfBypass $interface_index`

	# If access_network_type was configured from HS2.0, use current value, else use value of 0.
	[ -z "$access_network_type" ] && access_network_type=0
	[ -z "$interworking" ] && interworking=1
fi


if [ "$hs20_enable" = "1" ]
then
	#echo "hs20_enable=1" > /dev/console
	access_network_type=2
	interworking=1
	if [ "$sAPforwarding" = "1" ]
	then
		#echo "Reset sAPforwarding" > /dev/console
		sAPforwarding=0
		ap_isolate=$((sAPforwarding^1))
		#[ "$fastpath_enabled" = "1" ] && AP_ISO=`convert_ap_iso $ap_isolate`
	fi
fi

if [ "$osen_enable" != "0" ]
then
	interworking=0
fi


### 11k parameters
rrm_11k_comment="___11k_parameters___###"
rrm_link_measurement=`db2fapi_convert boolean RrmLinkMeasurement $interface_index`
rrm_sta_statistics=`db2fapi_convert boolean RrmStaStatistics $interface_index`
rrm_channel_load=`db2fapi_convert boolean RrmChannelLoad $interface_index`
rrm_noise_histogram=`db2fapi_convert boolean RrmNoiseHistogram $interface_index`
rrm_beacon_report_passive=`db2fapi_convert boolean RrmBeaconReportPassive $interface_index`
rrm_beacon_report_table=`db2fapi_convert boolean RrmBeaconReportTable $interface_index`

### atf parameters
atf_comment_prefix="___ATF_"
atf_comment_postfix="_PARAMETERS___###"
atf_vap_comment="$atf_comment_prefix$interface_name$atf_comment_postfix"
atf_vap_stations_and_weights=`db2fapi_convert regular WaveAtfVapStationsAndWeights $interface_index`

### QBSS load parameter
enable_bss_load_ie=`db2fapi_convert boolean WaveQbssLoad $interface_index`

# Write the parameters to the configuration files.
# Check if a hostapd parameter was changed.
hostapd_changed=`check_param_changed "$hostapd_params"`

# If a hostapd parameter was changed, remove AccessPoint parameters from hostapd_vap temp conf file and write all of them with updated values.
if [ "$hostapd_changed" ]
then
	hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
	# Remove the hostapd AccessPoint parameters.
	remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX

	# Write the hostapd AccessPoint parameters.
	set_conf_param hostapd_vap comment otf $pid $interface_name comment "$comment"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ignore_broadcast_ssid "$ignore_broadcast_ssid"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_isolate "$ap_isolate"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name dtim_period "$dtim_period"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_max_inactivity "$ap_max_inactivity"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name mesh_mode "$mesh_mode"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name max_num_sta "$max_num_sta"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name num_res_sta "$num_res_sta"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name opmode_notif "$opmode_notif"
	[ "$qos_map_set" != "" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name qos_map_set "$qos_map_set"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name wmm_enabled "$wmm_enabled"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name uapsd_advertisement_enabled "$uapsd_advertisement_enabled"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name proxy_arp "$proxy_arp"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name macaddr_acl "$macaddr_acl"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name accept_mac_file "$accept_mac_file"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name deny_mac_file "$deny_mac_file"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name gas_comeback_delay "$gas_comeback_delay"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name wds_wpa_sta_file "$wds_wpa_sta_file"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name enable_bss_load_ie "$enable_bss_load_ie"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name authresp_elements "$authresp_elements"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name vendor_elements "$vendor_elements"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name assocresp_elements "$assocresp_elements"
fi

# Check if a driver parameter was changed.
driver_changed=`check_param_changed "$driver_params"`

# Check if WDS peer APs list was changed.
wds_changed=""
[ "$wds_mode" = "$WDS_ENABLED" ] && wds_changed=`check_wds_list_changed "$driver_peer_aps" "$db_peer_aps"`

# Check if 4 addresses STAs list was changed.
[ "$sFourAddrMode" = "$WDS_4ADDR_LIST" ] && four_addr_changed=`check_wds_list_changed "$driver_4_addr_stas" "$db_4_addr_stas"`

# If a driver parameter was changed, remove AccessPoint parameters from drv_config_post_up temp conf file and write all of them with updated values.
if [ "$driver_changed" -o "$wds_changed" -o "$four_addr_changed" ]
then
	drv_config_post_up_conf_name=${CONF_DIR}/drv_config_post_up_${interface_name}_${pid}.conf
	# Remove the driver AccessPoint, WDS and 4 addresses parameters.
	remove_params_from_conf "sAddPeerAP sDelPeerAP sAddFourAddrSta sDelFourAddrSta $driver_params" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX

	set_conf_param drv_config_post_up iw otf $pid $interface_name sAPforwarding "$sAPforwarding"
	set_conf_param drv_config_post_up hs_cli otf $pid $interface_name AP_ISO "$AP_ISO"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sReliableMcast "$sReliableMcast"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sIpxPpaEnabled "$sIpxPpaEnabled"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sBridgeMode "$sBridgeMode"
	if [ -f "$RDKBOS_WIFI_UTIL" ] && [ "$PUMA_SOC" != "PUMA7" ]
	then
		set_conf_param drv_config_post_up iw otf $pid $interface_name sUdmaEnabled "$sUdmaEnabled"
		set_conf_param drv_config_post_up iw otf $pid $interface_name sUdmaVlanId "$sUdmaVlanId"
	fi

	if [ -n "$sWdsWepEncCfg" ]
	then
		# WLANSW-5369: for key update require to disconnect peers:
		WaveWDSModeChanged=`cat ${IN_CONF} | grep WaveWDSMode -c`
		if [ "$WaveWDSEnabledChanged" = "0" ]
		then
			set_conf_param $DRIVER_SINGLE_CALL_CONFIG_FILE iw otf $pid $interface_name sBridgeMode "0"
			set_conf_param $DRIVER_SINGLE_CALL_CONFIG_FILE iw otf $pid $interface_name sBridgeMode "1"
		fi
	fi
	set_conf_param drv_config_post_up iw otf $pid $interface_name sWdsWepEncCfg "$sWdsWepEncCfg"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sFourAddrMode "$sFourAddrMode"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sPeerAPkeyIdx "$sPeerAPkeyIdx"
	set_conf_param drv_config_post_up iw otf $pid $interface_name sAggrConfig "$sAggrConfig"
	set_conf_param drv_config_post_up iw otf $pid $interface_name s11nProtection "$s11nProtection"
	# Update the AP peers list
	update_wds_list $interface_name $pid "wds" "$driver_peer_aps" "$db_peer_aps"
	# Update the 4 addresses STAs list
	update_wds_list $interface_name $pid "four_addr" "$driver_4_addr_stas" "$db_4_addr_stas"
fi

# If ppacmd exists, check if the PPA is enabled for this interface and if fastpath is enabled for the radio of this interface.
# If ppa enabled or fastpath is enabled for the radio, write the PPA commands. If both disabled, remove the interface from the PPA.
if [ -n "$ppacmd_exists" ]
then
	if [ "$sIpxPpaEnabled" = "1" ] || [ "$fastpath_enabled" = "1" ]
	then
		#++ PegaCVP KKHuang: For wlan0.0/2.0, checking isolation to add/remove into/from the ppa list
		if [ "$interface_name" = "wlan0.0" ] || [ "$interface_name" = "wlan2.0" ]
		then
			if [ "$ap_isolate" = "0" ]
			then
				set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "add"
			else
				set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "remove"
			fi
		else
		set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "add"
		fi
		#--
	else
		set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "remove"
	fi
fi

# Update the ACL accept list
# Write the MAC addresses to the deny/accept lists and clear the other list.
case $acl_db in
"Allow")
	update_acl_list ACCEPT $interface_index $pid $interface_name $radio_name
	[ -e "${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
	# Delete temporary files:
	rm -rf $CONF_DIR/hostapd.deny.${interface_name}_*.conf
	;;
"Deny")
	update_acl_list DENY $interface_index $pid $interface_name $radio_name
	[ -e "${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	# Delete temporary files:
	rm -rf $CONF_DIR/hostapd.accept.${interface_name}_*.conf
	;;
"Disabled")
	update_acl_list DENY $interface_index $pid $interface_name $radio_name empty
	[ -e "${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	[ -e "${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
	# Delete temporary files:
	rm -rf $CONF_DIR/hostapd.accept.${interface_name}_*.conf
	rm -rf $CONF_DIR/hostapd.deny.${interface_name}_*.conf
	;;
esac

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Set maximum number of STAs from driver to XML
value_to_set=""
if [ "$mesh_mode" != "bAP" ]
then
	value_to_set=`driver_to_db_set_max_num_sta $radio_name $interface_index`
fi

if [ -n "$value_to_set" ]
then
	update_conf_out "Object_${access_point_index}" "${ACCESSPOINT_OBJECT}"
	update_conf_out "MaxAssociatedDevices_${access_point_index}" "$value_to_set"
	# If set, need to remove already configured max_num_sta from hostapd conf...
	clear_hostapd_params $interface_name $pid max_num_sta
	set_conf_param hostapd_vap regular no_otf $pid $interface_name "max_num_sta" "$value_to_set"
	# Update database value
	build_wlan_notification "servd" "NOTIFY_WIFI_UPDATE_PARAM" "Name:$radio_name Object:${ACCESSPOINT_OBJECT} MaxAssociatedDevices:$value_to_set"
	# Update the internal DB with new value
	max_num_sta_hex=`ascii2hex $value_to_set`
	sed -i '/MaxAssociatedDevices_'$interface_index'/d' $ACCESSPOINT_CONF
	echo "MaxAssociatedDevices_${interface_index}=\"${max_num_sta_hex}\"" >> $ACCESSPOINT_CONF
fi

# Check if a hostapd MBO parameter was changed.
hostapd_mbo_changed=`check_param_changed "$hostapd_mbo_params"`

# If a hostapd MBO parameter was changed, remove MBO parameters from hostapd_vap temp conf file and write all of them with updated values.
if [ "$hostapd_mbo_changed" ]
then
	hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
	# Remove the hostapd MBO parameters.
	remove_params_from_conf "###$mbo_comment $hostapd_mbo_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX

	# Write the hostapd MBO parameters.
	set_conf_param hostapd_vap comment otf $pid $interface_name comment "$mbo_comment"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name mbo "$mbo"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name mbo_cell_aware "$mbo_cell_aware"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_neighbor_report "$rrm_neighbor_report"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name bss_transition "$bss_transition"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name mbo_pmf_bypass "$mbo_pmf_bypass"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name interworking "$interworking"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name access_network_type "$access_network_type"
	# Run the security_set script to handle MBO change
	(. $ETC_PATH/fapi_wlan_wave_security_set $interface_name)
fi

# Check if a hostapd 11k parameter was changed.
hostapd_11k_changed=`check_param_changed "$hostapd_11k_params"`

# If a hostapd 11k parameter was changed, remove 11k parameters from hostapd_vap temp conf file and write all of them with updated values.
if [ "$hostapd_11k_changed" ]
then
	hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
	# Remove the hostapd 11k parameters.
	remove_params_from_conf "###$rrm_11k_comment $hostapd_11k_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX

	# Write the hostapd 11k parameters.
	set_conf_param hostapd_vap comment otf $pid $interface_name comment "$rrm_11k_comment"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_link_measurement "$rrm_link_measurement"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_sta_statistics "$rrm_sta_statistics"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_channel_load "$rrm_channel_load"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_noise_histogram "$rrm_noise_histogram"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_beacon_report_passive "$rrm_beacon_report_passive"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name rrm_beacon_report_table "$rrm_beacon_report_table"
fi

# ATF: Check if a hostapd atf parameter was changed.
hostapd_vap_atf_changed=`check_atf_param_changed Atf ${IN_CONF}`
if [ "$hostapd_vap_atf_changed" = "1" ]
then
	hostapd_vap_atf_conf_name=${CONF_DIR}/hostapd_vap_atf_${interface_name}_${pid}.conf
	remove_params_from_conf "sta" $hostapd_vap_atf_conf_name $HOSTAPD_ATF_CONF_PREFIX
	convert_atf_stations_and_weights $pid $interface_name hostapd_vap_atf "$atf_vap_stations_and_weights"
fi

# If AccessPoint is set to be enabled on this current call:
# Set a flag indicating it (used by fapi_wlan_wave_up)
# Check if an EndPoint is connected on the same radio
## If so, set channel=acs_sta_mode.
## If not, set channel value from DB.
if test $(grep '^Enable_'${access_point_index}'=\"\\x74\\x72\\x75\\x65\"' ${IN_CONF}) || test $(grep '^Enable_'${access_point_index}'=\"\\x31\"' ${IN_CONF})
then
	prepare_confs $radio_name $radio_name $pid $AP
	hostapd_phy_current_values=${CONF_DIR}/hostapd_current_values_${radio_name}_${pid}
	read_current_values $HOSTAPD_PHY_CONF_PREFIX $radio_name $hostapd_phy_current_values

	auto_channel=`db2fapi_convert boolean AutoChannelEnable $radio_index`
	if [ "$auto_channel" = "1" ]
	then
		channel="acs_smart"
		[ `check_endpoint_connected $radio_name` -eq 1 ] && channel="acs_sta_mode"
	else
		channel=`db2fapi_convert regular Channel $radio_index`
	fi

	# Check if channel value has changed
	channel_changed=`check_param_changed "channel"`
	if [ "$channel_changed" ]
	then
		hostapd_phy_conf_name=${CONF_DIR}/hostapd_phy_${radio_name}_${pid}.conf
		# Remove the channel parameter.
		remove_params_from_conf "channel" $hostapd_phy_conf_name $HOSTAPD_PHY_CONF_PREFIX
		# Write the new channel value
		set_conf_param hostapd_phy regular no_otf $pid $radio_name channel "$channel"
	fi
fi
# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/ap_set_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
