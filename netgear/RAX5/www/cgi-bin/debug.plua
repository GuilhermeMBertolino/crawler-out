#!/usr/bin/env cgilua.cgi

local json = require "luci.json"
local log = require "luci.log"
local os = require"os"
local sys  = require "luci.sys"
local uci  = require "luci.model.uci".cursor()

--log.debug(1)

--local ret = {status="error", message="invalid parameter"}
local checkFileExist = function(phy_path)
        local f, err = io.open(phy_path)
        if not f then return nil, err end
        f:close()
        return true, nil
end

local debugPageSetting = {
        status = "NO_VALUE",
        dumpLANWANpkt = "NO_VALUE",
        packetCaptureLocation = "NO_VALUE",
        logWhenBootup = "NO_VALUE",
        useReadyCloudTestserver = "NO_VALUE",
        rmoverlayNreset = "NO_VALUE",
        xagent = "NO_VALUE",
        allowipv6pingfromexternal = "NO_VALUE",
        Ipv6mode = "", -- << PEGA Ipv6mode
        wantolanmirror = "NO_VALUE",
        Serverip = "",
        debugFun = "",
        debuglog = "NO_VALUE",
        dallog = "NO_VALUE",
        raLog = "NO_VALUE",
        raDebugData = {
            mode = "NO_VALUE",
            raInitStartTime = "NO_VALUE",
            raHTTPServerIP = "",
            raServerPath = "",
            debugInterval = 0,
            updateInverval = 0,
            isManual = 0,
            raDebugPrint = "NO_VALUE"
        }
    }
local currentDebugPageSetting = {
        status = "NO_VALUE",
        dumpLANWANpkt = "NO_VALUE",
        packetCaptureLocation = "NO_VALUE",
        logWhenBootup = "NO_VALUE",
        useReadyCloudTestserver = "NO_VALUE",
        rmoverlayNreset = "NO_VALUE",
        xagent = "NO_VALUE",
        allowipv6pingfromexternal = "NO_VALUE",
        Ipv6mode = "", -- << PEGA Ipv6mode
        wantolanmirror = "NO_VALUE",
        Serverip = "",
        debugFun = "",
        debuglog = "NO_VALUE",
        dallog = "NO_VALUE",
        raLog = "NO_VALUE",
        raDebugData = {
            mode = "NO_VALUE",
            raInitStartTime = "NO_VALUE",
            raHTTPServerIP = "",
            raServerPath = "",
            debugInterval = 0,
            updateInverval = 0,
            isManual = 0,
            raDebugPrint = "NO_VALUE"
        }
    }

local PostFunc = cgilua.POST["function"]
local Localtion = cgilua.POST["store_location"]
local Start = cgilua.POST["Start_When_Boot_Up"]
local DebugLog = cgilua.POST["DebugLog"]
local Capture = cgilua.POST["action_Start_Capture"]
local DalLog = cgilua.POST["dal_logs"]
local Ralog = cgilua.POST["ra_log"]
local DumpPkt = cgilua.POST["dump_LAN_WAN_pkt"]
local IPv6Ping = cgilua.POST["IPv6Ping_External_to_Internal"]
local Mirror = cgilua.POST["WAN_port_mirror_to_LAN_port"]
local Clean = cgilua.POST["action_Clean_All"]
local Xagent = cgilua.POST["xagent"]
local CloudTest = cgilua.POST["ReadyCloudTestServer"]
local Rastage = cgilua.POST["RAstage"]
local rae_default = cgilua.POST["rae_default"]
local Httpserverip = cgilua.POST["HTTPserverIP"]
local serverPath = cgilua.POST["serverPath"]
local initStartTime = cgilua.POST["initStartTime"]
local debugInterval = cgilua.POST["debugInterval"]
local updateInterval = cgilua.POST["updateInterval"]
local ra_debug_print = cgilua.POST["ra_debug"]
local requestmethod = cgilua.servervariable"REQUEST_METHOD"


function ProcessDebugAction(command)
    local pid = nixio.fork()
    if pid > 0 then
        return
    elseif pid == 0 then
        -- change to root dir
        log.console("ProcessDebugAction : ",command)
        nixio.chdir("/")

        -- patch stdin, out, err to /dev/console
        local console = nixio.open("/dev/console", "w+")
        if console then
            nixio.dup(console, nixio.stderr)
            nixio.dup(console, nixio.stdout)
            nixio.dup(console, nixio.stdin)
            if console:fileno() > 2 then
                console:close()
            end
        end

        -- replace with target command
        --nixio.exec("/bin/sh", "-c", command)
        nixio.exec(command)
    end
end

function SaveDebugConf(filename,Config)
    local saveStr = ""
    local file = io.open(filename,"w")

    if file then
        if ( string.len(Config["debugFun"]) > 0 ) then
            saveStr = string.format("FUNC=%s\n",Config["debugFun"])
            file:write(saveStr)
        end

        if ( Config["status"] == "CAPTURE_START" ) then
            saveStr = string.format("CAPTURE_STATE=%s\n",Config["status"])
            file:write(saveStr)
        else
            if ( Config["status"] ~= "NO_VALUE" ) then
                saveStr = string.format("CAPTURE_STATE=%s\n","DISABLE")
                file:write(saveStr)
            end
        end

        if ( Config["dumpLANWANpkt"] == "YES" ) then
            saveStr = string.format("PACKETCAPTURE=%s\n","ENABLE")
            file:write(saveStr)
        else
            if ( Config["dumpLANWANpkt"] == "NO" ) then
                saveStr = string.format("PACKETCAPTURE=%s\n","DISABLE")
                file:write(saveStr)
            end
        end

        if ( Config["packetCaptureLocation"] == "Memory" ) then
            saveStr = string.format("CAPTURE_STORE_LOCATION=%s\n","STORE_IN_SYSTEM_MEMORY")
            file:write(saveStr)
        else
            if ( Config["packetCaptureLocation"] ~= "NO_VALUE" ) then
                saveStr = string.format("CAPTURE_STORE_LOCATION=%s\n","STORE_IN_USB_STORAGE")
                file:write(saveStr)
            end
        end

        if ( Config["logWhenBootup"] ~= "NO_VALUE" ) then
            saveStr = string.format("LOG_WHEN_BOOTUP=%s\n",string.upper(Config["logWhenBootup"]))
            file:write(saveStr)
        end

        if ( Config["useReadyCloudTestserver"] ~= "NO_VALUE" ) then
            saveStr = string.format("READYCLOUD_TEST_SERVER=%s\n",string.upper(Config["useReadyCloudTestserver"]))
            file:write(saveStr)
        end

        if ( Config["rmoverlayNreset"] == "RESET_OVERLAY_DATA" ) then
            saveStr = string.format("RESET_OVERLAY_DATA=%s\n","TRUE")
            file:write(saveStr)
        else
            if ( Config["rmoverlayNreset"] ~= "NO_VALUE" ) then
                saveStr = string.format("RESET_OVERLAY_DATA=%s\n","FALSE")
                file:write(saveStr)
            end
        end

        if ( Config["xagent"] ~= "NO_VALUE" ) then
            saveStr = string.format("XAGENT=%s\n",string.upper(Config["xagent"]))
            file:write(saveStr)
        end

        if ( Config["dallog"] ~= "NO_VALUE" ) then
            saveStr = string.format("DAL_LOGS=%s\n",string.upper(Config["dallog"]))
            file:write(saveStr)
        end

        if ( Config["raLog"] ~= "NO_VALUE" ) then
            saveStr = string.format("RA_LOG=%s\n",string.upper(Config["raLog"]))
            file:write(saveStr)
        end


        if ( Config["allowipv6pingfromexternal"] ~= "NO_VALUE" ) then
            saveStr = string.format("ALLOWIPV6PING=%s\n",string.upper(Config["allowipv6pingfromexternal"]))
            file:write(saveStr)
        end

        if( Config["Ipv6mode"] and string.len(Config["Ipv6mode"])>0 ) then
            saveStr = string.format("IPV6MODE=%s\n",Config["Ipv6mode"])
            file:write(saveStr)
        end

        if ( Config["wantolanmirror"] ~= "NO_VALUE" ) then
            saveStr = string.format("WANMIRROR=%s\n",string.upper(Config["wantolanmirror"]))
            file:write(saveStr)
        end

        if ( Config["Serverip"] and string.len(Config["Serverip"])>0 ) then
            saveStr = string.format("RA_SERVERIP=%s\n",Config["Serverip"])
            file:write(saveStr)
        else
            saveStr = string.format("RA_SERVERIP=%s\n","EMPTY")
            file:write(saveStr)
        end

        if ( Config.raDebugData["mode"] ~= "NO_VALUE" ) then
            saveStr = string.format("RA_MODE=%s\n",string.upper(Config.raDebugData["mode"]))
            file:write(saveStr)
        end

        if ( Config.raDebugData["isManual"] ~= "NO_VALUE" ) then
            saveStr = string.format("RA_ISMANUAL=%s\n",string.upper(Config.raDebugData["isManual"]))
            file:write(saveStr)
        end

        if ( Config.raDebugData["raHTTPServerIP"] and string.len(Config.raDebugData["raHTTPServerIP"])>0 ) then
            saveStr = string.format("RA_HTTPSERVERIP=%s\n",Config.raDebugData["raHTTPServerIP"])
            file:write(saveStr)
        else
            saveStr = string.format("RA_HTTPSERVERIP=%s\n","EMPTY")
            file:write(saveStr)
        end

        if ( Config.raDebugData["raServerPath"] and string.len(Config.raDebugData["raServerPath"])>0 ) then
            saveStr = string.format("RA_SERVERPATH=%s\n",Config.raDebugData["raServerPath"])
            file:write(saveStr)
        else
            saveStr = string.format("RA_SERVERPATH=%s\n","EMPTY")
            file:write(saveStr)
        end

        if ( Config["debuglog"] ~= "NO_VALUE" ) then
            saveStr = string.format("DEBUGLOG=%s\n",string.upper(Config["debuglog"]))
            file:write(saveStr)
        end

        if ( Config.raDebugData["debugInterval"] > 0 ) then
            saveStr = string.format("RA_DEBUGINTERVAL=%d\n",Config.raDebugData["debugInterval"])
            file:write(saveStr)
        end

        if ( Config.raDebugData["updateInverval"] > 0 ) then
            saveStr = string.format("RA_UPDATEINTERVAL=%d\n",Config.raDebugData["updateInverval"])
            file:write(saveStr)
        end

        if ( Config.raDebugData["raDebugPrint"] ~= "NO_VALUE" ) then
            saveStr = string.format("RA_DEBUGPRINT=%s\n",Config.raDebugData["raDebugPrint"])
            file:write(saveStr)
        end

        file:close()
    end
end

function SaveDebugConfig()

    local fileExist , err = checkFileExist("/var/debug.conf")
    if fileExist then
        SaveDebugConf("/var/newdebug.conf",debugPageSetting)
    else
        SaveDebugConf("/var/debug.conf",currentDebugPageSetting)
        SaveDebugConf("/var/newdebug.conf",debugPageSetting)
    end
end

function CGIGET_XcloudLog()

    local fileExist , err = checkFileExist("/tmp/xagent.log")

    sys.exec("cd /tmp/;rm -irf /tmp/XCloudLog.zip")

    if fileExist then
        sys.exec("zip -9 -q -r -j /tmp/XCloudLog.zip /tmp/xagent.log")
    else
        sys.exec("echo > /tmp/xagent.log; zip -9 -q -r -j /tmp/XCloudLog.zip /tmp/xagent.log; rm -irf /tmp/xagent.log")
    end

    fileExist , err = checkFileExist("tmp/genie_handler.log")

    if fileExist then
        sys.exec("zip -9 -q -r -j /tmp/XCloudLog.zip /tmp/genie_handler.log")
    else
        sys.exec("echo > /tmp/genie_handler.log; zip -9 -q -r -j /tmp/XCloudLog.zip /tmp/genie_handler.log; rm -irf /tmp/genie_handler.log")
    end

end

function CGIOUTPUT_XcloudLogFile()
    log.console("============== CGIOUTPUT_XcloudLogFile ===========")
    sys.exec("sleep 3")
    cgilua.put("<HTML>")
    cgilua.put("<meta http-equiv=\"Refresh\" content=\"1; url=../XCloudLog.zip\">")
    cgilua.put("<script language=\"javascript\" type=\"text/javascript\">")
    cgilua.put("var timer = setTimeout(function() {")
    cgilua.put("          window.location.href='../XCloudLog.htm'")
    cgilua.put("      }, 3000);")
    cgilua.put("</script>")
    cgilua.put("</HTML>")
end

function CGIOUTPUT_DebugPage()
    log.console("============== ",__FILE__,__FUNCTION__,__LINE__);
    cgilua.put("<HTML>")
    cgilua.put("<meta http-equiv=\"Refresh\" content=\"1; url=../debug_m.htm\">")
    cgilua.put("</HTML>")
end

function CGIOUTPUT_DebugFile()
    log.console("============== CGIOUTPUT_DebugFile ===========")
    sys.exec(" rm -f /tmp/debug_log_1.zip /var/debug_log.zip")
    sys.exec("sleep 1")
    local fileExist = ""
    for i = 1, 90 do
        fileExist , err = checkFileExist("/tmp/debug_log.zip")
        if fileExist then
            break
        else
            sys.exec("sleep 1")
        end
    end
    cgilua.put("<HTML>")
    cgilua.put("<meta http-equiv=\"Refresh\" content=\"1; url=../debug_log.zip\">")
    cgilua.put("<script language=\"javascript\" type=\"text/javascript\">")
    cgilua.put("setTimeout('history.go(-1)', 5000);")
    cgilua.put("</script>")
    cgilua.put("</HTML>")
end

function upload_xCloudLog()
    local file = io.open("/tmp/XCloudLog.zip","rb")

    if file then
       local buf = file:read("*all")
       file:close()
       io.write(buf)
    end
end

function SetDebugTable()
    if Localtion then
        log.console("Localtion = ",Localtion)
        if Localtion == "System Memory" then
            debugPageSetting["packetCaptureLocation"] = "Memory"
        else
            if Localtion == "USB Device" then
                debugPageSetting["packetCaptureLocation"] = "USB"
            end
        end
    else
        debugPageSetting["packetCaptureLocation"] = "NO_VALUE"
    end

    if Start then
        log.console("logWhenBootup = ",logWhenBootup)
        if Start == "On" then
            debugPageSetting["logWhenBootup"] = "Enable"
        else
            debugPageSetting["logWhenBootup"] = "Disable"
        end
    else
        debugPageSetting["logWhenBootup"] = "NO_VALUE"
    end

    if DebugLog then
        log.console("DebugLog = ",DebugLog)
        debugPageSetting["debuglog"] = "SAVE"
    else
        debugPageSetting["debuglog"] = "NO_VALUE"
    end

    if Capture then
        if Capture == "Start_Capture" then
            debugPageSetting["status"] = "CAPTURE_START"
        end
    end

    if DalLog then
        log.console("DalLog = ",DalLog)
        if DalLog == "On" then
            debugPageSetting["dallog"] = "Enable"
        else
            if DalLog == "Off" then
                debugPageSetting["dallog"] = "Disable"
            end
        end
    end


    if Ralog then
        log.console("Ralog = ",Ralog)
        if Ralog == "On" then
            debugPageSetting["raLog"] = "Enable"
        else
            debugPageSetting["raLog"] = "Disable"
        end
    end

    if DumpPkt then
        log.console("DumpPkt = ",DumpPkt)
        if DumpPkt == "On" then
            debugPageSetting["dumpLANWANpkt"] = "YES"
        else
            debugPageSetting["dumpLANWANpkt"] = "NO"
        end
    end

    if IPv6Ping then
        log.console("IPv6Ping = ",IPv6Ping)
        local wanMode = uci:get("network", "inet_global", "wan_mode")
        if wanMode then
            if wanMode == "PPPoE" then
                if uci:get("network", "wan_v6", "use_v4") == "true" then
                    debugPageSetting["Ipv6mode"] = "pppoe-wan"
                else
                    debugPageSetting["Ipv6mode"] = "pppoe-wan2"
                end
            else
                debugPageSetting["Ipv6mode"] = "eth1"
            end
        end
        if IPv6Ping == "On" then
            debugPageSetting["allowipv6pingfromexternal"] = "Enable"
        else
            debugPageSetting["allowipv6pingfromexternal"] = "Disable"
        end
    end

    if Mirror then
        if Mirror == "On" then
            debugPageSetting["wantolanmirror"] = "Enable"
        else
            debugPageSetting["wantolanmirror"] = "Disable"
        end
    end

    if Clean then
        if Clean == "Clean_All" then
            debugPageSetting["rmoverlayNreset"] = "RESET_OVERLAY_DATA"
        end
    end

    if Xagent then
        if Xagent == "On" then
            debugPageSetting["xagent"] = "Enable"
        else
            if Xagent == "Off" then
                debugPageSetting["xagent"] = "Disable"
            end
        end
    end

    if CloudTest then
        if CloudTest == "On" then
            debugPageSetting["useReadyCloudTestserver"] = "Enable"
        else
            debugPageSetting["useReadyCloudTestserver"] = "Disable"
        end
    end
    if Rastage then
        if Rastage == "QA" then
            debugPageSetting.raDebugData["mode"] = "QA"
        else
            if Rastage == "Dev" then
                debugPageSetting.raDebugData["mode"] = "Dev"
            else
                debugPageSetting.raDebugData["mode"] = "PROD"
            end
        end
    end

    if Httpserverip then
        if ( string.len(Httpserverip) > 0) and ( string.len(Httpserverip) < 100 ) then
            debugPageSetting["Serverip"] = Httpserverip
            debugPageSetting.raDebugData["raHTTPServerIP"] = Httpserverip
        end
    end

    if serverPath then
        if ( string.len(serverPath) > 0) and ( string.len(serverPath) < 100 ) then
            debugPageSetting.raDebugData["raServerPath"] = serverPath
        end
    end

    if debugInterval then
        local interval = tonumber(debugInterval)
        if interval > 0 then
            debugPageSetting.raDebugData["debugInterval"] = interval
        else
             debugPageSetting.raDebugData["debugInterval"] = 0
        end
    end

    if updateInterval then
        local update = tonumber(updateInterval)
        if update > 0 then
            debugPageSetting.raDebugData["updateInverval"] = update
        else
            debugPageSetting.raDebugData["updateInverval"] = 0
        end
    end

    if ra_debug_print then
        if ra_debug_print == "On" then
            debugPageSetting.raDebugData["raDebugPrint"] = "Enable"
        else
            debugPageSetting.raDebugData["raDebugPrint"] = "Disable"
        end
    end

    if rae_default then
        if rae_default == "On" then
            debugPageSetting.raDebugData["isManual"] = "0"
        else
            debugPageSetting.raDebugData["isManual"] = "1"
        end
    end

end

if requestmethod == "POST" then
    if PostFunc then
        log.console(" Post function : ",PostFunc)
        SetDebugTable()

        if ( PostFunc == "CF4" ) then
            local resultStr = ""
            local cmd = ""
            local resultNum = 0
            local getraStage = io.popen("ra_nvram get RA_stage | xargs echo -n | tr '[a-z]' '[A-Z]'")

            debugPageSetting.debugFun = PostFunc
            if getraStage then
                resultStr = getraStage:read("*l")
                currentDebugPageSetting.raDebugData["mode"] = resultStr
--                if ( resultStr == "qa" ) then
--                    currentDebugPageSetting.raDebugData["mode"] = "QA"
--                else
--                    if ( resultStr == "dev" ) then
--                        currentDebugPageSetting.raDebugData["mode"] = "Dev"
--                    else
--                      currentDebugPageSetting.raDebugData["mode"] = "PROD"
--                  end
--              end
                cmd = string.format("sed -i \"/^%s=/ s/=.*$/=%s/\" %s","RA_MODE",resultStr,"/var/debug.conf")
                sys.exec(cmd)
                getraStage:close()
            end

            local getManual = io.popen("ra_nvram get RA_isManual | xargs echo -n")
            if getManual then
                resultStr = getManual:read("*l")
                currentDebugPageSetting.raDebugData["isManual"] = resultStr
                cmd = string.format("sed -i \"/^%s=/ s/=.*$/=%s/\" %s","RA_ISMANUAL",resultStr,"/var/debug.conf")
                sys.exec(cmd)
                getManual:close()
            end

            local getDebugInterval = io.popen("ra_nvram get RA_debug_DailyReportTime | xargs echo -n")
            if getDebugInterval then
                resultStr = getDebugInterval:read("*l")
                if resultStr then
                    if resultStr == "" then
                        currentDebugPageSetting.raDebugData["debugInterval"] = 0
                    else
                        resultNum = tonumber(resultStr)
                        if (resultNum > 0) then
                            currentDebugPageSetting.raDebugData["debugInterval"] = resultNum
                        else
                            currentDebugPageSetting.raDebugData["debugInterval"] = 0
                        end
                    end
                    cmd = string.format("sed -i \"/^%s=/ s/=.*$/=%s/\" %s","RA_DEBUGINTERVAL",resultStr,"/var/debug.conf")
                    sys.exec(cmd)
                else
                    currentDebugPageSetting.raDebugData["debugInterval"] = 0
                end
                getDebugInterval:close()
            end

            local getraDebugPrint = io.popen("ra_nvram get RA_debug_print | xargs echo -n")
            if getraDebugPrint then
                resultStr = getraDebugPrint:read("*l")

                if resultStr then
                    if resultStr == "Enable" then
                        currentDebugPageSetting.raDebugData["raDebugPrint"] = "Enable"
                    else
                        currentDebugPageSetting.raDebugData["raDebugPrint"] = "Disable"
                    end
                    cmd = string.format("sed -i \"/^%s=/ s/=.*$/=%s/\" %s","RA_DEBUGPRINT",resultStr,"/var/debug.conf")
                    sys.exec(cmd)
                else
                end
                getraDebugPrint:close()
            end

            local getRaUpdate = io.popen("cat /etc/rabin/raePolicy.json | grep \"updaterInternal\" | cut -d'\"' -f4 | xargs echo -n", "r")
            if getRaUpdate then
                resultStr = getRaUpdate:read("*l")

                if resultStr then
                    if resultStr == "" then
                        currentDebugPageSetting.raDebugData["updateInverval"] = 0
                    else
                        resultNum = tonumber(resultStr)
                        if ( 0 < resultNum ) then
                            currentDebugPageSetting.raDebugData["updateInverval"] = resultNum
                        else
                            currentDebugPageSetting.raDebugData["updateInverval"] = 0
                        end
                    end
                    cmd = string.format("sed -i \"/^%s=/ s/=.*$/=%s/\" %s","RA_UPDATEINTERVAL",resultStr,"/var/debug.conf")
                    sys.exec(cmd)
                else
                    currentDebugPageSetting.raDebugData["updateInverval"] = 0
                end


                getRaUpdate:close()
            end

        else
            if ( PostFunc == "CF1" ) then
                local fileExist , err = checkFileExist("/etc/rabin/enable_ra_log")
                debugPageSetting.debugFun = PostFunc
                if fileExist then
                    currentDebugPageSetting["raLog"] = "Enable"
                else
                    currentDebugPageSetting["raLog"] = "Disable"
                end
            else
                if ( PostFunc == "CF3" or PostFunc == "CF7" or PostFunc == "CF5" or PostFunc == "CF8" ) then
                    debugPageSetting.debugFun = PostFunc
                else
                    if ( PostFunc == "cf_xcloudlog" ) then
                        debugPageSetting.debugFun = PostFunc
                        CGIGET_XcloudLog()
                        CGIOUTPUT_XcloudLogFile()
                        return
                    end
                end
            end
        end

        SaveDebugConfig()
        ProcessDebugAction("/usr/sbin/debug.sh")

        if ( debugPageSetting["debuglog"] ~= "SAVE" ) then
            CGIOUTPUT_DebugPage()
        else
            CGIOUTPUT_DebugFile()
        end
--      ret = {status="success", message="debug test "}

--      cgilua.contentheader('application','json')
--        return json.encode({status=ret.status, message=ret.message})
    end
else
    if  requestmethod == "GET" then
        local requrl = cgilua.servervariable"REQUEST_URL"
        if requrl then
            log.console("Get url 1 = ",requrl)
            local rulval = string.find(requrl,"?")

            if rulval > 1 then
                local geturl = string.sub(requrl, 1, rulval)
                log.console("Get url 2 = ",geturl)
                if geturl == "/xCloud_Debug_log.zip" then
                    CGIGET_XcloudLog()
                    upload_xCloudLog()
                end
            end

        end
    end

end

return 0
