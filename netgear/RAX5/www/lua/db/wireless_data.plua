#!/usr/bin/lua

--For LUA
function __FILE__() return debug.getinfo(2, 'S').short_src end -- or use .source
function __FUNCTION__() return debug.getinfo(2, 'n').name end
function __LINE__() return debug.getinfo(2, 'l').currentline end

local json = require "luci.json"
local uci = require "luci.model.uci".cursor()
local uci_st = require "luci.model.uci".cursor(nil, "/var/state")
--local uci_st = require "luci.model.uci".cursor("/var/state", "/var/state") --Naming the local variable with "_st" to mean it's using to access "/var/state" uci.
--                                                                           --If we want to get/set UCI that mixed /etc/config/XXXX and /var/state/XXXX at same time,
--                                                                           --the parameters for cursor() should be (nil, "/var/state") or ("/etc/config", "/var/state").
local log    = require "luci.log"
    log.debug(0)
--log.console("\n")

--Proprietary LUA Objects/Libararies/APIs--
local netUtils = require "commonFunc.netUtils"
local wifiUtil_convert = require "commonFunc.wifiUtils_convertWifiSettings"
local wifi = require "webGetFunc.wireless"

function file_exists( name )
    local f=io.open(name,"r")
    if f~=nil then io.close(f) return true else return false end
end

if file_exists("\/etc\/config\/"..NTGR_WIFI_UCI_CONFIG_NAME) == false then
    --Create and Update NTGR_WiFi UCI config--
    wifiUtil_convert.update_NTGR_WiFi_uci()
end

log.console("\n")
log.console("====Debug Print Start of "..__FILE__().."====")

local data = { }
data["country"] = { value = wifi.getWifiRegion(), type = "select" }
data["enableAX"] = { value = wifi.getEnableAX(), type = "checkbox" }
data["2GOfdma"] = { value = wifi.getEnableOFDMA("2.4G"), type = "checkbox" }
data["5GOfdma"] = { value = wifi.getEnableOFDMA("5G"), type = "checkbox" }
data["smartConnect"] = { value = wifi.getSmartConnect(), type = "checkbox" }

--2.4G settings
data["2GSsidBroadcast"] = { value = wifi.getSSIDBroadcast("2.4G", "primary"), type = "checkbox" }
data["2GCoex"] = { value = wifi.getCoex("2.4G"), type = "checkbox" }
data["2GSsid"] = { value = wifi.getSsid("2.4G", "primary"), type = "input" }
data["2GChannel"] = { value = wifi.getWifiChannel("2.4G"), type = "select" }
data["2GMode"] = { value = wifi.getWiFiMode("2.4G"), type = "select" } --Represent "Speed", it's a combinational value, it can not map to sigle wireless setting/config parameter directly.
local securityType_2G = wifi.getSecurityType("2.4G", "primary")
data["2GSecurity"] = { value = securityType_2G, type = "radio" }
data["2GPassword"] = { value = wifi.getWPAPassphrase("2.4G", "primary"), type = "input" }
local encryptMode_2G = wifi.getEncryptType("2.4G", "primary")
if securityType_2G == "1" then encryptMode_2G = "0" end --For CGI POST handler's validation, could not set to -1 otherwise HTML will NOT send it to POST handler(validation will fail).
data["2GEncryptMode"] = { value = encryptMode_2G, type = "select" }
data["2GGroupKeyInt"] = { value = wifi.getRadiusGroupRekeyInterval("2.4G"), type = "input" }
--Leave ""(blank string) is for default using. (If user chose enterprise but not type-in RADIUS server ip, it shold not be committed or applied.)
data["2GRadiusIP"] = { value = wifi.getRadiusIP("2.4G"), type = "ip", idStr_prefix = "radius_ipaddress" }
data["2GRadiusPort"] = { value = wifi.getRadiusPort("2.4G"), type = "input" }
data["2GRadiusSecret"] = { value = wifi.getRadiusSecret("2.4G"), type = "input" }

--5G settings
data["5GSsidBroadcast"] = { value = wifi.getSSIDBroadcast("5G", "primary"), type = "checkbox" }
data["5GSsid"] = { value = wifi.getSsid("5G", "primary"), type = "input" }
data["5GChannel"] = { value = wifi.getWifiChannel("5G"), type = "select" }

data["5GMode"] = { value = wifi.getWiFiMode("5G"), type = "select" } --Represent "Speed", it's a combinational value, it can not use sigle wireless setting/config parameter to use directly.
data["5GBandwidth"] = { value = wifi.getWiFi_5GBandwidth(), type = "input" }
local securityType_5G = wifi.getSecurityType("5G", "primary")
data["5GSecurity"] = { value = securityType_5G, type = "radio" }
data["5GPassword"] = { value = wifi.getWPAPassphrase("5G", "primary"), type = "input" }
local encryptMode_5G = wifi.getEncryptType("5G", "primary")
if securityType_5G == "1" then encryptMode_5G = "0" end --For CGI POST handler's validation, could not set to -1 otherwise HTML will NOT send it to POST handler(validation will fail).
data["5GEncryptMode"] = { value = encryptMode_5G, type = "select" }
data["5GGroupKeyInt"] = { value = wifi.getRadiusGroupRekeyInterval("5G"), type = "input" }
--Leave ""(blank string) is for default using. (If user chose enterprise but not type-in RADIUS server ip, it shold not be committed or applied.)
data["5GRadiusIP"] = { value = wifi.getRadiusIP("5G"), type = "ip", idStr_prefix = "radius_ipaddress", idStr_postfix = "_an" }
data["5GRadiusPort"] = { value = wifi.getRadiusPort("5G"), type = "input" }
data["5GRadiusSecret"] = { value = wifi.getRadiusSecret("5G"), type = "input" }

--5G1 settings
--data["5G1SsidBroadcast"] = { value = "EU", type = "select" }
--data["5G1Ssid"] = { value = "EU", type = "select" }
--data["5G1Channel"] = { value = "EU", type = "select" }
--data["5G1Mode"] = { value = "EU", type = "select" }
--data["5G1TxPower"] = { value = "EU", type = "select" }
--data["5G1Security"] = { value = "EU", type = "select" }
--data["5G1Password"] = { value = "EU", type = "select" }
--data["5G1EncryptMode"] = { value = "EU", type = "select" }
--data["5G1GroupKeyInt"] = { value = "EU", type = "select" }
--data["5G1RadiusIP"] = { value = "EU", type = "select" }
--data["5G1RadiusPort"] = { value = "EU", type = "select" }
--data["5G1RadiusSecret"] = { value = "EU", type = "select" }

--misc data
--data["5G1Bandwidth"] = { value = "EU", type = "select" }
data["2GGuestSsid"] = { value = wifi.getSsid("2.4G", "guest"), type = "input" }
data["5GGuestSsid"] = { value = wifi.getSsid("5G", "guest"), type = "input" }
data["2GRadioOn"] = { value = wifi.getRadioOn("2.4G"), type = "input" }
data["5GRadioOn"] = { value = wifi.getRadioOn("5G"), type = "input" }
data["sku"] = { value = wifi.getNmrp_sku(), type = "input" }
data["regionNo"] = { value = wifi.getRegionNo(), type = "input" }
data["enableAX256QAM"] = { value = wifi.getEnableAX256QAM(), type = "input" }

log.console("====Debug Print End of "..__FILE__().."====")
log.console("\n")

--io.write("Content-type: %s" %  {"application/json"} )
--io.write("\r\n\r\n")
--io.write(json.encode(data))
return json.encode(data)

--//================RAX30's wireless_data.php(Not implemented items)================//--TODO: Remove me when this paga all done.
--<?
--  include '../wifi.php';
--  if (!isset($data))
--    $data = new stdClass();
--
--/*
--  $data->{'5G1SsidBroadcast'} = (object) null;
--  $data->{'5G1SsidBroadcast'}->value = getCheckboxVal_5g1SsidBroadcast();
--  $data->{'5G1SsidBroadcast'}->type = 'checkbox';
--  
--  $data->{'5G1Ssid'} = (object) null;
--  $data->{'5G1Ssid'}->value = getTextVal_5g1Ssid();
--  $data->{'5G1Ssid'}->type = 'input';
--
--  $data->{'5G1Channel'} = (object) null;
--  $data->{'5G1Channel'}->value = getSelectVal_5g1Channel();
--  $data->{'5G1Channel'}->type = 'select';
--
--  $data->{'5G1Mode'} = (object) null;
--  $data->{'5G1Mode'}->value = getSelectVal_5g1Mode();
--  $data->{'5G1Mode'}->type = 'select';
--
--  $data->{'5G1TxPower'} = (object) null;
--  $data->{'5G1TxPower'}->value = getSelectVal_5g1TxPower();
--  $data->{'5G1TxPower'}->type = 'select';
--
--  $data->{'5G1Security'} = (object) null;
--  $data->{'5G1Security'}->value = getRadioVal_5g1Security();
--  $data->{'5G1Security'}->type = 'radio';
--
--  $data->{'5G1Password'} = (object) null;
--  $data->{'5G1Password'}->value = getTextVal_5g1Passwd();
--  $data->{'5G1Password'}->type = 'input';
--
--  $data->{'5G1EncryptMode'} = (object) null;
--  $data->{'5G1EncryptMode'}->value = getSelectVal_5g1EncryptMode();
--  $data->{'5G1EncryptMode'}->type = 'select';
--
--  $data->{'5G1GroupKeyInt'} = (object) null;
--  $data->{'5G1GroupKeyInt'}->value = '3600';
--  //$data->{'5G1GroupKeyInt'}->type = 'radio';
--
--  $data->{'5G1RadiusIP'} = (object) null;
--  $data->{'5G1RadiusIP'}->value = getIpVal_5g1RadiusIP();
--  $data->{'5G1RadiusIP'}->type = 'ip';
--
--  $data->{'5G1RadiusPort'} = (object) null;
--  $data->{'5G1RadiusPort'}->value = getTextVal_5g1RadiusPort();
--  $data->{'5G1RadiusPort'}->type = 'input';
--
--  $data->{'5G1RadiusSecret'} = (object) null;
--  $data->{'5G1RadiusSecret'}->value = getTextVal_5g1RadiusSecret();
--  $data->{'5G1RadiusSecret'}->type = 'input';
--*/
--  
--/*
--  $data->{'5G1Bandwidth'} = (object) null;
--  $data->{'5G1Bandwidth'}->value = db_get("Device.WiFi.Radio.{$radio_5g1}.OperatingChannelBandwidth");
--  $data->{'5G1Bandwidth'}->type = 'nopost';
--*/
--  
--  $data->{'regionNo'} = (object) null;
--  $data->{'regionNo'}->value = getRegionNo();
--
--  $data->{'enableAX256QAM'} = (object) null;
--  $data->{'enableAX256QAM'}->value = getEnableAX256QAM();
--
--  echo json_encode($data);
--?>
