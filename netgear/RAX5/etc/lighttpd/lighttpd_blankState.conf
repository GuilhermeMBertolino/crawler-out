# lighttpd configuration file
#
# The config file is use for blank state
# 1. It will captive all http/https request to router's setup page
# 2. It only allows user do setup wizard first and can't access other setup pages
# 3. Disable auth for blank state

## modules to load
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules = (
	"mod_rewrite",
	"mod_redirect",
	"mod_alias",
	"mod_auth",
	"mod_authn_file",
	"mod_setenv",
	"mod_fastcgi",
	"mod_cgi",
	"mod_access",
	"mod_accesslog",
	"mod_openssl"
)

var.realm = "MODEL_NAME"

## force use of the "write" backend (closes: #2401)
server.network-backend = "write"

## a static document-root, for virtual-hosting take look at the
## server.virtual-* options
server.document-root = "/www/"

$HTTP["scheme"] == "http" {
    server.document-root = "/www/"
}

## where to send error-messages to
server.errorlog = "/var/log/lighttpd/error.log"

## access log
accesslog.use-syslog = "enable"
accesslog.format = "[Webaccess][admin login] from %h"

## files to check for if .../ is requested
index-file.names = ( "index.html" )

## mimetype mapping
mimetype.assign = (
	".pdf"   => "application/pdf",
	".class" => "application/octet-stream",
	".pac"   => "application/x-ns-proxy-autoconfig",
	".swf"   => "application/x-shockwave-flash",
	".json"   => "application/json",
	".wav"   => "audio/x-wav",
	".gif"   => "image/gif",
	".jpg"   => "image/jpeg",
	".jpeg"  => "image/jpeg",
	".png"   => "image/png",
	".svg"   => "image/svg+xml",
	".css"   => "text/css",
	".html"  => "text/html",
	".htm"   => "text/html",
	".js"    => "text/javascript",
	".txt"   => "text/plain",
	".dtd"   => "text/xml",
	".xml"   => "text/xml"
 )

## Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetypes.use-xattr = "enable"

## send a different Server: header
## be nice and keep it at lighttpd
#server.tag = "lighttpd"

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi", ".lp" )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)
server.port = 80

## bind to localhost (default: all interfaces)
#server.bind = "localhost"
server.bind = "0.0.0.0"

## Enable Ipv6
#server.bind = "[::]"
#server.set-v6only = "disable"
$SERVER["socket"] == "[::]:80" {  }

## error-handler for status 404
#server.error-handler-404 = "/error-handler.php"

## to help the rc.scripts
server.pid-file = "/var/run/lighttpd2.pid"

## cgi-bin
$SERVER["socket"] == "0.0.0.0:5000" {
  $HTTP["url"] =~ "^(/soap/server_sa/)" {
    index-file.names =( "soap.plua" )
    cgi.assign = ( ".plua" => "/usr/bin/cgilua.cgi" )
  }
}

$SERVER["socket"] == "[::]:5000" {
  $HTTP["url"] =~ "^(/soap/server_sa/)" {
    index-file.names =( "soap.plua" )
    cgi.assign = ( ".plua" => "/usr/bin/cgilua.cgi" )
  }
}

$SERVER["socket"] == "0.0.0.0:5043" {
  ssl.engine = "enable"
  ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
  ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
  dir-listing.activate = "enable"
  dir-listing.set-footer = " "
  server.document-root = "/www/"
  $HTTP["url"] =~ "^(/soap/server_sa/)" {
    index-file.names =( "soap.plua" )
    cgi.assign = ( ".plua" => "/usr/bin/cgilua.cgi" )
  }
}

$SERVER["socket"] == "[::]:5043" {
  ssl.engine = "enable"
  ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
  ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
  dir-listing.activate = "enable"
  dir-listing.set-footer = " "
  server.document-root = "/www/"
  $HTTP["url"] =~ "^(/soap/server_sa/)" {
    index-file.names =( "soap.plua" )
    cgi.assign = ( ".plua" => "/usr/bin/cgilua.cgi" )
  }
}

$HTTP["url"] =~ "^/cgi-bin/" {
       cgi.assign = ( "" => "" )
}
cgi.assign = ( ".cgi"  => "",
               ".plua"  => "/usr/bin/cgilua.cgi",
               ".htm" => "/usr/bin/cgilua.cgi",
               ".html"  => "/usr/bin/cgilua.cgi" )

####compress module
compress.allowed-encodings = ("bzip2", "gzip", "deflate")
#compress.cache-dir          = "/tmp/cache/lighttpd/compress/"
#compress.filetype           = ("text/json","text/plain","text/css", "text/xml", "text/javascript","application/javascript","application/json")


##
## Format: <errorfile-prefix><status>.html
## -> ..../status-404.html for 'File not found'
## server.errorfile-prefix = var.VendorPath+"/www/error-"
server.errorfile-prefix = "/www/blank_state/error-"

## virtual directory listings
#server.dir-listing = "enable"

## send unhandled HTTP-header headers to error-log
#debug.dump-unknown-headers = "enable"

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot = "/"

## change uid to <uid> (default: don't care)
#server.username = "nobody"
server.upload-dirs = ( "/tmp" )

## change uid to <uid> (default: don't care)
#server.groupname = "nobody"

#### fastcgi module
## read fastcgi.txt for more info
#fastcgi.map-extensions = ( ".html" => ".php", ".htm" => ".php" )
#fastcgi.server += (
#	".php" => ((
#		"socket" => "/var/run/php-fpm.sock",
#		#"bin-path" => "/bin/php-fpm -n -R -y /etc/php-fpm.conf",
#		#"max-procs" => 1,
#		"broken-scriptfilename" => "enable"
#	))
#)

#max num of secs to wait for existing requests to complete during graceful restart (default: infinite)
server.feature-flags = ( "server.graceful-shutdown-timeout" => "1" )

## performance issue, disable keep-alive
server.max-keep-alive-requests = 0

#### auth module
#Don't need basic auth in blank_state

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

#### setenv module
#TT#191 [PSV-2017-2449] Broken Auth and Session Management
setenv.add-response-header = (
          "Access-Control-Allow-Origin" => "*",
          "Access-Control-Allow-Headers" => "accept, origin, x-requested-with, content-type",
          "Access-Control-Allow-Methods" => "GET, POST",
          "X-Frame-Options" => "SAMEORIGIN",
          "Cache-Control" => "private, no-store, no-cache, must-revalidate"
)

### access moduel
$HTTP["url"] =~ "^/" {
        $HTTP["url"] =~ "^/TNC" {
                url.access-allow = (".html")
        }
        $HTTP["url"] =~ "^/debug.htm" {
            auth.backend = "htpasswd"
            auth.backend.htpasswd.userfile = "/var/user.htpasswd"
            auth.require = (
                "" => (
                    "method"  => "basic",
                    "realm"   => realm,
                    "require" => "valid-user"
                )
            )
            auth.login_data = ("max-try" => "3")

            session.username = "admin"
            session.lifetime = 300
            session.realm = realm
        }
        url.access-allow = ("/", "index.html", "APP_index.html", "ramain.html", "genie_welcome.html", "genie_index.html", "genie_top.html",
			"WIZ_sel.html", "WIZ_sel_h.html", "FW_check.html", "debug.htm", "debug_m.htm", "currentsetting.htm", "progressbar.html", "BRS_wanlan_conflict.html",
			".js", ".png", ".css", ".plua", ".woff2", ".ico", ".gif", ".svg", ".zip")
}

# HTTPS enable
$SERVER["socket"] == "0.0.0.0:443" {
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	server.document-root = "/www/"
}
$SERVER["socket"] == "[::]:443" {
	ssl.engine = "enable"
	ssl.pemfile = "/etc/lighttpd/lighttpd.pem"
	ssl.openssl.ssl-conf-cmd = ("Options" => "-SessionTicket")
	dir-listing.activate = "enable"
	dir-listing.set-footer = " "
	server.document-root = "/www/"
}

include "/var/lighttpd/https_on_lan.inc"

