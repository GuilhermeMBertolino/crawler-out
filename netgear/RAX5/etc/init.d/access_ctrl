#!/bin/sh /etc/rc.common
# Copyright (C) 2006 OpenWrt.org

START=60
enable=''
opmode=''

AC_REDIRECT_HTTP_PORT=28081
AC_REDIRECT_HTTPS_PORT=28443

get_global_setting() {
        local section=$1
        config_get enable "$section" "enable"
}

get_dut_opmode() {
        local section=$1
        config_get opmode "$section" "mode"
}

config_load network
config_foreach get_dut_opmode "opmode"

update_iptable_rule() {
        local section=$1
        local rule=''
        local log_rule=''
        local mac=`echo $section | sed 's/.\{2\}/&:/g;s/:$//'`
        local devname=''
        local log_tag=''
        local log_id=''
        local interface=''

        config_get rule "$section" "rule"

        if [ $rule == "deny" ]; then
                echo "Add deny iptables rule for $mac" > /dev/console
                # The blocked device accesses web via 80 port would be redirected to a block site page.
                /usr/sbin/iptables -w -t nat -A accessCtrl_nat -m mac --mac-source $mac -p tcp -m multiport --dports 80 -j REDIRECT --to-ports $AC_REDIRECT_HTTP_PORT
                # The blocked device accesses web via 443 port would be redirected to a block site page.
                /usr/sbin/iptables -w -t nat -A accessCtrl_nat -m mac --mac-source $mac -p tcp -m multiport --dports 443 -j REDIRECT --to-ports $AC_REDIRECT_HTTPS_PORT
                # Block the network access of the blocked device.
                /usr/sbin/iptables -w -A accessCtrl -m mac --mac-source $mac -j DROP
                /usr/sbin/iptables -w -A accessCtrl_forward -m mac --mac-source $mac -j DROP
        fi

        # log the device is allowed or blocked
        config_get devname "$section" "custom_devname"
        if [ -z "$devname" ]; then
            devname=`uci -P /var/state get landev.$section.hostname`
        fi

        if [ $rule == "deny" ]; then
            log_rule="blocked"
        else
            log_rule="allowed"
        fi

        log_tag="[RouterOp]"

        if [ -z $devname ]; then
            logger -p local5.warn -t "$log_tag" "[Access Control] Device with MAC Address $mac is $log_rule to access the network"
        else
            logger -p local5.warn -t "$log_tag" "[Access Control] Device $devname with MAC Address $mac is $log_rule to access the network"
        fi

        # log the wifi device is allowed or blocked
        interface=`uci -P /var/state get landev.$section.interface`
        if [ $interface == "ra0" ] || [ $interface == "rax0" ] || [ $interface == "ra1" ] || [ $interface == "rax1" ]; then
            if [ $rule == "deny" ]; then
                log_rule="denied"
            else
                log_rule="allowed"
            fi

            log_tag="[Wlan]"
            logger -p local5.warn -t "$log_tag" "[WLAN access $log_rule] from MAC: $mac"
        fi
}

add_static_iptable_rules() {

    if [ $enable -eq 1 ]; then
        # allow DNS
        iptables -w -A accessCtrl -p udp  --dport 53 -j ACCEPT
        # allow http/netbios/fake dns packets to go to lan ip
        iptables -w -A accessCtrl -p udp -m multiport --dports 67,68,137,138 -j RETURN
        # allow netbios/fake http/https packets to go to lan ip
        iptables -w -A accessCtrl -p tcp -m multiport --dports 137,139,445,$AC_REDIRECT_HTTP_PORT,$AC_REDIRECT_HTTPS_PORT -j RETURN
        # allow DNS
        iptables -w -A accessCtrl_forward -p udp  --dport 53 -j ACCEPT

        # Link access control chains to main chain for access control chains can be executed
        # These rules are already done by fw3, so don't need do it herer
        #iptables -w -I INPUT -j accessCtrl
        #iptables -w -I FORWARD -j accessCtrl_forward
        #iptables -w -t nat -I PREROUTING -i br0 -j accessCtrl_nat
    fi
}

start() {

        if [ $opmode != "bridge" ]; then
            config_load "landev"

            # Get config value of landev.@accessCtrl[0].enable
            config_foreach get_global_setting "access_ctrl"

            if [ $enable -eq 1 ]; then
                    echo "access ctl is enabled" > /dev/console
                    # Add iptables rules which is not need to custom for each attached device
                    add_static_iptable_rules
                    # Add deny iptables rule for each attached device
                    config_foreach update_iptable_rule "dev"
            else
                    echo "access ctl is disabled" > /dev/console
            fi
        else
            echo "access ctl is disabled" > /dev/console
        fi

}

stop() {
        echo "/etc/init.d/access_ctrl stop()" > /dev/console
       # clear all access deny iptables rules
       /usr/sbin/iptables -t nat -F accessCtrl_nat
       /usr/sbin/iptables -F accessCtrl
       /usr/sbin/iptables -F accessCtrl_forward
}

boot() {
        # do nothing here for the script won't exeucte in boot
        # In boot, this script would triggered by /etc/firewall.d/accessCtrl, and /etc/firewall.d/accessCtrl would triigered by fw3
        echo "/etc/init.d/access_ctrl do nothing in boot()" > /dev/console
}
