#!/bin/sh
#

prepare_filesystem() {
	[ -c /dev/sflash ] || mknod -m 644 /dev/sflash c 200 0

	[ /var/etc -ef /etc ] || (mkdir -p /var && cd /var && ln -s /etc etc)
	[ /usr/bin/syswrapper.sh -ef /bin/syswrapper.sh ] || (mkdir -p /usr/bin && cd /usr/bin && ln -s /bin/syswrapper.sh syswrapper.sh)

	mkdir -p /var/run /var/tmp /var/log /var/etc /var/etc/persistent/cfg /var/lock

	if [ -e "/usr/etc/rc.prepare_fs" ]; then
		. /usr/etc/rc.prepare_fs
	fi

	# making sure that critical files are in place, make others as symbolic link
	# we need to get /etc/inittab created here
	# because we cannot do 'init -q' during rc / init
	cp -f /usr/etc/inittab /etc/inittab

	mkdir -p /etc/udhcpc
	# do not update if exist
	for f in passwd group login.defs profile hosts host.conf \
	fstab udhcpc/udhcpc udhcpc/udhcpc_ip_only startup.list udhcpc_services; do
		#if [ ! -e /etc/$f ]; then
			cp -f /usr/etc/$f /etc/$f
		#fi
	done

	mkdir -p /etc/sysinit/

	mkdir -p /etc/rc.d
	cp -R /usr/etc/rc.d/* /etc/rc.d

	for f in services protocols shells ethertypes modules.d init.d; do
    	if [ ! -e /etc/$f ] ; then
			[ -e /usr/etc/$f ] && ln -s /usr/etc/$f /etc/$f
		else
			[ ! -e /usr/etc/$f ] && ln -s /etc/$f /usr/etc/$f
		fi
	done
	[ -d /sys/fs/pstore ] && mount -t pstore pstore /sys/fs/pstore
	touch /var/run/booted
}

skip_load() {
	# create module list, skip ip/eb-tables, drivers
	if [ -d /etc/modules.d/ ]; then
			[ ! -d /etc/modules.d.sysinit ] || rm -Rf /etc/modules.d.sysinit
			mkdir /etc/modules.d.sysinit
			(cd /etc/modules.d/ && mv *-ip6tables* *-ipt-nat6 br-netfilter ebtables* ipt-* nf-* /etc/modules.d.sysinit 2>&1) >/dev/null
	fi
}

load_ubnthal() {
	# Prime some GEN 1 PCI radios to respond to security checks
	if [ -f /lib/modules/*/simple-pci-drv.ko ]; then
		/usr/sbin/modprobe simple-pci-drv
		/usr/sbin/rmmod simple-pci-drv
	fi

	# insert hal module
	[ ! -f /lib/modules/*/ubnt_framework.ko ] || insmod /lib/modules/*/ubnt_framework.ko
	[ ! -f /lib/modules/*/ubnt_common.ko ] || insmod /lib/modules/*/ubnt_common.ko
	[ ! -f /lib/modules/*/ubnthal.ko ] || insmod /lib/modules/*/ubnthal.ko
	# loading mtk related wifi driver
	[ `grep -c "MT7603\b" /proc/ubnthal/system.info` -eq 1 ] && (modprobe rlt_wifi 1>/dev/null 2>&1 || true)
	[ `grep -c "MT7622\b" /proc/ubnthal/system.info` -eq 1 ] && (modprobe mt_soc_wifi 1>/dev/null 2>&1 || true)
	[ `grep -c "MT7615\b" /proc/ubnthal/system.info` -eq 1 ] && (modprobe mt_wifi 1>/dev/null 2>&1 || true)
	if [ -e "/etc/hotplug.d/firmware/11-mtk-wifi-e2p" ]; then
		sh /etc/hotplug.d/firmware/11-mtk-wifi-e2p
	fi
	[ `grep -c "MT7981\b" /proc/ubnthal/system.info` -ge 1 ] && (modprobe mt7981_wifi 1>/dev/null 2>&1 || true) && (ifconfig ra0 up 1>/dev/null 2>&1 || true) && (ifconfig ra0 down 1>/dev/null 2>&1 || true)
	if [ `grep -c "MT7915\b" /proc/ubnthal/system.info` -eq 1 ]; then
		SYSID=`awk -F= '/^systemid=/{print $2}' /proc/ubnthal/system.info`
		if [ $SYSID = 'a612' ]; then
			devmem 0x1e000600 > /var/run/devmem_600_dir
			devmem 0x1e000620 > /var/run/devmem_620_val
			val=`devmem 0x1e000600`
			toggle=$((~(1<<19))) #set gpio19 to input
			res=$(( val & toggle ))
			devmem 0x1e000600 32 $res
			devmem 0x1e000600 > /var/run/devmem_600_dir_res
			devmem 0x1e000620 > /var/run/devmem_620_val_res
		fi

		modprobe ax_wifi_powerlimit 1>/dev/null 2>&1 || true
		modprobe ax_wifi_ubntskutbl 1>/dev/null 2>&1 || true
		modprobe ax_wifi 1>/dev/null 2>&1 || true
	fi
	# covert fw_printenv to file to present spi read/write lockup issue
	fw_printenv > /var/run/fw_env
}

load_gpiodev() {
	# BaseStationXG family only (white and black): e580 and e585
	SYSID_VALID=$(awk -F= '/^systemid=/{if ($2 ~ /e580|e585/) print 1; else print 0}' /proc/ubnthal/system.info)
	LEDBAR_BRIGHT=$(awk -F= '/ledbar_bright/ {print $2}' /var/run/fw_env)

	# While platform specific, this code must run before ubntconf and as close to gpiodev insert as possible.
	if [ "${SYSID_VALID}" -eq 1 ]; then
		OLED_DISPLAY_DISABLE=$(awk -F= '/fcd_no_display/ {print $2}' /var/run/fw_env)

		if [ -n "$OLED_DISPLAY_DISABLE" ]; then
			echo 1 > /var/run/display.off
			echo 1 > /var/run/display.fcd
		fi
	fi

	# Insert the gpiodev and set the LED
	if [ -f /lib/modules/*/gpiodev.ko ]; then
		insmod /lib/modules/*/gpiodev.ko

		# Check if /proc/ubnt_ledbar/brightness exists, if so, set brightness
		if [ -f "/proc/ubnt_ledbar/brightness" ] && [ -n "$LEDBAR_BRIGHT" ]; then
			# Set LED bar brightness if it's set; if not, skip. Should only be set on platforms that support it.
			echo -n "$LEDBAR_BRIGHT" > /proc/ubnt_ledbar/brightness
		fi

		echo -n 20 > /proc/gpio/led_pattern  # boot up blinking
	fi
}

is_mtk_gen5_or_newer() {
	# U6-Lite / U6-LR / U6+ / U6+LR
	return `awk -F= '/^systemid=/{if ($2 ~ /a612|a614|a620|a640|a642|a643/) print 0; else print 1}' /proc/ubnthal/system.info`
}

config_qdisc_default() {
	if is_mtk_gen5_or_newer; then
		echo "net.core.default_qdisc=fq_codel" >> /etc/sysctl.conf
	fi
}

do_ubntconf() {
	. /usr/bin/unifi_util_funcs.sh
	CFG_DEFAULT="/tmp/default.cfg"
	CFG_SYSTEM="/tmp/system.cfg"
	CFG_RUNNING="/tmp/running.cfg"

	SYSID=`awk -F= '/^systemid=/{print $2}' /proc/ubnthal/system.info`
	SERIALNO=`awk -F= '/^serialno=/{print toupper($2)}' /proc/ubnthal/system.info`

	QRID=`awk -F= '/^qrid=/{print $2}' /proc/ubnthal/system.info`
	KEY=$(echo ${SERIALNO} | sed -e 's/^.*\(......\)$/\1/')${QRID}

	WIFICOREDUMP_LOGS_LOCATION="/etc/persistent/wificoredump_logs"

	if [ "${QRID}" != "000000" ] && [ -e /usr/etc/default-${SYSID}.cfg ]; then
		cp /usr/etc/default-${SYSID}.cfg $CFG_DEFAULT
		sed -i -e "s/DEFAULTSSID/${SERIALNO}/g" $CFG_DEFAULT
		sed -i -e "s/DEFAULTPASSWORD/${KEY}/g" $CFG_DEFAULT
               if grep -q "true" /proc/ubnthal/status/IsLte; then
                       sed -i -e "s/PORTALSSID/${SERIALNO}/g" $CFG_DEFAULT
               fi        
	elif [ -e /usr/etc/default-nossid-${SYSID}.cfg ]; then
		cp /usr/etc/default-nossid-${SYSID}.cfg $CFG_DEFAULT
	else
		cp /usr/etc/default.cfg $CFG_DEFAULT
	fi

	# detection + default config
	if [ -e /sbin/ubntconf ]; then
		/sbin/ubntconf -i $CFG_DEFAULT
	fi

	# check mgmt for a612
	if [ `grep -c "systemid=a612\b" /proc/ubnthal/system.info` -eq 1 ]; then

		# System configuration
		/sbin/cfgmtd -r -p /etc/ -f $CFG_RUNNING 2>&1 >> /tmp/preinit_cfgmtd.log
		RC=$?
		if [ "$RC" -ne 0 ]; then
			echo "$RC" >> /tmp/preinit_cfgmtd.log
			cat /dev/mtd5 > /tmp/mtd5.bin
			/sbin/cfgmtd -r -p /etc/ -t 2 -f $CFG_RUNNING 2>&1 >> /tmp/preinit_cfgmtd.log
			RC=$?
			if [ "$RC" -ne 0 ]; then
				echo "$RC" >> /tmp/preinit_cfgmtd.log
				cp $CFG_DEFAULT $CFG_RUNNING
			fi
		fi

		# cleanup wifi coredump to avoid cfgmtd error
		rm -f `ls -d ${WIFICOREDUMP_LOGS_LOCATION}/* | head -n -1`

		ls -al /etc/persistent/ >> /tmp/preinit_cfgmtd.log
		cat /etc/persistent/cfg/mgmt >> /tmp/preinit_cfgmtd.log

		if [ ! -s /etc/persistent/cfg/mgmt ]; then
			mkdir -p /etc/persistent/cfg
			touch /tmp/MGMT_MISSING
			tar -czf /tmp/mtd5.tgz /tmp/mtd5.bin
		fi
		rm /tmp/mtd5.bin
	else
		# System configuration
		/sbin/cfgmtd -r -p /etc/ -f $CFG_RUNNING
		if [ $? -ne 0 ]; then
			/sbin/cfgmtd -r -p /etc/ -t 2 -f $CFG_RUNNING
			if [ $? -ne 0 ]; then
				cp $CFG_DEFAULT $CFG_RUNNING
			fi
		fi
	fi
	sanitize_cfg $CFG_RUNNING

	is_default=`grep -c 'mgmt\.is_default=true' $CFG_RUNNING`
	[ ${is_default} -lt 1 ] || cp $CFG_DEFAULT $CFG_RUNNING

	sort $CFG_RUNNING > $CFG_SYSTEM
	rm $CFG_RUNNING
	mkdir -p /var/etc/persistent/cfg

	# Kernel tuning
	# start the page cache/kmem cache cleanup timer in the kernel
	echo 1 > /proc/sys/vm/drop_caches
	# when processes uses page-cache more than 30% of system memory,
	# lets force them to write
	echo 20 > /proc/sys/vm/dirty_ratio
	# when the dirty pages cross more than 5% of sys memory,
	# kick in the pdflush
	echo 5 > /proc/sys/vm/dirty_background_ratio

	# Run configuration parser for minimal setup
	if [ -e /sbin/ubntconf ]; then
		/sbin/ubntconf -m
	fi
}

perform_early_upgrade() {
	if [ -e "/usr/etc/rc.early_upgrade" ]; then
		. /usr/etc/rc.early_upgrade
	fi
}

prepare_rc_platform() {
	if [ -x /etc/rc.d/rc.${SYSID} ]; then
		rm -f /etc/rc.d/rc.platform 2>&1 >/dev/null
		cd /etc/rc.d && ln -s rc.${SYSID} rc.platform
	fi
}

boot_hook_add preinit_ubnt prepare_filesystem
boot_hook_add preinit_ubnt skip_load
boot_hook_add preinit_ubnt load_ubnthal
boot_hook_add preinit_ubnt load_gpiodev
boot_hook_add preinit_ubnt config_qdisc_default
boot_hook_add preinit_ubnt perform_early_upgrade
boot_hook_add preinit_ubnt do_ubntconf
boot_hook_add preinit_ubnt prepare_rc_platform

