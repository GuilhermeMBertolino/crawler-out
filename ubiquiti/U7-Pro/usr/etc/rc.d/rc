#!/bin/sh
# vim: ft=sh

exec 2> /tmp/rc.txt
exec 1>&2
set -x

cmd=$1
cfg_file=$2
is_restarting=false

. /usr/etc/rc.d/rc.plugins
. /usr/bin/unifi_util_funcs.sh

# check if it's an LTE device
if grep -q "true" /proc/ubnthal/status/IsLte
then
    echo "192.168.2.2" > /var/run/ltetopip
    echo "192.168.2.3" > /var/run/ltebottomip
    plugins="system syslog users ipset switch resolv radio wireless wevent \
             iptables ebtables bonding vlan bridge net \
             route wpasupplicant dhcpc sshd aaa ntpclient dhcpd mcsd snmpd pwdog \
             igmpproxy qos dnsmasq cron redirector poepass lldpd macacl unifi_block \
             netconsole baresip player simpin connectivity lte unifi"
else
    plugins="system syslog display ledbar users ipset switch resolv radio \
             wireless diag_lite_log mesh wevent iptables ebtables bonding vlan \
             bridge net route wpasupplicant dhcpagent dhcpc ipsec \
             aptunnel ppp sshd aaa ntpclient dhcpd mcsd snmpd pwdog igmpproxy \
             qos dnsmasq cron redirector poepass lldpd macacl unifi_block netconsole baresip \
             player ble element_adopt connectivity ble_general infrared unifi"
fi

# Only keep Z3 BT "stack" on UAP-BeaconHD
if ! grep -q "^systemid=ec25$" /proc/ubnthal/system.info; then
	rm -f /usr/sbin/Z3GatewayHost
fi

NOWIFI=`grep -c nowifi /proc/cmdline`
BRCM=`grep -c Broadcom /proc/cpuinfo`
AKR_MOD="/lib/wifi/qca-wifi-modules"
AKR_MOD_STAGING="/tmp/qca-wifi-modules"
WIFI_LOAD_DONE="/tmp/.wifi-config-done"

MGMT_BACKUP="/var/run/cfg_backup"

# if not set in the env, default to unloading the driver
if [ -z "$AKR_QCA_RELOAD" ]; then
	AKR_QCA_RELOAD=1
fi

# Once wifi-load for QCA for gen6/7, we don't need to reload it.
[ -e ${WIFI_LOAD_DONE} ] && {
	AKR_QCA_RELOAD=0
}

if [ "${BRCM}" != "1" ]; then
	KMODS="10-ar724x-eth 10-ar93xx-eth 10-atheros-eth"
	if [ "${NOWIFI}" != "1" -a ! -f /usr/etc/.nowifi ]; then
		TMP="${KMODS}"
		KMODS="${TMP} 50-ar93xx-ath 50-ubnt-poll 55-ath-11n 33-qca-wifi"
	fi
else
	KMODS="20-brcmsdk-et"
	NOCTF=`nvram get ctf_disable`
	NVRAM_RO=`grep -c nvram_ro /proc/cmdline`
	if [ "${NOCTF}" != "1" ]; then
		TMP="${KMODS}"
		KMODS="10-brcmsdk-ctf ${TMP}"
		if [ "${NVRAM_RO}" == "1" ]; then
			plugins="system syslog users resolv iptables ebtables \
				unifi_block net connectivity route udhcpc sshd ntpclient qos redirector"
		fi
	fi
	if [ "${NOWIFI}" != "1" -a ! -f /usr/etc/.nowifi ]; then
		TMP="${KMODS}"
		KMODS="${TMP} 10-brcmsdk-proxyarp 11-brcmsdk-emf 50-brcmsdk-wl"
	fi
fi

check_modules() {
	if [ "${BRCM}" != "1" ]; then
		KMODS="10-ar724x-eth 10-ar93xx-eth 10-atheros-eth"
		if [ "${NOWIFI}" != "1" -a ! -f /usr/etc/.nowifi ]; then
			TMP="${KMODS}"
			KMODS="${TMP} 50-ar93xx-ath 50-ubnt-poll 55-ath-11n 33-qca-wifi"
		fi
	else
		KMODS="20-brcmsdk-et"
		NOCTF=`nvram get ctf_disable`
		if [ "${NOCTF}" != "1" ]; then
			TMP="${KMODS}"
			KMODS="10-brcmsdk-ctf ${TMP}"
		fi
		if [ "${NOWIFI}" != "1" -a ! -f /usr/etc/.nowifi ]; then
			TMP="${KMODS}"
			KMODS="${TMP} 10-brcmsdk-proxyarp 11-brcmsdk-emf 50-brcmsdk-wl"
		fi
	fi
}

start() {
	# assumes a good starting point (module unloaded, processes stopped)

	# update running config
	if [ -z "$cfg_file" ]; then
		sanitize_cfg /tmp/system.cfg
		cp -f /tmp/system.cfg /tmp/running.cfg || true
	else
		sanitize_cfg /tmp/$cfg_file
		cp -f /tmp/$cfg_file /tmp/running.cfg || true
	fi

	# populate /etc/inittab, /etc/sysinit, ...
	cp /usr/etc/inittab /etc
	rm -rf /etc/sysinit /var/run/ipold.*
	mkdir -p /etc/sysinit
	# just make sure nvram is ready for nvram_set
	#if [ "${BRCM}" == "1" ]; then
	#    while [ ! -e /dev/nvram ]
	#    do
	#    echo "waiting for nvram device to be ready"
	#    sleep 1
	#done
	#fi

	[ ! -f /etc/module_para.conf ] || rm  /etc/module_para.conf

	if [ -e /sbin/ubntconf ]; then
		if [ -z "$cfg_file" ]; then
			/sbin/ubntconf
		else
			/sbin/ubntconf -c /tmp/$cfg_file
		fi
	fi

	# setup certificates and ssh keys
	. /usr/etc/rc.d/rc.identity

	# SPF4 provision performance boost - do not unload driver unless nessesary.
	# when the last VAP is destroyed, the driver will re-load the offload fw for us
	if [ -e ${AKR_MOD} -a ! -f /usr/etc/no-wifi ]; then
		if [ -f ${AKR_MOD_STAGING} -o ${AKR_QCA_RELOAD} -eq 1 ]; then
			/usr/etc/rc.d/rc.modules wifi-unload
		fi
	fi

	sleep 1
	check_modules
	# load kernel modules
	for MOD in $(for i in ${KMODS}; do echo $i; done | sort); do
		[ -f /usr/etc/modules.d/${MOD} ] && /usr/etc/rc.d/rc.modules load ${MOD}
	done

	# SPF4: load our wifi driver
	if [ ! -e ${WIFI_LOAD_DONE} ]; then
		if [ -e ${AKR_MOD} -o ${AKR_QCA_RELOAD} -eq 1 ]; then
				/usr/etc/rc.d/rc.modules wifi-load
		fi
	fi
	sleep 1
	if [ -e /sbin/ubntconf ]; then
		/sbin/ubntconf -b
	fi

	[ ! -e ${AKR_MOD} ] && sleep 1

	# start plugins in the order specified
	for i in $plugins ; do
		run_plugin $i start
	done

	if [ "${BRCM}" == "1" ]; then
		if [ "${NVRAM_RO}" == "1" ]; then
			. /usr/etc/brcm_nvram_apply.sh
		fi
		#run_plugin bridge start
		#sleep 5
		# In case there is already assoc sta, force them to reassoc
		wl -i eth1 kick_allsta
		wl -i eth2 kick_allsta
	fi

	# run custom post config platform script if available
	if [ -e "/usr/etc/rc.postconf" ]; then
		. /usr/etc/rc.postconf
	fi

	# done.
	bgnd -r garp -- /sbin/garp -s 2 &
	# NOTE: we didn't set the LED here. instead, we rely on the management agent (mcad)
	# to call syswrapper.sh:set-ready

	# Information needed to check and update Sierra Firmware
	if [ -e "/etc/ltecfg/modem_init.sh" ]; then
		# This script might cause U-LTE to reboot if components are upgraded
		/etc/ltecfg/modem_init.sh
	fi

	# bleconnd and blebrd should be launched after adoption
	/etc/init.d/bleconn start &
	/etc/init.d/blebr start &
	/etc/init.d/blebr2 start &

	if [ ! -e /etc/persistent/cfg/mgmt ]; then
		if [ -e $MGMT_BACKUP ]; then
			mkdir -p /etc/persistent/cfg/
			cp $MGMT_BACKUP /etc/persistent/cfg/mgmt
			touch /etc/persistent/cfg_recovered
		fi
	fi
	# make new /etc/inittab takes effect
	init -q
}

# for inittab:shutdown. we want to do stuff that's absolutely necessary
ministop() {
	# this will send out DISASSOC to all clients
	if [ "${BRCM}" != "1" ]; then
	        for i in $(ls -d /sys/class/net/wifi*); do
			iwpriv `basename $i` disassoc_all 1 &
		done
	else
		wl -i eth1 down &
		wl -i eth2 down &
	fi
	# wait a little bit (e.g. for the DISASSOC to go out)
	sleep 1
}

stop() {
	cp /etc/persistent/cfg/mgmt $MGMT_BACKUP
	cat /proc/uptime | cut -d ' ' -f 1 | cut -d '.' -f 1 > /var/run/rc.stopping
	# make sure inittab is not in our way (use default/minimum inittab)
	set -x
	cp /usr/etc/inittab /etc
	init -q

	if grep -q "true" /proc/ubnthal/status/IsLte; then
		if [ "$is_restarting" = false ] ; then
			# We'll assume for now that if we're stopping without a restart, we're powering off or rebooting
			kill `pidof displayProvision.sh`
			# Check if we're doing a fw update
			if [ -e /var/run/download_firmware.finished ]; then
				sh /etc/ltecfg/lteUpgradeProgress.sh &
			else
				#echo "%o2%c%x5%y20;Rebooting...%f" > /dev/oledchar
				echo "%l8%s2%f" > /dev/oledchar
			fi
		fi
	fi

	#
	# Unload ubnt-roam
	#

	lsmod | grep -q ubnt_roam
	if [ $? -eq 0 ]; then
		sleep 1
		rmmod ubnt_roam
		sleep 1
	fi

	tostop=""
	for i in $plugins ; do tostop="$i $tostop" ; done
	for i in $tostop ; do
		run_plugin $i stop
	done

	# down the interfaces
	for i in $(ls -d /sys/class/net/wifi*); do
		ifconfig `basename $i` down
	done
	ifconfig eth0 down

	check_modules

	for MOD in $(for i in ${KMODS}; do echo $i; done | sort -r); do
		[ -f /usr/etc/modules.d/${MOD} ] && {
			/usr/etc/rc.d/rc.modules unload ${MOD}
			[ ! -e ${AKR_MOD} ] && sleep 1
		}
	done

	rm -f /var/run/rc.stopping
	# this would cause the LED to stay unlit for a few alarming seconds
	# as this usually happens during apply-config, keeping it green is better
	#echo 0 > /proc/gpio/led_status
}

case $cmd in
	start)
		is_restarting=false
		start
		;;
	stop)
		is_restarting=false
		stop
		;;
	ministop)
		is_restarting=false
		ministop
		;;
	unload)
		is_restarting=false
		stop

		if [ -e ${AKR_MOD} ]; then
			/usr/etc/rc.d/rc.modules wifi-unload
		fi

		;;
	restart)
		is_restarting=true
		stop
		start
		;;
esac
