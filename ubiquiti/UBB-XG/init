#!/bin/sh
#

echo "[INFO] Initialize system"

PSTORE_DIR="/sys/fs/pstore"
EMERG_FILE="/etc/persistent/emerg"

# crucial mountpoints
mount -t proc none /proc
mount -t sysfs none /sys

if [ -d /sys/kernel/debug ]; then
	mount -t debugfs none /sys/kernel/debug
fi

mount -n tmpfs /var -t tmpfs -o size=81788928

if [ -d ${PSTORE_DIR} ]; then
	mount -t pstore none ${PSTORE_DIR}
fi

mkdir /dev/pts /dev/shm

mknod /dev/gpio c 127 0
mknod -m 666 /dev/sflash c 200 0


# rest of the mounts
mount none /dev/pts -t devpts
if [ -e /proc/bus/usb ]; then
	mount none /proc/bus/usb -t usbfs
fi
echo "[INFO] Mount filesystem - Done!"

mkdir -p /var/run /var/tmp /var/log /var/etc /var/etc/persistent/cfg /var/lock
echo "[INFO] Filesystem init - Done!"

/usr/bin/uentfeeder

# print firmware revision
[ -f /usr/lib/ubnt-hash ] && echo "Revision: " $(cat /usr/lib/ubnt-hash) > /dev/kmsg

# insert gpl gpio-proxy module
[ ! -f /lib/modules/*/ubnt-gpio-proxy.ko ] || insmod /lib/modules/*/ubnt-gpio-proxy.ko

# inset gpl ubnt-mtddev-access module
[ ! -f /lib/modules/*/ubnt-mtddev-access.ko ] || insmod /lib/modules/*/ubnt-mtddev-access.ko

# insert hal module
[ ! -f /lib/modules/*/ubnthal.ko ] || insmod /lib/modules/*/ubnthal.ko

# insert retimer driver
[ ! -f /lib/modules/*/ds125df111.ko ] || insmod /lib/modules/*/ds125df111.ko

# insert sfpinfo module
[ ! -f /lib/modules/*/ubnt_sfpinfo.ko ] || insmod /lib/modules/*/ubnt_sfpinfo.ko

# insert sfp gearbox module
[ ! -f /lib/modules/*/ubnt-sfp-gearbox.ko ] || insmod /lib/modules/*/ubnt-sfp-gearbox.ko

# insert PCA9575 driver
[ ! -f /lib/modules/*/pca9575.ko ] || insmod /lib/modules/*/pca9575.ko

# blink boot patern
# load LED ring driver
insmod i2c-core
insmod i2cexp
insmod ledbar
echo 1 25 0 7 > /proc/ubnt_ledbar/mode

# making sure that critical files are in place
mkdir -p /etc/rc.d /etc/init.d

# forced update
for f in inittab rc.d/rc.sysinit rc.d/rc rc.d/rc.stop; do
        cp -f -r /usr/etc/$f /etc/$f
done

if [ -e /usr/etc/sensors.conf ]; then
	cp -f /usr/etc/sensors.conf /etc
fi

echo "[INFO] Copy system files - Done!"

mkdir -p /etc/udhcpc
# do not update if exist
for f in passwd group login.defs profile hosts host.conf \
fstab udhcpc/udhcpc startup.list; do
    if [ -e /etc/$f ]; then
		echo -n '.'
    else
        cp -f /usr/etc/$f /etc/$f
    fi
done
echo "[INFO] Update startup list - Done!"

mkdir -p /etc/sysinit
# make symlinks if do not exist
for f in services protocols shells mime.types ethertypes modules.d ssl; do
    if [ -e /etc/$f ]; then
		echo -n '.'
    else
        ln -s /usr/etc/$f /etc/$f
	fi
done

ln -s /usr/etc/ssl /etc/ssl

echo "[INFO] Create symlinks - Done!"

#############

board_bom=`cat /proc/ubnthal/board.info | grep board.bom`
board_bom_id=`echo $board_bom | awk -F '-' '{print $2}'`
board_bom_id_rev=`echo $board_bom | awk -F '-' '{print $3}'`
ard_bom_id_rev_control=1000

# ram persti support is since 00958-18 rev
if [ "$board_bom_id" = "00958" ]; then
	board_bom_id_rev_control=18
else
	echo "Unknown board "$board_bom
fi

if [ $board_bom_id_rev -ge $board_bom_id_rev_control ]; then
bl2_check=`hexdump -C -s280 -n10 /dev/mtd2 | awk '{print $2$3$4$5$6$7}'`

# we need to be sure that installed bootloader is supports persti functionality
# proper version of the NOR image doesn't contain BL2 and BL3 images
if [ "$bl2_check" = "000000000000" ]; then
	echo "Loading DDR persistent support module"
	[ ! -f /lib/modules/*/ubnt-layerscape-persti-supp.ko ] || insmod /lib/modules/*/ubnt-layerscape-persti-supp.ko

	echo out > /proc/pca9575/gpio-EGPO_MEM_RSTn_B/direction
	echo 1 > /proc/pca9575/gpio-EGPO_MEM_RSTn_B/output

	echo 1 > /proc/ls-ddr-persti/enabled

	echo "Please, don't touch me" > /var/run/persti.ok
fi
fi

CFG_SYSTEM="/tmp/system.cfg"
CFG_RUNNING="/tmp/running.cfg"
CFG_DEFAULT="/etc/default.cfg"

# Starting watchdog manager
if [ -e /dev/watchdog -a -x /bin/watchdog ]; then
    /bin/watchdog -t 1 -T 30 /dev/watchdog
fi;

# only symlink to default config (needed for cfgmtd)
if [ -e /sbin/ubntconf ]; then
	/sbin/ubntconf -l $CFG_DEFAULT
	echo "ubntconf returned $?" >> /tmp/ubntconf.log
fi

# System configuration
mkdir -p /etc/sysinit/
/sbin/cfgmtd -r -p /etc/ -f $CFG_RUNNING
if [ $? -ne 0 ]; then
	/sbin/cfgmtd -r -p /etc/ -t 2 -f $CFG_RUNNING
	if [ $? -ne 0 ]; then
		cp $CFG_DEFAULT $CFG_RUNNING
	fi
fi
sort $CFG_RUNNING | tr -d "\r" > $CFG_SYSTEM
cp $CFG_SYSTEM $CFG_RUNNING

# If watchdog is to be disabled, stop it and prevent auto-restart by removing 
# the device node.  Other restart code will only start if /dev/watchdog is found 
# and /bin/watchdog is executable, so removing the node will keep it off.
if [ -f /etc/persistent/disable_watchdog ]; then
    killall watchdog
    rm -f /dev/watchdog
fi;
#kick ubnthal to update board files
CC=`sed -n -e '/radio.1.countrycode=/s/.*\= *//p' $CFG_SYSTEM`
echo $CC > /proc/ubnthal/halupdate

# board data symlinks, init + default config
if [ -e /sbin/ubntconf ]; then
	/sbin/ubntconf -i $CFG_DEFAULT
	echo "ubntconf returned $?" >> /tmp/ubntconf.log
fi

echo "Version: $(cat /lib/version)" >/dev/pmsg0

# But for DFS testing, it's useful to be able to overide this
if [ -f /etc/persistent/enable_printk ]; then
    echo 9 > /proc/sys/kernel/printk
    dmesg -c
else
    # Do not clutter serial port, normally
    echo 1 > /proc/sys/kernel/printk
fi;

echo 3 > /proc/sys/kernel/panic_on_oops

# Set device date to firmware build date
BDATE=202403221543
if [ ! -z $BDATE ]; then
	date -s $BDATE >/dev/null 2>&1
fi

mkdir -p "$BOOT_REASON_DIR"

if ls "$PSTORE_DIR/dmesg-ramoops-"* > /dev/null 2>&1; then
	for f in "$PSTORE_DIR/dmesg-ramoops-"*; do
        if grep -Fq -m 1 "Kernel panic - not syncing: Watchdog timeout!" "$f"; then
            touch "$BOOT_REASON_DIR/watchdog_reboot"
            cat "$PSTORE_DIR/dmesg-ramoops-"* > "$BOOT_REASON_DIR/watchdog_reboot"
            break
        elif grep -Fq -m 1 "Kernel panic - not syncing:" "$f"; then
            touch "$BOOT_REASON_DIR/kernel_crash"
            cat "$PSTORE_DIR/dmesg-ramoops-"* > "$BOOT_REASON_DIR/kernel_crash"
            break
        elif grep -Fq -m 1 "reboot: Restarting system" "$f"; then
            touch "$BOOT_REASON_DIR/normal"
            break
        fi
    done

    rm -rf "$PSTORE_DIR/"*
elif [ -e "$EMERG_FILE" ]; then
    cp "$EMERG_FILE" "$BOOT_REASON_DIR/emergency"
else
    touch "$BOOT_REASON_DIR/normal"
fi

# create empty crash_data directory
mkdir -p /tmp/crash_data

# Run malware removal tool
if [ -e /sbin/uav ]; then
	/sbin/uav > /tmp/uav.log
fi

# Run configuration parser
if [ -e /sbin/ubntconf ]; then
	/sbin/ubntconf
	echo "ubntconf returned $?" >> /tmp/ubntconf.log
fi

# Core dumps.
ulimit -c unlimited
echo '|/sbin/coredump %e %p %s' > /proc/sys/kernel/core_pattern

echo "...running /sbin/init"
exec /sbin/init

echo "INTERNAL ERROR!!! Can't run /sbin/init."
