#!/bin/sh

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

RESOLV_CONF="/etc/resolv.conf"
DHCPC_FALLBACK="/etc/dhcpc.fallback"
SERVICES_FILE="/etc/udhcpc_services"
UDHCPC_CONFDIR="/etc/udhcpc"
UDHCPC_CONF="$UDHCPC_CONFDIR/info.$interface"
ROUTE_PLUGIN="/etc/sysinit/route.conf"

udhcpc_write_config()
{
	# store settings to UDHCPC_CONF
	mkdir -p $UDHCPC_CONFDIR
	cat > $UDHCPC_CONF << END
u_interface="$interface"
u_broadcast="$broadcast"
u_subnet="$subnet"
u_ip="$ip"
u_router="$router"
u_dns="$dns"
u_hostname="$hostname"
u_serverid="$serverid"
u_domain="$domain"
u_leasetime=$lease
u_timestamp="`date +%s`"
u_started=`sed 's/\([0-9]*\).*/\1/;' /proc/uptime`
u_pid=$PPID
END
}

udhcpc_compare_config()
{
	if [ ! -f $UDHCPC_CONF ]; then 
		return 1;
	fi

	. $UDHCPC_CONF

	if [ ".$u_interface" != ".$interface" ]; then return 1; fi
	if [ ".$u_broadcast" != ".$broadcast" ]; then return 1; fi
	if [ ".$u_subnet" != ".$subnet" ]; then return 1; fi
	if [ ".$u_ip" != ".$ip" ]; then return 1; fi
	if [ ".$u_router" != ".$router" ]; then return 1; fi
	if [ ".$u_domain" != ".$domain" ]; then return 1; fi
	if [ ".$u_dns" != ".$dns" ]; then return 1; fi

	return 0;
}

udhcpc_remove_config()
{
	rm -f $UDHCPC_CONF
}

get_net()
{
	local i1 i2 i3 i4
	local m1 m2 m3 m4
	IFS=. read -r i1 i2 i3 i4 <<- EOF
	$1
	EOF
	IFS=. read -r m1 m2 m3 m4 <<- EOF
	$2
	EOF

	echo "$(($i1 & $m1)).$(($i2 & $m2)).$(($i3 & $m3)).$(($i4 & $m4))"
}

configure_routes()
{
	if [ -n "$router" ] ; then
		[ -f $UDHCPC_CONF ] && . $UDHCPC_CONF
		echo "deleting old routers"
		for i in $u_router ; do
			route del default gw $i dev $interface
			route del -host $i dev $interface
		done

		for i in $router ; do
			route add default gw $i dev $interface
			if [ ! $? -eq 0 ]; then
				route add -host $i dev $interface
				route add default gw $i dev $interface
			fi
		done
	fi
	if grep -q "route" "$SERVICES_FILE"; then
		# apply routes which depend on configured address
		local net=$(get_net "$ip" "$subnet")
		grep "add.*gw" "$ROUTE_PLUGIN" | grep -v log_err | while read -r route; do
			local route_net=$(get_net "$(echo $route | sed -n -e 's/^.* gw //p')" "$subnet")
			if [ "$net" == "$route_net" ]; then
				eval "$route"
			fi
		done
	fi
}

configure_dns()
{
	# do not remove resolv.conf if no dns servers received from dhcp
	if [ ".$dns" = "." ]; then
		return 0
	fi
	old_resolv_conf=$RESOLV_CONF
	new_resolv_conf=$RESOLV_CONF.udhcpc-new
	grep -v "udhcpc" > $new_resolv_conf
	[ -n "$domain" ] && echo "search $domain # udhcpc" >> $new_resolv_conf
	for i in $dns ; do
		echo adding dns $i
		echo "nameserver $i # udhcpc" >> $new_resolv_conf
	done
	mv -f $new_resolv_conf $old_resolv_conf
}

udhcpc_start_services()
{
	if [ ! -f $SERVICES_FILE ]; then 
		echo "File $SERVICES_FILE does not exist"
		return;
	fi

	for serv in `cat $SERVICES_FILE`; do
		# do not touch static routes and ips, dynamic one is added on bound event
		if [ "$serv" != "route" -a "$serv" != "netconf" ] ; then
			/usr/etc/init.d/plugin start $serv
		fi
	done
}

udhcpc_stop_services()
{
	if [ -f $SERVICES_FILE ]; then 
		rev_servlist=""
		for serv in `cat $SERVICES_FILE`; do
			rev_servlist="$serv $rev_servlist"
		done

		for serv in $rev_servlist; do
			# do not touch static routes and ips
			if [ "$serv" != "route" -a "$serv" != "netconf" ] ; then
				/usr/etc/init.d/plugin stop $serv
			fi
		done
	else
		echo "File $SERVICES_FILE does not exist"
	fi
	if [ -f $UDHCPC_CONF ]; then
		. $UDHCPC_CONF
		/sbin/ip addr del $u_ip/$u_subnet dev $interface
		for i in $u_router ; do
			route del default gw $i dev $interface
			route del -host $i dev $interface
		done
	fi
}

configure_ipaddress()
{
	/sbin/ip addr del $(grep "${interface} " ${DHCPC_FALLBACK})
	/sbin/ip addr add $ip/$subnet $BROADCAST dev $interface
}

udhcpc_internet_state() {
	return 0
}

if [ -n "$broadcast" ]; then
	BROADCAST="brd $broadcast"
else
	BROADCAST="brd +"
fi

case "$1" in
	deconfig)
		udhcpc_stop_services
		udhcpc_remove_config
		udhcpc_start_services
		udhcpc_internet_state 0
		rm /var/run/ipready.$interface
		;;

	leasefail)
		udhcpc_stop_services
		udhcpc_remove_config
		/sbin/ip addr add $(grep "${interface} " ${DHCPC_FALLBACK})
		IDX=$(awk -F. '/dhcpc.*.devname=br0/ {print $2}' /tmp/running.cfg)
		F_IP=$(awk -F= '/dhcpc.'$IDX'.fallback=/i {print $2}' /tmp/running.cfg)
		[ -z ${F_IP} ] && F_IP=${DHCPC_FALLBACK}
		udhcpc_start_services
		udhcpc_internet_state 0
		/usr/bin/syswrapper.sh ip-changed $interface $F_IP
		/usr/bin/syswrapper.sh start-beaconing
		;;

	bound)
		udhcpc_stop_services
		configure_ipaddress
		configure_routes
		configure_dns
		udhcpc_start_services
		udhcpc_write_config
		udhcpc_internet_state 1
		/usr/bin/syswrapper.sh ip-changed $interface $ip
		/usr/bin/syswrapper.sh detect-uplink
		/usr/bin/syswrapper.sh start-beaconing
		;;

	renew)
		if ! udhcpc_compare_config; then
			udhcpc_stop_services
			configure_ipaddress
			configure_routes
			configure_dns
			udhcpc_start_services
			/usr/bin/syswrapper.sh ip-changed $interface $ip
			/usr/bin/syswrapper.sh detect-uplink
			/usr/bin/syswrapper.sh start-beaconing
		fi
		udhcpc_write_config
		udhcpc_internet_state 1
		;;
esac

exit 0
