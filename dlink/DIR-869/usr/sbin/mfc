#!/bin/sh
case "$1" in
save)
	/etc/scripts/dbsave.sh
	;;
freset)
	devconf del
	;;
isfreset)
	SIZE=`devconf dump | scut -p "Data size :" -f 1`
	if [ "$SIZE" = "0" ]; then
		echo "YES"
	else
		echo "NO"
	fi
	;;
init)
	args=$#
	if [ $args -ne 11 ] && [ $args -ne 12 ]; then
		echo "Usage:"
		echo "  mfc init <lanmac> <wlan5mac> <wanmac> <countrycode> <hw version> <deviceip> <pin> <wifipassword> <ssid2g> <ssid5g> {<turbomode>}"
		exit 1
	fi
	LANMAC=`echo -e $2 | tr [A-Z] [a-z]`
	WLAN24MAC=$LANMAC
#	WLAN24MAC=`echo -e $3 | tr [A-Z] [a-z]`
	WLAN5MAC=`echo -e $3 | tr [A-Z] [a-z]`
	WANMAC=`echo -e $4 | tr [A-Z] [a-z]`
	CCODE="$5"
	HWVER="$6"
	IP="$7"
	PIN="$8"
	WIFIPWD="$9"
	SSID2G="${10}"
	SSID5G="${11}"
	
	MFC_MODE=`devdata get -e mfcmode`
	
	if [ $args -eq 12 ]; then
		TURBOMODE="${12}"
	fi

	[ "$LANMAC" != "" ] && DEVDATA="$DEVDATA -e lanmac=$LANMAC -e wlan24mac=$WLAN24MAC -e wlan5mac=$WLAN5MAC"
	[ "$WANMAC" != "" ] && DEVDATA="$DEVDATA -e wanmac=$WANMAC"
	[ "$CCODE" = "" ] && CCODE="US"
	[ "$HWVER" != "" ] && DEVDATA="$DEVDATA -e hwver=$HWVER"
	[ "$PIN" != "" ] && DEVDATA="$DEVDATA -e pin=$PIN"
	[ "$WIFIPWD" != "" ] && DEVDATA="$DEVDATA -e psk=$WIFIPWD"
	[ "$SSID2G" != "" ] && DEVDATA="$DEVDATA -e wifissid_2g=$SSID2G"
	[ "$SSID5G" != "" ] && DEVDATA="$DEVDATA -e wifissid_5g=$SSID5G"
	[ "$TURBOMODE" != "" ] && DEVDATA="$DEVDATA -e turbomode=$TURBOMODE"
			
	# Write back mfc mode state
	[ "$MFC_MODE" == "1" ] && DEVDATA="$DEVDATA -e mfcmode=1"
	
	echo "clean devdata"
	devdata clean
	echo "devdata set -e countrycode=$CCODE $DEVDATA -f" > /dev/console
	devdata set -e countrycode=$CCODE $DEVDATA -f
	
	# Set MAC Address and IP Address into u-boot config.
	[ "$LANMAC" != "" ] && UBCFG="$UBCFG ethaddr=$LANMAC"
	[ "$IP" != "" ] && UBCFG="$UBCFG ipaddr=$IP"
	echo "ubcfg set $UBCFG" > /dev/console
	ubcfg set $UBCFG
	# Show devdata and uboot data
	echo "-------- devdata dump ----------------------" > /var/mfcdump
	devdata dump >> /var/mfcdump
	echo "-------- ubcfg get ethaddr ipaddr-----------" > /var/mfcdump
	ubcfg get ethaddr ipaddr > /var/mfcdump
	echo "--------------------------------------------" > /var/mfcdump
	cat /var/mfcdump
	rm /var/mfcdump

	;;
dump)
	# Show devdata
	echo "-------- Firmware Version-------------------" > /var/mfcdump
	echo FW_Ver=`cat /etc/config/buildver``cat /etc/config/buildrev` Build `cat /etc/config/buildno` >> /var/mfcdump
	echo "-------- devdata dump ----------------------" >> /var/mfcdump
	devdata dump >> /var/mfcdump
	echo "-------- ubcfg get ethaddr ipaddr-----------" >> /var/mfcdump
	cat /var/mfcdump
	rm /var/mfcdump
	;;
wlan24)
	xmldbc -s /wifi/entry:1/ssid "$2"
	xmldbc -s /phyinf:4/media/channel "$3"
	xmldbc -s /phyinf:4/media/dot11n/bw2040coexist "0"
	xmldbc -s /wifi/entry:1/authtype "OPEN"
	xmldbc -s /wifi/entry:1/encrtype "NONE"
	service PHYINF.WIFI restart
	;;
wlan5)
	xmldbc -s /wifi/entry:3/ssid "$2"
	xmldbc -s /phyinf:6/media/channel "$3"
	xmldbc -s /wifi/entry:3/authtype "OPEN"
	xmldbc -s /wifi/entry:3/encrtype "NONE"
	service PHYINF.WIFI restart
	;;
ver)
	echo Ver `cat /etc/config/buildver``cat /etc/config/buildrev` Build `cat /etc/config/buildno`
	;;
get)
	case $2 in
	hwver)
		if [ -f /etc/config/hwver ]; then
			cat /etc/config/hwver
		else
			devdata get -e $2
		fi
		;;
	*)
		[ "$2" != "" ] && devdata get -e $2
		;;
	esac
	;; 
set)
	[ "$2" != "" ] && devdata set -e $2
	;;
test)
	case $2 in
	on)
		usockc /var/gpio_ctrl DEBUG
		;;
	off)
		usockc /var/gpio_ctrl NODEBUG
		;;
	esac
	;; 
button)
	case $2 in
	reset)
		usockc /var/gpio_ctrl GPIO_FRESET
		cat /var/gpio_ctrl_result
		;;
	wps)
		usockc /var/gpio_ctrl GPIO_WPSPBC
		cat /var/gpio_ctrl_result
		;;
	esac
	;;
led)
	case "$2" in
	status_green)
		usockc /var/gpio_ctrl STATUS_GREEN
		;;
	status_amber)
		usockc /var/gpio_ctrl STATUS_AMBER
		;;
	status_off)
		usockc /var/gpio_ctrl STATUS_OFF
		;;
	wps_on)
		usockc /var/gpio_ctrl STATUS_GREEN_BLINK
		;;
	wps_off)
		usockc /var/gpio_ctrl STATUS_GREEN
		;;
	esac
	;;
usb)
	test -e /sys/bus/usb/devices/1-1 && echo "Yes" || echo "No"
	;;
mode)
	case $2 in
	on)
		devdata set -e mfcmode=1
		echo "Enable mfc mode!"
		;;
	off)
		devdata set -e mfcmode=0
		echo "Disable mfc mode!"		
		;;
	state)
		MFCST=`devdata get -e mfcmode`
		if [ "$MFCST" == "1" ]; then
			echo "on"
		else
			echo "off"
		fi		
		;;		
	esac
	;;
turbomode)
	case $2 in
	on)
		devdata set -e turbomode=1
		echo "Enable turbomode!"
		;;
	off)
		devdata set -e turbomode=0
		echo "Disable turbomode!"
		;;
	state)
		TURBO=`devdata get -e turbomode`
		if [ "$TURBO" == "1" ]; then
			echo "on"
		else
			echo "off"
		fi		
		;;		
	esac
	;;
stop_boot)
	case $2 in
	on)
		flash set wlan0 HW_11N_RESERVED10 1
		echo "Enable stop booting!"
		;;
	off)
		flash set wlan0 HW_11N_RESERVED10 0
		echo "Disable stop booting!"		
		;;
	state)
		STATE=`flash get wlan0 HW_11N_RESERVED10 | scut -p "HW_11N_RESERVED10=" -f 1`
		if [ "$STATE" == "1" ]; then
			echo "on"
		else
			echo "off"
		fi		
		;;		
	esac
	;;
802.3)
	echo "interface=$2, port=$3, mode=$4"
	case "$4" in
	mode1)
	echo "Test mode 1: Transmit waveform test"
		ethreg -i $2 0x10=0x20241320
		ethreg -i $2 -p $3 0x1d=0xb
		ethreg -i $2 -p $3 0x1e=0x3c45
		ethreg -i $2 -p $3 0x00=0x8140
		ethreg -i $2 -p $3 0x09=0x2200
		;;
	mode2)
	echo "Test mode 2: Transmit jitter test(MASTER mode)"
		ethreg -i $2 0x10=0x20241320
		ethreg -i $2 -p $3 0x1d=0xb
		ethreg -i $2 -p $3 0x1e=0x3c45
		ethreg -i $2 -p $3 0x00=0x8140
		ethreg -i $2 -p $3 0x09=0x4200
		;;
	mode3)
		echo "Test mode 3: Transmit jitter test(SLAVE mode)"
		ethreg -i $2 0x10=0x20241320
		ethreg -i $2 -p $3 0x1d=0xb
		ethreg -i $2 -p $3 0x1e=0x3c45
		ethreg -i $2 -p $3 0x00=0x8140
		ethreg -i $2 -p $3 0x09=0x6200
		;;
	mode4)
		echo "Test mode 4: Transmit distortion test"
		ethreg -p $2 0x10=0x20241320
		ethreg -i $2 -p $3 0x1d=0xb
		ethreg -i $2 -p $3 0x1e=0x3c45
		ethreg -i $2 -p $3 0x00=0x8140
		ethreg -i $2 -p $3 0x09=0x8200
		;;
	 esac
	;;
art)
	case "$2" in
	start)
#		echo "stop wireless..."
#		service PHYINF.WIFI stop
#		sleep 30
		echo "start ART..."
		insmod /lib/modules/adf.ko
		insmod /lib/modules/asf.ko
		insmod /lib/modules/ath_hal.ko
		insmod /lib/modules/ath_rate_atheros.ko
		insmod /lib/modules/hst_tx99.ko
		insmod /lib/modules/ath_dfs.ko
		insmod /lib/modules/ath_dev.ko
		insmod /lib/modules/umac.ko testmode=1 ahbskip=1
		sleep 2
		insmod /lib/modules/ath_pktlog.ko
		insmod /lib/modules/art.ko
		cd /lib/
		export LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH
		nart.out -console -instance 0&
		nart.out -console -instance 1&
		;;
	stop)
		killall nart.out
		rmmod art.ko
                ;;
        esac
        ;;
get_channel)
	case "$2" in
	wlan24)
		iwlist ath0 channel|grep ' Channel'|sed 's/\(.*\)Channel \(.*\) : \(.*\)/\2/g ' |sed -r 's/0+([1-9])/\1/g' | sed ':a;N;$!ba;s#\n#,#g'		
		;;
	wlan5)
		iwlist ath2 channel|grep ' Channel'|sed 's/\(.*\)Channel \(.*\) : \(.*\)/\2/g ' |sed -r 's/0+([1-9])/\1/g' | sed ':a;N;$!ba;s#\n#,#g'
                ;;
        esac
        ;;
modeswitch)
		usockc /var/gpio_ctrl GPIO_SWITCH
		cat /var/gpio_ctrl_result
	;;
*)
	echo "Usage: mfc {command} <params>"
	echo "Commands:"
	echo "  init <lanmac> <wlan5mac> <wanmac> <countrycode> <hw version> <deviceip> <pin> <wifipassword> <ssid2g> <ssid5g> {<turbomode>}"
	echo "                           Init flash"
	echo "  save                     Save current setting to flash"
	echo ""
	echo "  dump                     Dump environment vairables."
	echo "  ver                      Show firmware version"
    echo "  wlan24 <ssid>  <channel> switch ssid  and channel"
	echo "  wlan5  <ssid2> <channel> switch ssid2 and channel"
	echo ""
	echo "  freset                   Factory reset"
	echo "  isfreset                 Check if the device is reset to factory default."
	echo ""
	echo "  test on                  turn on test mode"
	echo "  test off                 turn off test mode"
	echo ""
	echo "  button {reset|wps}"
	echo "      reset                Get factory reset button status."
	echo "      wps                  Get WPS button status."
	echo ""
	echo "  led { status_green | status_amber | status_off | wps_on | wps_off }"
	echo "      status_green         Set the status Led white"
	echo "      status_amber         Set the status Led orange"
	echo "      status_off           Set the status Led off"	
	echo "      wps_on               Set the WPS Led on"
	echo "      wps_off              Set the WPS Led off"
	echo ""	
	echo "  usb                      Show if usb port plug usb device"
	echo ""
	echo "  mode { on | off | state }"	
	echo "      on                  Turn on mfc mode"
	echo "      off                 Turn off mfc mode"	
	echo "      state               Check mfc mode state"
	echo ""			
	echo "  turbomode { on | off | state }"
	echo "      on                  turn on turbomode"
	echo "      off                 turn off turbomode"
	echo "      state               check turbomode state"
	echo ""	
	echo "  stop_boot { on | off | state }"
	echo "      on                  Enable stop booting"
	echo "      off                 Disable stop booting"	
	echo "      state               Check stop booting state"
	echo "  get_channel {wlan24|wlan5}                      Show channel list"
	echo "  modeswitch              get mode switch status."
	;;
esac
