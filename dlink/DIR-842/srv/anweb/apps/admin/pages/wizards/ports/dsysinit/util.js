"use strict";angular.module("app").service("PallocUtil",["cpe","funcs","device","cookie",function(cpe,funcs,device,cookie){function getLanPorts(){return data.lanPorts}function filterBridges(){return _.omit(getAvailableSources(),function(source){return"wan_tag"!=source.type})}function updateType(source,id){if("wan"==source.type&&source.vid)throw"Cannot create or update tagged NAT";if(!id||"wan"!=source.type)return source.vid?void(hasDefaultWanSource()&&source.vid&&(source.type="wan_tag")):void(source.type="wan")}function getAvailableSources(){return availableSources||updateAvailableSourcesList(),availableSources}function hasDefaultWanSource(){return!!getDefaultWanSourceId()}function getDefaultWanSourceId(){var defaultSource=_.find(_.pairs(getAvailableSources()),function(pair){return"wan"==pair[1].type&&!pair[1].vid});return defaultSource?defaultSource[0]:null}function updateAvailableSourcesList(){availableSources=_.reduce(data.sources,function(memo,source,index){return sourceMayBeGrouped(source)&&(memo[index]=source),memo},{})}function sourceMayBeGrouped(source){return"bridge"==source.type||"wan"==source.type||"wan_tag"==source.type}function wasModified(){return __initialData&&!funcs.deepEqual(data,__initialData)}var config,attrs,data,__initialData,availableSources,paths=["Device.Switch.","Device.Network.Interface.","Device.Network.Connection.","Device.WiFi.Radio.","Device.WiFi.APProfile."];paths.push("Device.Services.EasyMesh.Enable."),cookie.get("device_mode");var converter=device.portAllocation.converter,availableSources=null;return{pull:function(){function success(response){return config=funcs.buildTree(response[0].result.ParameterList),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),data=converter.config.dsysinitToNative(config),__initialData=funcs.deepClone(data),Promise.resolve()}return Promise.all([cpe.GetParameterValues(paths),cpe.GetParameterAttributes(paths)]).then(success)},push:function(){var diffLanPorts=funcs.newConfig.makeDiff(__initialData.lanPorts,data.lanPorts,attrs),currentConfig=converter.config.nativeToDsysinit(__initialData,void 0,!0),newConfig=converter.config.nativeToDsysinit(data,diffLanPorts,!1),diff=funcs.newConfig.makeDiff(currentConfig,newConfig,attrs);return _.isEmpty(diff)?Promise.resolve():cpe.ApplyDifference(diff)},removeSource:function(id){var source=data.sources[id];_.each(data.lanPorts,function(port){source&&port.bridge==source.__inst&&(port.bridge=null)}),delete data.sources[id],updateAvailableSourcesList()},addSource:function(source){updateType(source);var maxId=_.max(_.keys(data.sources))||-1,newId=Number(maxId)+1;data.sources[newId]=source;var internetPort=_.findWhere(data.wanPorts,{name:"internet"})||_.findWhere(data.wanPorts,{name:"port5"});return internetPort&&internetPort.bridge.push(newId),updateAvailableSourcesList(),source},updateSource:function(id,source){updateType(source,id),_.extend(data.sources[id],source),updateAvailableSourcesList()},updateType:updateType,getLanPorts:getLanPorts,getDefaultSourceId:function(){var wanSourceId=getDefaultWanSourceId();return _.isUndefined(wanSourceId)||_.isNull(wanSourceId)?null:wanSourceId},getDefaultWanSourceId:getDefaultWanSourceId,hasDefaultWanSource:hasDefaultWanSource,getAvailableSources:getAvailableSources,filterBridges:filterBridges,portInBridge:function(port){return port.bridge?!!filterBridges()[port.bridge]:!1},wasModified:wasModified,updateAvailableSourcesList:updateAvailableSourcesList}}]);