"use strict";!function(){angular.module("app").controllerProvider.register("SysTelnetCtrl",["$scope","$state","telnetUtil","snackbars","translate",function($scope,$state,util,snackbars,translate){function init(){function success(){services.data=util.getData(),backup=angular.copy(services.data)}function error(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}util.pull().then(success)["catch"](error)["finally"]($scope.$emit.bind($scope,"pageload"))}function apply(isChangeHTTP){function success(){snackbars.add("msg_apply_success"),init()}function error(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})}if(!$scope.telnetSettings.$invalid){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(services.data,isChangeHTTP).then(success)["catch"](error)["finally"](overlay.stop.bind(overlay,overlayId))}}var backup=null,services={data:null,apply:function(){var success=function(isBusy){isBusy?alert(translate("telnet_busy_port_msg")):apply(isChangeHTTP)},ports=[];services.data.Telnet.Enable&&ports.push({type:"Telnet",value:services.data.Telnet.Port,isChange:!backup.Telnet.Enable||services.data.Telnet.Port!=backup.Telnet.Port}),services.data.SSH.Enable&&ports.push({type:"SSH",value:services.data.SSH.Port,isChange:!backup.SSH.Enable||services.data.SSH.Port!=backup.SSH.Port});for(var uniqPorts=[],_i=0,_ports=ports;_i<_ports.length;_i++){var port=_ports[_i];if(uniqPorts.includes(port.value))return void alert(translate("telnet_busy_port_msg"));uniqPorts.push(port.value)}for(var changedPorts=[],_i2=0,_ports2=ports;_i2<_ports2.length;_i2++){var _port=_ports2[_i2];_port.isChange&&changedPorts.push(_port.value)}var isChangeHTTP=ports.find(function(p){return("HTTP"==p.type||"HTTPS"==p.type)&&p.isChange});util.isPortBusy(changedPorts).then(success)},wasModified:function(){return backup&&!_.isEqual(backup,services.data)}};$scope.services=services,init(),services.sshNav="telnet_ssh_nav",services.sshDesc="telnet_ssh_desc",services.sshClassName="block-left"}])}();