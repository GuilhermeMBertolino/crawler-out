"use strict";!function(){angular.module("app").service("telnetUtil",["$rootScope","cpe","funcs","oneWayRequest",function($rootScope,cpe,funcs,oneWayRequest){var telnetPath="Device.Services.Telnet.",sshPath="Device.Services.SSH.",configList=[];configList.push(telnetPath),configList.push(sshPath);var config=null,__initConfig=null;return{pull:function(){function success(response){return config=funcs.buildTree(response[0].result.ParameterList),__initConfig=angular.copy(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues(configList)]).then(success)},apply:function(input,isChangeHTTP){var data=funcs.deepClone(input),config={},ssh=null,web=null,telnet=null;_.has(data,"SSH")&&(ssh=funcs.deepClone(data.SSH),ssh.Enable||delete ssh.Port),_.has(data,"WEB")&&(web=funcs.deepClone(data.WEB),web.HTTPEnable||delete web.Port,web.HTTPSEnable||delete web.HTTPSPort),_.has(data,"Telnet")&&(telnet=funcs.deepClone(data.Telnet),telnet.Enable||delete telnet.Port),null!=telnet&&funcs.setValue(telnetPath.replace(/\.$/,""),telnet,config),null!=ssh&&funcs.setValue(sshPath.replace(/\.$/,""),ssh,config),null!=web&&funcs.setValue("Device.Services.Anweb.".replace(/\.$/,""),web,config);var changes=funcs.getChangesExpanded(__initConfig,config);if(_.isEmpty(changes))return Promise.resolve();var output=funcs.splitTree(changes),redirect=null;if(web){var url=new URL(location.href);if("http:"==url.protocol){var port=url.port?parseInt(url.port):80;port!=web.Port&&(url.port=web.Port,redirect=url.href)}else if("https:"==url.protocol){var _port=url.port?parseInt(url.port):443;_port!=web.HTTPSPort&&(url.port=web.HTTPSPort,redirect=url.href)}}return oneWayRequest({req:new Promise(function(_,reject){cpe.SetParameterValues(output)["catch"](function(res){res&&res.error&&reject()})}),minTime:3e3,maxTime:1e4})["finally"](function(){$rootScope.$emit("slacker.reload"),redirect&&isChangeHTTP&&(location.href=redirect)})},getData:function(){var data={};return data.Telnet=funcs.fetchBranch(config,telnetPath),data.SSH=funcs.fetchBranch(config,sshPath),data},isPortBusy:function(ports){function success(res){return res.result.ParameterList.some(function(param){return"Occupied"==param.Name&&param.Value})}var data=ports.map(function(port){return{Name:"Port",Value:port}});return cpe.Execute("Device.Network.CheckPortOccupied.",data).then(success)}}}])}();