"use strict";!function(){angular.module("app").service("utilSummaryYandexDns",["device","funcs","cpe","yandexDnsCommon",function(device,funcs,cpe,yDnsCommon){function convert(input){if(!input)return null;var ydns=funcs.splitTree(input[paths.ydns]),clients=funcs.splitTree(input[paths.clients]),dhcp=funcs.splitTree(input[paths.dhcp]),inputData=funcs.buildTree(ydns.concat(clients,dhcp));return config=converter.dsysinitToNative.rules(inputData),initConfig=funcs.deepClone(config),config}function getSettings(){return config?config.settings:{}}function getClients(){return config?config.clients:{}}function getRules(){return config?config.rules:{}}function setSettings(settings){config.settings=settings}function setRules(rules){config.rules=rules}var paths={ydns:"Device.Services.YandexDNS.",clients:"Device.Statistics.Neighbours.",dhcp:"Device.Network.Server.DHCP."},rpcList=Object.values(paths),converter=device.yandexDns.converter,config=null,initConfig=null;return{getAreas:function(){return rpcList.join("|")},convert:convert,getSettings:getSettings,getClients:getClients,getRules:getRules,pushSettings:function(data){var input=converter.nativeToDsysinit.settings(data);input=yDnsCommon.addDefIface(input);var init=converter.nativeToDsysinit.settings(initConfig.settings),diff=funcs.newConfig.makeDiff(init,input,{});return _.isEmpty(diff)?Promise.resolve():(initConfig=funcs.deepClone(config),cpe.ApplyDifference(diff))},pushRules:function(data){var inputData={__id:config.__id,rules:data},input=converter.nativeToDsysinit.rules(inputData),init=converter.nativeToDsysinit.rules(initConfig),diff=funcs.newConfig.makeDiff(init,input,{});return cpe.ApplyDifference(diff)},setSettings:setSettings,setRules:setRules}}])}();