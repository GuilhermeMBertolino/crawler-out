"use strict";!function(){angular.module("app").service("IPsecUtil",["cpe","device","funcs","devinfo","cookie","$injector",function(cpe,device,funcs,devinfo,cookie,$injector){function wasActivate(){return activate}function makeDiff(settings,existFwRuleInx){function splitDiff(diff,settings,existFwRuleInx){var diffs=funcs.deepClone(diff);return diffs=subnetDeleted(diffs),isFirewallMode||(diffs=createZone(diffs,settings),existFwRuleInx&&existFwRuleInx.length&&(diffs=fwRuleDeleted(diffs,existFwRuleInx))),diffs}function subnetDeleted(diff){var delSubnets={},input=funcs.deepClone(diff);return input.Device&&input.Device.Network&&_.each(input.Device.Network.Connection.IPsec,function(elem,key){_.each(elem.LeftSubnet,function(net,id){if(/-/.test(id)){var netPath=paths.ipsecConns+key+".LeftSubnet."+id;funcs.setValue(netPath,{},delSubnets),funcs.cutBranch(diff,netPath+".")}}),_.each(elem.RightSubnet,function(net,id){if(/-/.test(id)){var netPath=paths.ipsecConns+key+".RightSubnet."+id;funcs.setValue(netPath,{},delSubnets),funcs.cutBranch(diff,netPath+".")}})}),_.size(delSubnets)?[delSubnets].concat([diff]):diff}function createZone(diff,settings){var input=funcs.deepClone(_.isArray(diff)?diff[1]:diff),zones=funcs.fetchBranch(input,paths.fwZones),zonesIPv6=funcs.fetchBranch(input,paths.fwZonesIPv6),isIPv6=!1;if(_.each(settings,function(elem){_.isArray(elem)&&_.has(elem[0],"ipv6")&&(isIPv6=elem[0].ipv6)}),!isIPv6&&_.isEmpty(zones))return diff;if(isIPv6&&_.isEmpty(zonesIPv6))return diff;var isAdd=_.findKey(zones,function(elem,id){return-1!=id.indexOf("+")}),isAddIPv6=_.findKey(zonesIPv6,function(elem,id){return-1!=id.indexOf("+")});if(!isIPv6&&!isAdd)return diff;if(isIPv6&&!isAddIPv6)return diff;var ifaces=isIPv6?zonesIPv6[isAddIPv6].Interfaces:zones[isAdd].Interfaces,tunnels=_.has(input.Device,"Network")?funcs.fetchBranch(input,paths.network):void 0,services=_.has(input.Device,"Services")?funcs.fetchBranch(input,paths.services):void 0,rules=!isIPv6&&_.has(input.Device.Firewall.IPv4,"Rules")?funcs.fetchBranch(input,paths.firewall+"Rules."):_.has(input.Device.Firewall.IPv6,"Rules")?funcs.fetchBranch(input,paths.firewallIPv6+"Rules."):void 0,result={};return isIPv6||(funcs.setValue(paths.fwZones+(settings.firewall.ipv4.maxInstZone+1)+".Interfaces",ifaces,result),funcs.cutBranch(_.isArray(diff)?diff[1]:diff,paths.fwZones+isAdd+".Interfaces.")),isIPv6&&(funcs.setValue(paths.fwZonesIPv6+(settings.firewall.ipv6.maxInstZone+1)+".Interfaces",ifaces,result),funcs.cutBranch(_.isArray(diff)?diff[1]:diff,paths.fwZonesIPv6+isAddIPv6+".Interfaces.")),tunnels&&(funcs.setValue("Device.Network",tunnels,result),funcs.cutBranch(diff,paths.network)),services&&(funcs.setValue("Device.Services.IPsec",services,result),funcs.cutBranch(diff,"Device.Services.")),rules&&(isIPv6||(funcs.setValue(paths.firewall+"Rules",rules,result),funcs.cutBranch(diff,paths.firewall+"Rules.")),isIPv6&&(funcs.setValue(paths.firewallIPv6+"Rules",rules,result),funcs.cutBranch(diff,paths.firewallIPv6+"Rules."))),_.isArray(diff)?diff.concat(result):[diff].concat(result)}function fwRuleDeleted(diff,existFwRuleInx){var input=funcs.deepClone(diff),fw={};return _.each(existFwRuleInx,function(inx){var path="IPv6"==inx.type?paths.fwRulesIPv6:paths.fwRules;path=path+"-"+inx.inx,funcs.setValue(path,{},input)}),funcs.setValue("Device.Firewall",input.Device.Firewall,fw),funcs.cutBranch(diff,"Device.Firewall."),_.size(fw)?[fw].concat([diff]):diff}__initNativeData.firewallAutoConfig=settings.firewallAutoConfig;var data=converter.nativeToDsysinit(settings),oldData=converter.nativeToDsysinit(__initNativeData);if(isFirewallMode&&settings.firewallAutoConfig&&settings.tunnels.some(function(conn){return"tunnel"==conn.type&&!conn.__index})){var ipsecConns=funcs.fetchBranch(data,paths.ipsecConns),inst=Object.keys(ipsecConns).find(function(el){return el.match("new_ipsec")}),ipsecPath=paths.ipsecConns+inst+".";settings=firewallShared.firewallAutoConfig(data,ipsecPath,"IPv4",["Zones","Policy","RulesSupportProto"])}var diff=funcs.newConfig.makeDiff(oldData,data,attrs);return diff=splitDiff(diff,settings,existFwRuleInx)}function makeHelper(){return new device.ipsec.Helper(config,attrs,__initCpeData)}function checkUnique(parameterValue,index,type){if(""==parameterValue)return!0;var input=funcs.deepClone(config.tunnels);return index&&(input=input.filter(function(tunnel){return tunnel.__index!=index})),selector&&"Name"==type?(index&&delete selector[paths.ipsecConns+index+".Name"],Object.values(selector).every(function(name){return name!=parameterValue})):_.every(input,function(elem){switch(type){case"LeftID":return elem.left_id!=parameterValue;case"RightID":return elem.right_id!=parameterValue}})}function getFwRules(){return config&&config.firewall?{v4:{rules:fwRules,zoneId:config.firewall.ipv4.zoneId},v6:{rules:fwRulesIPv6,zoneId:config.firewall.ipv6.zoneId}}:{}}function getFirewallAutoConfigNote(type,scope){return firewallShared.getFirewallAutoConfigNote(type,scope)}var depsChecker,activate=!1,config=null,attrs=null,selector=null,__initCpeData=null,__initNativeData=null,fwRules=null,fwRulesIPv6=null,converter=device.ipsec.converter,deviceMode=cookie.get("device_mode"),isFirewallMode="Firewall"==deviceMode,firewallShared=null,paths={network:"Device.Network.",connsNameSelector:"Device.Network.Connection.{*}.{*}.Name",services:"Device.Services.IPsec.",devMode:"Device.DeviceInfo.DeviceMode",fwZones:"Device.Firewall.IPv4.Zones.",fwPolicy:"Device.Firewall.IPv4.Policy.",fwRules:"Device.Firewall.IPv4.Rules.",fwZonesIPv6:"Device.Firewall.IPv6.Zones.",fwPolicyIPv6:"Device.Firewall.IPv6.Policy.",fwRulesIPv6:"Device.Firewall.IPv6.Rules.",countryCode:"Device.DeviceInfo.CountryCode",usbConns:"Device.USB.Connection.",ipsecConns:"Device.Network.Connection.IPsec.",interfaces:"Device.Network.Connection.",group:"Device.Network.Group.",firewall:"Device.Firewall.IPv4.",firewallIPv6:"Device.Firewall.IPv6.",ipAddress:"Device.Network.IP."},requestPaths=[paths.network,paths.services,paths.devMode,paths.fwZones,paths.fwPolicy,paths.fwRules,paths.fwZonesIPv6,paths.fwPolicyIPv6,paths.fwRulesIPv6,paths.countryCode];return isFirewallMode&&(firewallShared=$injector.get("firewallShared")),{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return __initCpeData=funcs.deepClone(data),config=converter.dsysinitToNative(data),__initNativeData=funcs.deepClone(config),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),activate=!0,fwRules=funcs.fetchBranch(data,paths.fwRules),fwRulesIPv6=funcs.fetchBranch(data,paths.fwRulesIPv6),selector=response[2].result.Selected,Promise.resolve()}function error(response){var error=response&&response.error?response.error:{};return Promise.reject(error)}return Promise.all([cpe.GetParameterValues(requestPaths),cpe.GetParameterAttributes(requestPaths),cpe.Select(paths.connsNameSelector)]).then(success,error)},apply:function(settings,existFwRuleInx,depsToDel){function success(){return Promise.resolve()}function error(response){return Promise.reject(response.error?response.error:"unknown error")}var diffs=makeDiff(settings,existFwRuleInx);if(depsToDel){var depsDiff=depsChecker.getDepsDelDiff(depsToDel);Array.isArray(diffs)?diffs.unshift(depsDiff):diffs=[depsDiff].concat(diffs)}return Promise.all([cpe.ApplyDifference(diffs)]).then(success,error)},wasActivate:wasActivate,makeHelper:makeHelper,subscribeInfo:function(cb,$scope){function prepareData(response){if(response&&response[paths.ipsecConns]){var newIpsec=response[paths.ipsecConns];newIpsec=converter.dsysinitToNative(newIpsec);var helper=device.ipsec.Helper(newIpsec,attrs,__initCpeData),status=helper.getTunnelsStatus();cb&&cb(status)}}devinfo.subscribe(paths.ipsecConns,prepareData,$scope)},subscribeIface:function(cb,$scope){function prepareData(response){if(response&&response[paths.interfaces]&&response[paths.group]&&response[paths.ipAddress]){var conns=funcs.splitTree(response[paths.interfaces]),usbConns=response[paths.usbConns]?funcs.splitTree(response[paths.usbConns]):[],groups=funcs.splitTree(response[paths.group]),ip=funcs.splitTree(response[paths.ipAddress]),input=funcs.buildTree(conns.concat(groups,ip,usbConns)),data=converter.dsysinitToNative(input);if(!_.isEqual(__initNativeData.tunnels,data.tunnels)){var helper=device.ipsec.Helper(data,attrs,__initCpeData),tunnels=helper.getTunnels();cb&&cb(tunnels)}}}var subscribePath=paths.interfaces+"|"+paths.ipAddress+"|"+paths.group;devinfo.subscribe(subscribePath,prepareData,$scope)},checkUnique:checkUnique,unsubscribe:function(){var unsubscribePaths=paths.ipsecConns+"|"+paths.interfaces+"|"+paths.group;devinfo.unsubscribe(unsubscribePaths)},reconnect:function(items){function getLinks(items){return _.map(items,function(elem){return"Device.Network.Connection.IPsec."+elem.__id})}function setEnabled(links,status){return cpe.SetParameterValues(makeApplyValues(links,status))}function makeApplyValues(links,status){var output={};return _.each(links,function(link){funcs.setValue(link,{Status:status},output)}),funcs.splitTree(output)}_.isArray(items)||(items=[items]);var links=getLinks(items);return setEnabled(links,"Disabling").then(function(e){return setEnabled(links,"Enabling")})},getFwRules:getFwRules,checkLinksDeps:function(settings,existFwRuleInx){var tmpDiff=makeDiff(settings,existFwRuleInx),path=paths.ipsecConns;return depsChecker.getDepsByDiff(tmpDiff,path)},deviceMode:deviceMode,isFirewallMode:isFirewallMode,depsChecker:depsChecker,getFirewallAutoConfigNote:getFirewallAutoConfigNote}}])}();