"use strict";!function(){angular.module("app").service("ipfilterUtil",["cpe","device","funcs","translate",function(cpe,device,funcs,translate){function makeHelper(){return new device.ipfilter.Helper(ipfilter,lan,attributes)}function setZoneInterfaces(data){var firewall=data.Device.Firewall;zonesInterfaces={ipv4:[],ipv6:[]},_.each(firewall,function(fw,type){var firewallZones=funcs.newConfig.normalize(fw.Zones),ipVersion=type.toLowerCase();_.each(firewallZones,function(zone,key){var needCheckZone=!0;_.each(zone.Interfaces,function(iface){if(iface.Path&&needCheckZone){var conn=funcs.fetchBranch(data,iface.Path);/GRE/.test(iface.Path)?zonesInterfaces[ipVersion].push({gre:{name:conn.Name,value:iface.Path}}):/IPsec/.test(iface.Path)?zonesInterfaces[ipVersion].push({ipsec:{name:conn.Name,value:iface.Path}}):"2"==key?conn&&zonesInterfaces[ipVersion].push({wan:{name:conn.Name,value:iface.Path}}):needCheckZone=!1}})})})}function getZoneInterfaces(zone,version){var result=[{name:translate("auto"),value:"auto"}];return _.each(zonesInterfaces[version],function(iface,key){iface[zone]&&result.push(iface[zone])}),result}var ipfilter=null,attrs=null,lan=null,attributes=null,__initData=null,zonesInterfaces={ipv4:[],ipv6:[]},converterIpFilter=device.ipfilter.ipfilterConverter,converterLan=device.ipfilter.lanConverter,constants={rules:"Device.Firewall.",network:"Device.Network.",usb:"Device.USB.Connection."};return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),__initData=funcs.deepClone(data),ipfilter=converterIpFilter.dsysinitToNative(data),lan=converterLan.cpeToNative.config(data).LAN,attributes=converterIpFilter.attrsToNative(attrs),setZoneInterfaces(data),Promise.resolve()}function error(){return Promise.reject()}var paths=[constants.rules,constants.network];return Promise.all([cpe.GetParameterValues(paths),cpe.GetParameterAttributes([constants.rules])]).then(success,error)},wasActivate:function(){return!1},removeRules:function(removeList){function getRemoveIndexes(removeList){var indexes=[];return _.each(removeList,function(item){indexes.push(item.data)}),indexes}var list=getRemoveIndexes(removeList),newConfig=funcs.deepClone(__initData);_.each(list,function(item){var rulePath=constants.rules+(item.is_init_ipv6?"IPv6":"IPv4")+".Rules."+item.__index;funcs.cutBranch(newConfig,rulePath)});var diff=funcs.newConfig.makeDiff(__initData,newConfig,attrs);return cpe.ApplyDifference(diff)},applyRule:function(rule,index){var data=converterIpFilter.nativeToDsysinit(rule),type=rule.is_ipv6?"IPv6":"IPv4",rulePath=constants.rules+type+".Rules",initRule=funcs.fetchBranch(__initData,rulePath+"."+rule.__index+".");if(initRule=initRule?funcs.setValue(rulePath+"."+rule.__index,initRule,{}):funcs.setValue(rulePath,{},{}),_.has(rule,"is_init_ipv6")&&rule.is_ipv6!=rule.is_init_ipv6){var initType=rule.is_init_ipv6?"IPv6":"IPv4";funcs.cutBranch(initRule,constants.rules+type+".Rules."+rule.__index),funcs.setValue(constants.rules+initType+".Rules."+rule.__index,{},initRule),funcs.setValue(constants.rules+initType+".Rules",{},data)}var diff=funcs.newConfig.makeDiff(initRule,data,attrs);return _.isEmpty(diff)?Promise.resolve():cpe.ApplyDifference(diff)},makeHelper:makeHelper,getZoneInterfaces:getZoneInterfaces}}])}();