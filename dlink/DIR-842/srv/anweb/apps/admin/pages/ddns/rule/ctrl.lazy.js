"use strict";angular.module("app").controllerProvider.register("DdnsRuleCtrl",function($scope,$state,ddnsUtil,funcs,snackbars,translate){function getIface(){var wanGroup=_.find($scope.config.ExtIfaces.Group,function(item){return item.CurrentWAN});if(wanGroup){var defGw=[{Name:translate("default_gateway"),Value:wanGroup.Value}];$scope.config.Ifaces=defGw.concat($scope.config.ExtIfaces.Connection)}else $scope.config.Ifaces=$scope.config.ExtIfaces.Connection;ddns.isFirewallMode||!wanGroup||ddns.ExternalInterface&&ddns.ExternalInterface.Iface||(ddns.ExternalInterface={Iface:wanGroup.Value,Type:"Group"})}function isFormValid(){function emptyFields(){return requiredFields.some(function(field){return!$scope.ddns[field]})}var requiredFields=["Hostname","Username","Period"];return $scope.isDuckDNS()||requiredFields.push("Password"),!$scope.ddns_form.$invalid&&!emptyFields()}var ddns,helper,util=ddnsUtil,id=0,currentState=$state.current.name.split(".");currentState.pop(),currentState=currentState.join(".");var __backupHostname=null,__backupDDNS=null,__backupTmpService=null,pos=_.isUndefined($state.params.inx)?void 0:parseInt($state.params.inx);!function(){function __activate(){helper=ddnsUtil.makeHelper(),ddns=$scope.ddns=helper.getRule(pos),_.isUndefined(pos)&&(ddns.Enable=!0),ddns.isFirewallMode=util.isFirewallMode,ddns.isFirewallMode&&(ddns.ifacesForSelect=util.getIfacesForSelect()),$scope.config=helper.getConfiguration(),$scope.config.ExtIfaces&&getIface(),$scope.services=helper.getServices(),$scope.tmp={Service:helper.getCurrentService(ddns.Service)},$scope.config.NeedChooseIface&&!$scope.config.DeviceMode&&($scope.ifaces=_.filter(helper.getAvailIfaces(ddns.Ifaces),function(iface){return"ipv6"!=iface.Type&&"pppv6"!=iface.Type})),ddns&&!ddns.Hostname.length&&ddns.Hostname.push({Name:"",__id:pos}),__backupHostname=angular.copy(ddns.Hostname),__backupDDNS=angular.copy(_.omit(ddns,"Hostname")),__backupTmpService=angular.copy($scope.tmp.Service),$scope.$emit("pageload")}return util.wasActivate()?void __activate():void util.pull().then(__activate)}(),$scope.addHost=function(){id=+ddns.Hostname.slice(-1)[0].__id+1,ddns.Hostname.push({Name:"",__id:id}),$scope.ddns.focus=!0},$scope.removeHost=function(item,key){ddns.Hostname.length>1&&(ddns.Hostname.splice(key,1),delete $scope.ddns.focus)},$scope.ddnsSave=function(){function success(response){snackbars.add("msg_rpc_write_success"),$state.go(currentState+".info")}function error(response){snackbars.add("msg_rpc_write_error")}if(isFormValid()){if(ddns.System=$scope.tmp.Service.System,ddns.Service=$scope.tmp.Service.Service,ddns.Ssl=$scope.tmp.Service.Ssl,ddns.Period=ddns.Period,ddns.Link="ddns_custom_prov"!=$scope.tmp.Service.Name?$scope.tmp.Service.Link:ddns.Name,ddns.Custom=$scope.tmp.Service.Custom,"ddns_custom_prov"!=$scope.tmp.Service.Name&&(ddns.Path=$scope.tmp.Service.Path,ddns.Server=$scope.tmp.Service.Server),$scope.config.MultiHostname&&!helper.uniqueRule(ddns,ddns.Instance))return void snackbars.add("raccess_rule_exists");var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(ddns,pos).then(success)["catch"](error)["finally"](overlay.stop.bind(overlay,overlayId))}},$scope.checkDomain=function(hostname,opts){return opts=opts||{},funcs.is.domain(hostname,opts)?null:"msg_invalid_domain"},$scope.checkUniqueName=function(hostname){if(_.has(hostname,"Name")){var name=helper.isUniqueName(hostname,ddns);if(name)return"msg_error_value_is_not_uniq"}return null},$scope.isSavingDisabled=function(){return $scope.ddns_form?__backupHostname&&_.isEqual(__backupHostname,angular.copy(ddns.Hostname))&&__backupDDNS&&_.isEqual(__backupDDNS,angular.copy(_.omit(ddns,"Hostname")))&&__backupTmpService&&_.isEqual(__backupTmpService,$scope.tmp.Service):!0},$scope.validateLength=function(value,length){return value&&value.length>length?"msg_invalid_name_length":null},$scope.isDuckDNS=function(){return $scope.tmp&&$scope.tmp.Service&&"duckdns.org"==$scope.tmp.Service.Name?!0:!1}});