"use strict";angular.module("app").controllerProvider.register("DdnsCtrl",["$scope","$state","funcs","snackbars","translate","ddnsUtil",function($scope,$state,funcs,snackbars,translate,util){function init(){$scope.isActivate=!1,util.pull().then(function(data){helper=util.makeHelper(),$scope.ddns=helper.getDdns(),$scope.config=helper.getConfiguration(),$scope.config.NeedChooseIface&&($scope.ifaceData=helper.getIfaces()),$scope.$emit("pageload"),$scope.isActivate=!0},function(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})})}var helper,currentState=$state.current.name.split(".");currentState.pop(),currentState=currentState.join("."),init(),$scope.add=function(){$state.go(currentState+".add")},$scope.edit=function(item,key){$state.go(currentState+".edit",{inx:key})},$scope.remove=function(items,keys){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.remove(items,keys).then(function(){init(),snackbars.add("msg_rpc_remove_success")})["catch"](function(){init(),snackbars.add("msg_rpc_remove_error")})["finally"](overlay.stop.bind(overlay,overlayId))},$scope.isAddDisabled=function(){return $scope.ddns?$scope.config.MultiDdns?!1:$scope.config.NeedChooseIface?!$scope.getAvailIfaces().length:!!$scope.ddns.length:!0},$scope.isMultiDdnes=function(){return $scope.config.MultiDdns?!0:!1},$scope.getAvailIfaces=function(currentIface){return helper.getAvailIfaces(currentIface)},$scope.isEmptyRules=function(){return $scope.ddns&&void 0==$scope.ddns.length},$scope.getServiceName=function(item){return"ddns_custom_prov"!=item.Service?item.Service:item.Name},$scope.getHostname=function(item){var result=[];return result.push("".concat(translate("login"),": ").concat(item.Username)),result.push("".concat(translate("password"),": ").concat(item.Password)),result.push(""),_.each(item.Hostname,function(host){result.push(host.Name)}),result},$scope.getIfaceName=function(link){var ret;if(link)if(util.isFirewallMode){if(!util.getIfaceHelper())return;var iface=util.getIfaceHelper().getInterfaceInfo(link.ExternalInterface.Iface);ret=iface.name?iface.name:translate("st_not_selected")}else{var wanGroup=_.find($scope.config.ExtIfaces.Group,function(item){return item.CurrentWAN});if(wanGroup&&link.ExternalInterface.Iface==wanGroup.Value)ret=translate("default_gateway");else{var _iface=_.findWhere($scope.config.ExtIfaces.Connection,{Value:link.ExternalInterface.Iface});ret=_iface&&_iface.Name?_iface.Name:translate("ipsec_status_unknown")}}else ret=translate("st_not_selected");return ret},$scope.getStatusText=function(status){return translate("Aborted"==status||"Disabling"==status?"ipsec_status_"+status.toLowerCase():"st_"+status.toLowerCase())},$scope.getStatus=function(status){return"Aborted"==status||"Disabled"==status?"off":"Enabled"==status?"on":"pending"}}]);