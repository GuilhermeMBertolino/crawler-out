"use strict";function VlanUtil(cpe,funcs,device,navShared,oneWayRequest){function getInfoDualLAN(){return converter.dsysinitToNative.duallan(config)}function getConstraints(attrs){function getParamAttr(attr){return{"default":attr["default"],off:attr.offValue,min:attr.minInclusive,max:attr.maxInclusive}}var _vlanAttr$VLANID,_vlanAttr$VLANPriorit,_vlanAttr$MVR,result={},vlanAttr=funcs.fetchBranch(attrs,"Device.Network.Interface.Bridge.#template."),VIDAttr=null===(_vlanAttr$VLANID=vlanAttr.VLANID)||void 0===_vlanAttr$VLANID?void 0:_vlanAttr$VLANID["#attr"],VPRAttr=null===(_vlanAttr$VLANPriorit=vlanAttr.VLANPriority)||void 0===_vlanAttr$VLANPriorit?void 0:_vlanAttr$VLANPriorit["#attr"],MVRAttr=null===(_vlanAttr$MVR=vlanAttr.MVR)||void 0===_vlanAttr$MVR?void 0:_vlanAttr$MVR["#attr"];return result.VID=getParamAttr(VIDAttr),result.VID.min=autoconf.ANWEB_VLAN_ID_MIN,VPRAttr&&(result.VPR=getParamAttr(VPRAttr)),MVRAttr&&(result.MVR=getParamAttr(MVRAttr)),result}function isSupportDualLAN(){return autoconf.BR2_PACKAGE_ANWEB_CUSTOM_TIMDS_34475||autoconf.BR2_PACKAGE_ANWEB_CUSTOM_MTS_29548}function isSupportVPR(){return _.has(constraints,"VPR")}function isSupportMVR(){return _.has(constraints,"MVR")}function pushRequest(diffs){return cpe.ApplyDifference(diffs).then(function(response){Promise.resolve({data:response,status:"Success"})})["catch"](function(error){var _error$error;null!==error&&void 0!==error&&null!==(_error$error=error.error)&&void 0!==_error$error&&_error$error.code?Promise.reject({error:error,status:"ApplyError"}):Promise.resolve({error:error,status:"HTTPError"})})}function prepareAvailStates(ports){function getLabel(state){switch(state){case"excluded":return"vlan_port_type_e";case"untagged":return"vlan_port_type_u";case"tagged":return"vlan_port_type_t";case"included":return"ipsec_status_enabled"}}return _.map(ports,function(port){return port.AvailStates=_.map(port.AvailStates,function(state){return{label:getLabel(state),value:state}}),port})}function makeDiff(vlans){var currentConfig=funcs.deepClone(config),duallanInfo=isSupportDualLAN()?getInfoDualLAN():void 0,newConfig=converter.nativeToDsysinit.removeConfig(config,vlans,duallanInfo,deviceMode);return funcs.newConfig.makeDiff(currentConfig,newConfig,attrs)}var config,attrs,constraints,__initInstance,timeoutOneWayRequest={min:3e3,max:6e4},depsChecker=null,paths=["Device.Network.","Device.Switch.Ports","Device.DeviceInfo.DeviceMode","Device.WiFi.Radio.","Device.WiFi.APProfile.","Device.Firewall.","Device.USB.Connection.","Device.Routing.IPv4.Routes.","Device.Routing.IPv6.Routes.","Links."];paths.push("Device.Services.EasyMesh.Enable.");var deviceMode=navShared.deviceMode,converter=device.vlan.converter;return{pull:function(){function success(response){return config=response[0].result.Config,attrs=response[1].result.Datamodel,constraints=getConstraints(attrs),Promise.resolve()}return Promise.all([cpe.GetConfig(paths,!0),cpe.GetDatamodel(paths,!0)]).then(success)},getListVlans:function(){var input=funcs.deepClone(config);return converter.dsysinitToNative.list(input)},getInstanceVlan:function(inxBridge){var input=funcs.deepClone(config),data=converter.dsysinitToNative.instance(input,inxBridge);return data.Ports=prepareAvailStates(data.Ports),_.has(data.Vlan,"VID")||(data.Vlan.VID=void 0),_.has(data.Vlan,"MVR")||(data.Vlan.MVR=isSupportMVR()?!1:void 0,data.Vlan.Enable=!0),_.has(data.Vlan,"VPR")||(data.Vlan.VPR=isSupportVPR()?0:void 0),__initInstance=funcs.deepClone(data),data},getConstraints:function(){return constraints},getInfoDualLAN:getInfoDualLAN,apply:function(instance,inxBridge){var duallanInfo=isSupportDualLAN()?getInfoDualLAN():void 0,currentConfig=converter.nativeToDsysinit.applyConfig(config,__initInstance,inxBridge,duallanInfo,!0),newConfig=converter.nativeToDsysinit.applyConfig(config,instance,inxBridge,duallanInfo,!1),diff=funcs.newConfig.makeDiff(currentConfig,newConfig,attrs);return oneWayRequest({req:pushRequest(diff),minTime:timeoutOneWayRequest.min,maxTime:timeoutOneWayRequest.max})},removeVlans:function(vlans,depsToDel){var diffs=makeDiff(vlans);if(depsToDel){var depsDiff=depsChecker.getDepsDelDiff(depsToDel);Array.isArray(diffs)?diffs.unshift(depsDiff):diffs=[depsDiff].concat(diffs)}return oneWayRequest({req:pushRequest(diffs),minTime:timeoutOneWayRequest.min,maxTime:timeoutOneWayRequest.max})},isSupportDualLAN:isSupportDualLAN,isSupportVPR:isSupportVPR,checkLinksDeps:function(vlans){var diff=makeDiff(vlans);return depsChecker.getDepsByDiff(diff,"Device.Network.Interface.Bridge.")},depsChecker:depsChecker}}angular.module("app").service("VlanUtil",["cpe","funcs","device","navShared","oneWayRequest","$injector",VlanUtil]);