"use strict";function VlanListCtrl($scope,$state,util,translate,snackbars,navShared){function init(overlayId){function success(){var infoVlanList=util.getListVlans();$scope.vlan.list=infoVlanList.List,$scope.vlan.isActivate=!0,mode=infoVlanList.Mode,defaultLAN=infoVlanList.DefaultLAN}function error(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}function finallyCb(){overlayId&&overlay.stop(overlayId),$scope.$emit("pageload")}util.pull().then(success)["catch"](error)["finally"](finallyCb)}var isFirewallMode=navShared.isFirewallMode;$scope.vlan={list:null,isActivate:!1,isFirewallMode:isFirewallMode,add:function(){$state.go("^.add")},edit:function(item){$state.go("^.edit",{inx:item.__inxBridge})},remove:function(vlans){function success(overlayId){snackbars.add("msg_apply_success"),init(overlayId)}function error(overlayId){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"}),overlay.stop(overlayId)}function hasDefaultLAN(vlans){return _.some(vlans,function(item){return"Device.Network.Interface.Bridge.".concat(item.__inxBridge,".")==defaultLAN})}function getConns(vlans){return vlans.reduce(function(res,vlan){return _.union(res,vlan.Conns)},[])}function getServers(vlans){return vlans.reduce(function(res,vlan){return _.union(res,vlan.Servers)},[])}function depsCheckSuccess(deps){var depsDataFromPage={depLinks:deps,callbackDelFn:del};return util.depsChecker.openDialogIfDepsExists(depsDataFromPage)}if(hasDefaultLAN(vlans)){var vlanDef=_.find(vlans,function(o){return"Device.Network.Interface.Bridge.".concat(o.__inxBridge,".")==defaultLAN});return void(vlanDef&&alert(translate("vlan_sw_warn_lock",{name:vlanDef.Name,abr:"name"})))}if(!isFirewallMode){var conns=getConns(vlans);if(conns.length&&"AccessPoint"!=mode)return void alert(translate("vlan_need_remove_conns")+": "+conns.join(", "));var servers=getServers(vlans);if(servers.length)return void alert(translate("vlan_need_remove_servers")+": "+servers.join(", "))}if(confirm(translate("vlan_delete_answer"))){var del=$scope.vlan.deleteTunnels=function(depsToDel){var overlayId=overlay.start();util.removeVlans(vlans,depsToDel).then(success)["catch"](error)["finally"](overlay.stop.bind(overlay,overlayId))};if(isFirewallMode){var overlayId=overlay.start();util.checkLinksDeps(vlans).then(depsCheckSuccess,error)["finally"](overlay.stop.bind(overlay,overlayId))}else del()}},getMiniInfo:function(item){function makeRow(title,info){return{title:title,info:info}}var result=[];return result.push(makeRow(translate("vlan_vid"),item.VID)),item.Ports.Tagged&&result.push(makeRow(translate("vlan_ports_t"),item.Ports.Tagged)),item.Ports.Untagged&&result.push(makeRow(translate("vlan_ports_u"),item.Ports.Untagged)),result},vlanHide:function(item){return!1}};var mode,defaultLAN,overlay=$scope.overlay.circular;init()}angular.module("app").controllerProvider.register("VlanListCtrl",["$scope","$state","VlanUtil","translate","snackbars","navShared",VlanListCtrl]);