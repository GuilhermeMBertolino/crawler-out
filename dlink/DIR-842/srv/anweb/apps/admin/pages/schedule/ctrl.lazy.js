"use strict";function ScheduleCtrl($scope,$state,cpe,device,funcs,navShared,ngDialog,scheduler,translate){function pull(){return Promise.all([cpe.GetConfig(["Device.System.Scheduler.","Device.System.Command."]),cpe.GetParameterAttributes(["Device.System.Scheduler.","Device.System.Command."])])}function setAutoReboot(){showDialog({command:commands.reboot,nameCmd:"reboot",config:config,attrs:attrs})}function edit(item){showDialog({rule:item,attrs:attrs,config:config})}function add(){showDialog({rule:null,attrs:attrs,config:config})}function showDialog(options){function startDialog(options){return ngDialog.open({template:"dialogs/schedule_form/dialog.tpl.html",controller:"ScheduleFormDialogCtrl",scope:$scope,data:options,className:"schedule-dialog-width"})}startDialog(options)}function applyDiff(diff){return cpe.ApplyDifference(diff)}$scope.schedule={isActivate:!1,isEmptyRules:function(){return!_.isObject($scope.schedule.rules)||0===_.keys($scope.schedule.rules).length},rules:null,autoreboot:{state:{enable:!1,schedule:[]},set:setAutoReboot},edit:edit,add:add,remove:function(items){function success(){}function error(err){console.log(err)}function stopOverlay(){$scope.overlay.circular.stop(overlayId),$state.reload()}var overlayId=$scope.overlay.circular.start(),arrayId=[];_.each(items,function(item){arrayId.push(item.id)});var removeConfig=helper.getRemoveScheduleConfig(config,arrayId),diff=helper.getDiffRule(config,removeConfig,attrs);applyDiff(diff).then(success)["catch"](error)["finally"](stopOverlay)},getDetails:function(item){var result=[];return item.duration&&result.push(item.duration),item.status&&result.push(translate(item.status)),item.state&&result.push(translate(item.state)),result}};var firewallPath="Device.Firewall.",isFirewallMode=navShared.isFirewallMode,helper=null,helperCmd=null,attrs=null,config=null,commands={tree:null,reboot:[]};!function(){function success(response){config=response[0].result.Config,$scope.schedule.rules=config.Device.System.Scheduler.Config,attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),$scope.schedule.isActivate=!0,$scope.$emit("pageload"),helper=new device.schedule.helper($scope.schedule.rules),$scope.schedule.rules=helper.convertRules(),commands.tree=config.Device.System.Scheduler.Commands,helperCmd=helper.commands();var autoreboot=helperCmd.getCommand(commands.tree,config,"reboot");if(autoreboot.length){var rebootState=$scope.schedule.autoreboot.state;rebootState.enable=!0,_.each(autoreboot,function(cmd){commands.reboot.push(cmd),rebootState.schedule.push(scheduler.translateSchedule(helper.convertCronToUserString(cmd.Cron)))})}_.each($scope.schedule.rules,function(item,i){$scope.schedule.rules[i].interval=scheduler.translateSchedule(item.interval),$scope.schedule.rules[i].duration=scheduler.translateSchedule(item.duration.toString())})}function checkRules(){function successFw(response){function getIpVersionIpFilter(item){return item.is_ipv6||item.IsIPv6?"IPv6":"IPv4"}var config=response[0].result.Config,attr=funcs.buildTreeAttributes(response[1].result.ParameterList),converterIpFilter=device.ipfilter.ipfilterConverter.dsysinitToNative,converterVServers=device.vservers.converter.dsysinitToNative,converterRaccess=device.raccess.converter.dsysinitToNative,converterDMZ=device.dmz.converter.dsysinitToNative,rules=$scope.schedule.rules;rules=scheduler.addRuleNamesToTasks(rules,converterIpFilter(config),"ipfilter",[getIpVersionIpFilter,"__index"]),rules=scheduler.addRuleNamesToTasks(rules,converterRaccess(config,attr).Rules,"raccess",[getIpVersionIpFilter,"__id"]),rules=scheduler.addRuleNamesToTasks(rules,converterVServers({config:config}).Rules,"vserversEnable",["__id"]),rules=scheduler.addRuleNamesToTasks(rules,converterDMZ({data:config}).dmz,"dmzEnable",["__indexDMZRule"])}function hasFirewall(rules){return _.some(rules,function(rule){return _.some(rule.genInfo.tasks,function(task){return/Device.Firewall./.test(task.Link)})})}if(!isFirewallMode&&hasFirewall($scope.schedule.rules)){var paths=["Device.Network.",firewallPath];return Promise.all([cpe.GetConfig(paths),cpe.GetParameterAttributes([firewallPath])]).then(successFw)}}pull().then(success).then(checkRules)}()}angular.module("app").controllerProvider.register("ScheduleCtrl",["$scope","$state","cpe","device","funcs","navShared","ngDialog","scheduler","translate",ScheduleCtrl]);