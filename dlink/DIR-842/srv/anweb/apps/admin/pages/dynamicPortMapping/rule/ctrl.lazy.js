"use strict";function dynPortMappingRuleCtrl($scope,$state,funcs,navShared,ngDialog,snackbars,translate,util){function activate(){function __activate(){"Firewall"==portMapping.Mode?_.isUndefined(__index)?(portMapping.rule=util.getDefault(),portMapping.rule.Enable=!0,portMapping.action="add"):(portMapping.rule=util.getRule(__index),portMapping.action="edit"):portMapping.rule=util.getConfig(),"Firewall"==portMapping.Mode&&(portMapping.rule=angular.fromJson(angular.toJson(portMapping.rule)),portMapping.attrs=util.getAttrs(),portMapping.attrs.InternalInterface=portMapping.attrs.Ifaces.InternalInterface,changeIfaces(portMapping.rule.InternalInterface)),__backupRule=angular.copy(portMapping.rule),portMapping.attrs=util.getAttrs(),portMapping.isActivate=!0,$scope.$emit("pageload")}function errorPull(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}return util.wasActivate()?void __activate():void util.pull().then(__activate,errorPull)}function changeIfaces(intIface){portMapping.attrs.ExternalInterface=portMapping.attrs.Ifaces.ExternalInterface[intIface],_.some(portMapping.attrs.ExternalInterface,function(elem){return elem.value==portMapping.rule.ExternalInterface})||(portMapping.rule.ExternalInterface="")}function getPorts(item,type){return"External"==type?(item.ExternalPortStart||"-")+" - "+(item.ExternalPortEnd||"-"):"Internal"==type?(item.InternalPortStart||"-")+" - "+(item.InternalPortEnd||"-"):void 0}function removeForward(items,indexes){var indexes=indexes.sort().reverse();_.each(indexes,function(key){portMapping.rule.Permissions.splice(key,1)})}function getForwardData(data){return{Policy:data?data.Policy:"allow",ExternalPortStart:data?data.ExternalPortStart:"",ExternalPortEnd:data?data.ExternalPortEnd:"",InternalPortStart:data?data.InternalPortStart:"",InternalPortEnd:data?data.InternalPortEnd:"",InternalAddress:data?data.InternalAddress:""}}function showPermissionsDialog(options){function startDialog(options){return ngDialog.open({template:"dialogs/dyn_port_mapping/dialog.tpl.html",controller:"dynPortMappingPermissionsCtrl",resolve:funcs.getLazyResolve("dialogs/dyn_port_mapping/ctrl.lazy.js","dynPortMappingPermissionsCtrl"),data:options})}function closeDialog(result){if(result&&result.value){var value=result.value;_.has(value,"write")&&(_.isUndefined(inx)?portMapping.rule.Permissions.push(value.write):portMapping.rule.Permissions[inx]=value.write),_.has(value,"remove")&&removeForward(value.remove.items,value.remove.index)}}var inx=options.inx;options.list=_.omit(angular.copy(portMapping.rule.Permissions),inx),options.policyList=$scope.portMapping.attrs.DefaultPolicy,startDialog(options).closePromise.then(closeDialog)}$scope.portMapping={isActivate:!1,attrs:null,apply:function(action){function success(){if(snackbars.add("msg_rpc_write_success"),action&&"upnp"==action)activate();else{var state=_.initial($state.current.name.split("."),2).join(".")+".upnp";$state.go(state)}}function error(){snackbars.add("msg_rpc_write_error"),$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})}if(!$scope.upnpForm.$invalid){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(portMapping.rule).then(success,error)["finally"](overlay.stop.bind(overlay,overlayId))}},wasModified:function(){function checkModifiedPermissions(forward1,forward2){return forward1=angular.copy(forward1),forward2=angular.copy(forward2),forward1.length!=forward2.length?!0:_.some(forward1,function(v,k){return!_.isEqual(v,forward2[k])})}return portMapping.rule&&__backupRule&&_.keys(portMapping.rule).length==_.keys(__backupRule).length&&_.some(portMapping.rule,function(value,key){return"Permissions"==key?checkModifiedPermissions(value,__backupRule.Permissions):"Leases"==key?!1:!_.isEqual(value,__backupRule[key])})},permissions:{add:function(){var data=getForwardData();showPermissionsDialog({data:data})},remove:removeForward,edit:function(item,index){var data=getForwardData(item);showPermissionsDialog({inx:index,data:data})}},changeIfaceType:function(v){switch(v){case"iface":portMapping.rule.WANGroup="";break;case"wan_group":portMapping.rule.InternalInterface="",portMapping.rule.ExternalInterface=""}},changeIfaces:changeIfaces,getGroup:function(wanGroup){var result=[];return _.each(wanGroup,function(elem){Number(elem.name)&&result.push({name:elem.name,value:elem.name})}),result},getPorts:getPorts,getShortPerm:function(item){function makeRow(title,info){return{title:title,info:info}}var result=[];return result.push(makeRow(translate("upnp_mapping_policy"),item.Policy)),result.push(makeRow(translate("upnp_mapping_ext_ports"),getPorts(item,"External"))),result.push(makeRow(translate("upnp_mapping_int_ports"),getPorts(item,"Internal"))),result.push(makeRow(translate("ip_address"),item.InternalAddress||"-")),result},getIfaceName:function(name){return"st_not_selected"==name?translate(name):name},Mode:navShared.deviceMode};var portMapping=$scope.portMapping,__index=_.isUndefined($state.params.inx)?void 0:parseInt($state.params.inx),__backupRule=null;$state.current.name.split("."),activate()}angular.module("app").controller("dynPortMappingRuleCtrl",["$scope","$state","funcs","navShared","ngDialog","snackbars","translate","dynPortMappingUtil",dynPortMappingRuleCtrl]);