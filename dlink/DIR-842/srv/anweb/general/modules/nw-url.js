"use strict";!function(){var nw=angular.module(regdep("nw-url"),[]);nw.directive("nwUrl",function(){return{restrict:"A",require:"ngModel",link:function($scope,$element,$attrs,$model){function validator(value){if(value){var protocols=$attrs.nwUrlProtocols?$attrs.nwUrlProtocols.split(","):[],pattProtocol="^(?:(".concat(protocols.join("|"),")://)"),re=new RegExp(/^(([a-z0-9_\-]+\.)+[a-z0-9_\-]{2,256}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[[a-fA-F0-9:]+\])(:\d{1,5})?(\/[^#\s]*)?$/),reProtocol=new RegExp(pattProtocol),url=value.split("://");_.has($attrs,"nwUrlNotCyrillic")&&$model.$setValidity("msg_invalid_not_cyrillic_char",!reCyrillic.test(value)),_.has($attrs,"nwUrlRequireProtocol")?$model.$setValidity("msg_error_url_not_contains_protocol",url[1]&&reProtocol.test(url[0]+"://")&&re.test(url[1])):$model.$setValidity("msg_invalid_url",url[0]!=value?reProtocol.test(url[0]+"://")&&re.test(url[1]):re.test(value))}else $model.$setValidity("msg_error_url_not_contains_protocol",!0),$model.$setValidity("msg_invalid_url",!0);return value}var reCyrillic=new RegExp(/[а-яА-Я]/);$model.$parsers.unshift(validator),$model.$formatters.unshift(validator),$model.$formatters.unshift(function(value){if(value){var url=value.split("://");return url[1]?url[0]+"://"+punycode.toUnicode(url[1]):punycode.toUnicode(value)}}),$model.$parsers.unshift(function(value){if(value){if(_.has($attrs,"nwUrlNotCyrillic")&&reCyrillic.test(value))return value;var url=value.split("://");return url[1]?url[0]+"://"+punycode.toASCII(url[1]):punycode.toASCII(value)}})}}})}();