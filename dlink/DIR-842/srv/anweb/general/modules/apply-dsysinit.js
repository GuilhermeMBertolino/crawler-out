"use strict";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){var i,arr2;for((null==len||len>arr.length)&&(len=arr.length),i=0,arr2=new Array(len);len>i;i++)arr2[i]=arr[i];return arr2}function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i["return"]||_i["return"]()}finally{if(_d)throw _e}}return _arr}}function _arrayWithHoles(arr){return Array.isArray(arr)?arr:void 0}!function(){var apply=angular.module(regdep("apply"),[]);apply.service("profiles",["dsysinit","cpe","funcs","$http","$state",function(dsysinit,cpe,funcs,$http){function applyDeviceMode(){return cpe.SetParameterValues([{Name:"Device.DeviceInfo.DeviceMode",Value:mode}])}function getMode(profile){return profile&&profile.Config.DeviceMode&&profile.Config.DeviceMode.Mode?"ap"==profile.Config.DeviceMode.Mode?"AccessPoint":"Router":void 0}var mode=null,options={"interface":void 0,isRealtekModem:!!autoconf.BR2_PACKAGE_ANWEB_REALTEK_MODEM,isRealtekModemAsDIR:!!autoconf.BR2_PACKAGE_ANWEB_REALTEK_MODEM&&/^DIR/.test(autoconf.BR2_PACKAGE_ANWEB_DEVICEID),isOnlyOneIface:!!autoconf.BR2_PACKAGE_ANWEB_REALTEK_819X,alwaysTurnOffDHCP:!!autoconf.BR2_PACKAGE_ANWEB_CUSTOM_MAGNIT_45750,doNotRemoveFakeIP:!!autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ROSTELECOM_49221||!!autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ROSTELECOM_51438},sections=[{order:0,name:"get_wan",deps:["Config.WAN."],configPaths:["Device.Switch."],getData:function(config){return dsysinit.GetWAN(config)}},{order:1,name:"clean",deps:["Config.WAN.","Config.Dongle."],configPaths:["Device.Network.Connection.","Device.Network.Group.","Device.Network.Interface.","Device.Services.","Device.Firewall."],getData:function(config,attrs,profile){return dsysinit.Clean(config,profile)}},{order:2,name:"removeWAN",deps:["Config.WAN."],configPaths:["Device.Network.Connection.","Device.Network.Interface.","Device.Network.Settings.PPPClient.","Device.Network.IP.","Device.xDSL.","Device.DeviceInfo."],getData:function(config,attrs,profile){return dsysinit.RemoveWAN(config,profile,options)}},{order:4,name:"wifi",deps:["Config.WiFi."],configPaths:["Device.WiFi.","Device.Network.Interface.Bridge."],getData:function(config,attrs,profile){return funcs.deepExtend(funcs.deepClone(config),dsysinit.WiFi(config,profile))}},{order:5,name:"vlan",splitDiff:!0,deps:["Config.WAN."],configPaths:["Device.Switch.","Device.Network.Interface.","Device.Network.IP.","Device.Routing.","Device.Firewall."],getData:function(config,attrs,profile){return dsysinit.VLAN(config,profile,options)}},{order:6,name:"wan",splitDiff:!0,deps:["Config.WAN."],configPaths:["Device.Network.Connection.","Device.Network.Group.","Device.Network.Settings.","Device.Network.Interface.","Device.Network.IP.","Device.Network.Server.DHCP.","Device.Firewall.","Device.Services.IGMPX.","Device.xDSL.","Device.VoIP.","Device.Switch.Switches.1.Vlan.","Device.USB.Connection.","Device.USB.AutoConnect."],getData:function(config,attrs,profile,options){return funcs.deepExtend(funcs.deepClone(config),dsysinit.WAN(config,profile,options))}},{order:8,name:"change_active_sim",deps:["Config.WAN."],configPaths:[],getData:function(config,attrs,profile){var usbModem=dsysinit.USBModem(null,profile);return _.size(usbModem.Device)?usbModem:{}}},{order:9,name:"language",deps:["Config.SystemLanguage."],configPaths:["Device.DeviceInfo.Language."],getData:function(config,attrs,profile){return dsysinit.Language(funcs.deepClone(config),profile)}},{order:10,name:"password",deps:["Config.SystemPassword."],configPaths:["Device.Users."],getData:function(config,attrs,profile){return dsysinit.Password(funcs.deepClone(config),profile)}},{order:11,name:"lan",deps:["Config.LAN."],configPaths:["Device.Network.Connection.","Device.Network.IP.1.IPv4Address.1.","Device.Network.DNS."],getData:function(config,attrs,profile){return dsysinit.LAN(funcs.deepClone(config),profile,options)}},{order:12,name:"voip",deps:["Config.VoIP."],configPaths:["Device.Voip."],getData:function(config,attrs,profile){return dsysinit.VoIP(funcs.deepClone(config),profile)}},{order:13,name:"upnp",deps:["Config.UPnP."],configPaths:["Device.Services.DynamicPortMapping."],getData:function(config,attrs,profile){return dsysinit.UPnP(funcs.deepClone(config),profile)}},{order:14,name:"xdsl",deps:["Config.xDSL."],configPaths:["Device.xDSL."],getData:function(config,attrs,profile){return dsysinit.xDSL(funcs.deepClone(config),profile)}},{order:15,name:"raccess",deps:["Config.RemoteAccess."],configPaths:["Device.Firewall."],getData:function(config,attrs,profile){var result=funcs.deepExtend(funcs.deepClone(config),dsysinit.RemoteAccess(config,profile));return result}},{order:16,name:"time",deps:["Config.SystemTime."],configPaths:["Device.Services.NTP."],getData:function(config,attrs,profile){return funcs.deepExtend(funcs.deepClone(config),dsysinit.Time(config,profile))}},{order:17,name:"changemac",deps:["Config.MAC."],configPaths:["Device.Network.Interface."],getData:function(config,attrs,profile){var result={};funcs.setValue("Device.Network.Interface",funcs.deepClone(config.Device.Network.Interface),result);var macConfig=profile.Config.MAC;return funcs.setValue(macConfig.IfaceLink+"MACAddress",macConfig.MAC,result),result}}];return sections.push({order:20,name:"EasyMesh",deps:["Config.WiFi.Radio.1.SuperMeshEnable"],configPaths:["Device.DeviceInfo.","Device.Services.EasyMesh."],getData:function(config,attrs,profile){return dsysinit.EasyMesh(config,profile)}}),{applyDeviceMode:applyDeviceMode,apply:function(profile){function getApplySections(profile){function checkDeps(deps,profile,name){return"clean"==name?_.some(deps,function(dep){return!_.isNull(funcs.fetchBranch(profile,dep))}):_.every(deps,function(dep){return!_.isNull(funcs.fetchBranch(profile,dep))})}return _.chain(sections).filter(function(section){return checkDeps(section.deps,profile,section.name)}).filter(function(section){return!_.isFunction(section.need)||section.need(autoconf)}).sortBy("order").value()}function updateMode(){return mode?Promise.resolve():cpe.GetParameterValues(["Device.DeviceInfo.DeviceMode"]).then(function(res){var res=funcs.buildTree(res.result.ParameterList);mode=funcs.fetchBranch(res,"Device.DeviceInfo.DeviceMode")})}function fetchConfig(input){function getFetchPaths(applySections){return _.chain(applySections).map(function(section){return section.configPaths}).flatten().uniq().value()}var paths=getFetchPaths(input.applySections);return Promise.all([cpe.GetParameterValues(paths,mode,!0),cpe.GetParameterAttributes(paths,mode,!0)]).then(function(response){return input.config=funcs.buildTree(response[0].result.ParameterList),input.attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),Promise.resolve(input)})}function makeDiffs(input){function preProcess(data){return data.__interface&&(options["interface"]=data.__interface,delete data.__interface),data}function postProcess(diffs){return _.reduce(diffs,function(memo,diff,index){var step=input.applySections[index];if("hot_spot"==step.name)return memo.concat(funcs.newConfig.splitDiff(diff,function(value,path){return/^Device\.Network\.Interface\.Bridge\.(\+[\d]+)\.Members\./.test(path)&&/^Device\.Switch\.Switches\.1\.Vlan\./.test(value)?1:0}));if("vlan"==step.name,!1){var _ports=funcs.fetchBranch(diff,"Device.Switch.Ports."),_bridges=funcs.fetchBranch(diff,"Device.Network.Interface.Bridge."),delObj={},addObj={};if(_bridges){var _funcs$newConfig$spli=funcs.newConfig.splitDiff(_bridges),_funcs$newConfig$spli2=_slicedToArray(_funcs$newConfig$spli,2),del=_funcs$newConfig$spli2[0],add=_funcs$newConfig$spli2[1];_.each(del,function(data,key){funcs.setValue("Device.Network.Interface.Bridge.".concat(key),data,delObj)}),_.size(delObj)>0&&memo.push(delObj),_ports&&(_.each(_ports,function(port,key){0==port.Upstream&&memo.push(extendObj("Device.Switch.Ports.".concat(key),port))}),_.each(_ports,function(port,key){1==port.Upstream&&memo.push(extendObj("Device.Switch.Ports.".concat(key),port))}),delete diff.Device.Switch),_.each(add,function(data,key){funcs.setValue("Device.Network.Interface.Bridge.".concat(key),data,addObj)}),delete diff.Device.Network.Interface.Bridge}return diff.Device&&diff.Device.Network&&diff.Device.Network.Interface&&0==_.size(diff.Device.Network.Interface)&&delete diff.Device.Network.Interface,diff.Device&&diff.Device.Network&&0==_.size(diff.Device.Network)&&delete diff.Device.Network,diff.Device&&0!=_.size(diff.Device)&&memo.push(diff),_.size(addObj)>0&&memo.push(addObj),memo}if(funcs.fetchBranch(diff,"Device.Network.IP.")&&_.each(diff.Device.Network.IP,function(obj,key){"-"==key[0]&&(delete diff.Device.Network.IP[key].IPv4Address,delete diff.Device.Network.IP[key].IPv6Address)}),step.splitDiff){var diffs=funcs.newConfig.splitDiff(diff);return memo.concat(diffs)}return memo.concat(diff)},[])}var data=_.map(input.applySections,function(section){return preProcess(section.getData(input.config,input.attrs,input.profile,options))}),diffs=funcs.newConfig.makeDiffArray(input.config,data,input.attrs);return _.filter(postProcess(diffs),function(o){return o&&!_.isEmpty(o)})}function extendObj(path,obj){var _new={};return funcs.setValue(path,obj,_new),_new}function applyDiffs(diffs){return $http.post("/dcc_apply",{Diffs:diffs,DeviceMode:mode})["catch"](function(res){console.log("convert failed",res)})}var input={profile:profile,applySections:getApplySections(profile),config:null,attrs:null,diffs:[]};return mode=getMode(input.profile),updateMode().then(fetchConfig.bind(null,input)).then(makeDiffs).then(applyDiffs)},getMode:getMode}}])}();