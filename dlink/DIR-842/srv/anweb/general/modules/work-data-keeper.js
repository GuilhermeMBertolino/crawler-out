"use strict";angular.module(regdep("work-data-keeper"),[]).factory("WorkDataKeeper",["funcs",function(funcs){function fromList(initialList,attrs){function updateInitialList(name,value){initialList=initialList.filter(function(e){return!isSubPath(e.Name,name)});var subList;value&&isLiteralObject(value)?(subList=funcs.splitTree(value),subList.forEach(function(e){return e.Name=prependPath(e.Name,name)})):subList=[{Name:name,Value:value}],initialList=initialList.concat(subList)}function isLiteralObject(value){return Object.getPrototypeOf(Object.getPrototypeOf(value))?!1:!0}function makeIndexFromList(list,valueKey){var index={};valueKey||(valueKey="Value");for(var i in list)index[list[i].Name]=list[i][valueKey];return index}function makeListFromIndex(index){var list=[];for(var key in index)list.push({Name:key,Value:index[key]});return list}function parsePath(path){var arr=path.split(".");return{arr:arr,base:arr.length?arr[arr.length-1]:null,parent:arr.length>1?arr.slice(0,arr.length-1).join("."):null}}function prependPath(path,prefix){var p=prefix;return"."==p[p.length-1]&&(p=p.slice(0,-1)),p+"."+path}function getSubpathsToInstances(path){var arr=path.split("."),subpaths=[],p=[];for(var i in arr){var elem=arr[i];p.push(elem),funcs.is.number(elem)&&subpaths.push(p.join("."))}return subpaths}function getPathsToDelete(initialIndex,workTree){var toDeleteIndex={},toKeepIndex={};for(var path in initialIndex){var subpaths=getSubpathsToInstances(path);for(var i in subpaths){var p=subpaths[i];if(!toKeepIndex[p]){if(toDeleteIndex[p])break;if(!funcs.findBranch(workTree,p+".")){toDeleteIndex[p]=!0;break}toKeepIndex[p]=!0}}}return Object.keys(toDeleteIndex)}function isSubPath(path,parentPath){var arr=path.split("."),parentArr=parentPath.split(".");if(""==arr[arr.length-1]&&(arr=arr.slice(0,arr.length-1)),""==parentArr[parentArr.length-1]&&(parentArr=parentArr.slice(0,parentArr.length-1)),parentArr.length>arr.length)return!1;for(var i in parentArr)if(arr[i]!=parentArr[i])return!1;return!0}function normalizePath(path){return path&&"."==path[path.length-1]?path.slice(0,path.length-1):path}function getTemplPathByReal(path){var arr=path.split(".");return arr.forEach(function(e,i){e&&e.match(/^\+?\d+$/)&&(arr[i]="#template")}),arr.join(".")}this.workTree=funcs.buildTree(initialList),this.initialTree=funcs.buildTree(initialList),this.ignorePrefixes=["__"],this.ignorePaths=[];var attrIndex=makeIndexFromList(attrs||[],"Attributes");this.makeDiffTree=function(){function shouldIgnorePath(path){if(ignorePaths.find(function(p){return isSubPath(path,p)}))return!0;var _parsePath2=parsePath(path),arr=_parsePath2.arr;return!!arr.find(function(k){return ignorePrefixes.find(function(p){return 0==k.indexOf(p)})})}function getObjectToDelete(path){var list=[];return initialList.forEach(function(e){if(isSubPath(e.Name,path)){var p=normalizePath(e.Name),pt=getTemplPathByReal(p);if(diffDMIndex[pt]){var rp=e.Name.slice(normalizePath(path).length+1),attrs=attrIndex[pt];attrs&&Object.keys(attrs).includes("offValue")?list.push({Name:rp,Value:attrs.offValue}):("string"==typeof e.Value||e.Value instanceof String)&&list.push({Name:rp,Value:""})}}}),funcs.buildTree(list)}var key,workList=funcs.splitTree(this.workTree),workIndex=makeIndexFromList(workList),initialIndex=makeIndexFromList(initialList),diffIndex={},diffDMIndex={},ignorePrefixes=this.ignorePrefixes,ignorePaths=this.ignorePaths;for(key in workIndex)void 0===workIndex[key]&&delete workIndex[key];for(key in workIndex)shouldIgnorePath(key)||(void 0===initialIndex[key]||initialIndex[key]!=workIndex[key])&&(diffIndex[key]=workIndex[key],diffDMIndex[getTemplPathByReal(key)]=!0);var pathsToDelete=getPathsToDelete(initialIndex,this.workTree),delDiffIndex={};for(var i in pathsToDelete){var p=pathsToDelete[i];if(!shouldIgnorePath(p)){var _parsePath=parsePath(p),base=_parsePath.base,parent=_parsePath.parent;delDiffIndex[parent+".-"+base]=getObjectToDelete(p)}}var diffList=makeListFromIndex(diffIndex),delDiffList=makeListFromIndex(delDiffIndex),diffArr=[];return delDiffList.length&&diffArr.push(funcs.buildTree(delDiffList)),diffList.length&&diffArr.push(funcs.buildTree(diffList)),diffArr},this.updatePath=function(name,value){updateInitialList(name,value),funcs.setValue(name,value,this.workTree)},this.resetPath=function(path){funcs.setValue(path,funcs.findBranch(this.initialTree,path),this.workTree)},this.resetPaths=function(paths){var _this=this;paths.forEach(function(p){return _this.resetPath(p)})}}return fromList.fromTree=function(initialTree){var initialList=funcs.splitTree(initialTree);return fromList.apply(this,[initialList])},fromList}]);