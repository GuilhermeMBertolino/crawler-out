webpackJsonp([0],[function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)},function(module,exports,__webpack_require__){"use strict";var device=angular.module("dcc.device",[]);__webpack_require__(2)("dcc.device"),device.factory("dsysinit",function(){return{GetWAN:__webpack_require__(34),Clean:__webpack_require__(37),RemoveWAN:__webpack_require__(38),VLAN:__webpack_require__(39),WAN:__webpack_require__(40),USBSettings:__webpack_require__(42),Mac:__webpack_require__(43),LAN:__webpack_require__(44),WiFi:__webpack_require__(45),SuperMesh:__webpack_require__(46),EasyMesh:__webpack_require__(47),Password:__webpack_require__(48),Language:__webpack_require__(49),Mode:__webpack_require__(50),USBModem:__webpack_require__(51),VoIP:__webpack_require__(52),UPnP:__webpack_require__(53),xDSL:__webpack_require__(54),RemoteAccess:__webpack_require__(55),Time:__webpack_require__(56),HotSpot:__webpack_require__(57),Dongle:__webpack_require__(58)}}),device.factory("device",["cpe","funcs","$http",function(cpe,funcs,$http){function reset(){function reboot(){cpe.Reboot(!1)}return cpe.FactoryReset().then(reboot)}function updateGwifConnection(input){function getNetwork(){return cpe.GetParameterValues(["Device.Network"]).then(function(res){return funcs.buildTree(res.result.ParameterList)})}function updateConnection(config){var applyData={},connectionLink=input.connectionLink,connection=funcs.fetchBranch(config,connectionLink);if(isPPP(input)){var pppConfLink=connection.PPPConfiguration,pppConfParams={};_.has(input,"username")&&(pppConfParams.Username=input.username),_.has(input,"password")&&(pppConfParams.Password=input.password),funcs.setValue(pppConfLink.replace(/\.$/,""),pppConfParams,applyData)}else if(isCellular(input)){var path="Device.USB.Connection.",connections=funcs.fetchBranch(config,path);for(var key in funcs.newConfig.normalize(connections))if(connections[key].Interface==input.connectionLink){var pppConfParams={};_.has(input,"username")&&(pppConfParams.Username=input.username),_.has(input,"password")&&(pppConfParams.Password=input.password),funcs.setValue(path+key,pppConfParams,applyData);break}}var parameterList=funcs.splitTree(applyData);return cpe.SetParameterValues(parameterList)}function isPPP(input){var re=/pppoe|pppoev6|pppoedual|pptp|l2tp/,type=input.type;return re.test(type)}function isCellular(input){var re=/3g|lte|mobileinet/,type=input.type;return re.test(type)}return getNetwork().then(updateConnection)}function authCheck(){return cpe.GetParameterValues(["Device.Users.CurrentUser."])}return{funcs:__webpack_require__(5),system:{reset:reset,reboot:cpe.Reboot,save:cpe.SaveConfig},updateGwifConnection:updateGwifConnection,authCheck:authCheck,tm:__webpack_require__(59)}}])},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";function get_wan(config){var link="Device.Network.Interface.Bridge.2.";return{__interface:link}}__webpack_require__(4),__webpack_require__(35).T,__webpack_require__(5),module.exports=get_wan},,,function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){function isCellularInterface(data){var iface=data.BaseInterface||data.Interface;if(iface){var data=funcs.fetchBranch(config,iface);if(data)return/Device.Network.Interface.Cellular./.test(data.LowerLayer)||/Device.USB.Modem./.test(data.LowerLayer)}return!1}var config=funcs.deepClone(initConfig),types=profile&&"IPv4"==profile.KeepDefaultConns?[]:["DHCP"];types=types.concat(["USB","Static","PPPoE","DHCPv6","L2TP"]);var connections=[],backupConnetions=profile&&profile.BackupConnections?profile.BackupConnections:[];return _.each(_.pick(initConfig.Device.Network.Connection,types),function(items,type){_.each(funcs.newConfig.normalize(items),function(data,inx){_.contains(backupConnetions,data.Name)||isCellularInterface(data)||connections.push("Device.Network.Connection.".concat(type,".").concat(inx,"."))})}),initConfig.Device.USB&&!profile.ModemAutoConnection&&_.each(initConfig.Device.USB.Connection,function(_,key){connections.push("Device.USB.Connection.".concat(key,"."))}),_.each(initConfig.Device.Network.Group[1].WAN,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].WAN[key]}),_.each(initConfig.Device.Network.Group[1].WANv6,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].WANv6[key]}),_.each(initConfig.Device.Network.Group[1].VPN,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].VPN[key]}),_.each(initConfig.Device.Firewall.IPv4.Rules,function(obj,key){var _obj$Dest;connections.includes(null===(_obj$Dest=obj.Dest)||void 0===_obj$Dest?void 0:_obj$Dest.Iface)&&""===obj.Origin&&delete config.Device.Firewall.IPv4.Rules[key]}),_.each(initConfig.Device.Firewall.IPv4.Zones,function(z,zk){_.each(z.Interfaces,function(i,k){_.contains(connections,i.Path)&&delete config.Device.Firewall.IPv4.Zones[zk].Interfaces[k]})}),_.each(initConfig.Device.Firewall.IPv6.Zones,function(z,zk){_.each(z.Interfaces,function(i,k){_.contains(connections,i.Path)&&delete config.Device.Firewall.IPv6.Zones[zk].Interfaces[k]})}),_.has(initConfig.Device.Services,"IGMPX")&&_.each(initConfig.Device.Services.IGMPX.Upstreams,function(obj,key){_.contains(connections,obj.Interface)&&delete config.Device.Services.IGMPX.Upstreams[key]}),_.has(initConfig.Device.Services,"NTP")&&__autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ROSTELECOM_51438&&(config.Device.Services.NTP.Interface=""),config}var _=__webpack_require__(4),funcs=(__webpack_require__(35).T,__webpack_require__(5)),__autoconf="undefined"!=typeof autoconf?autoconf:{};module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile,options){function isCellularInterface(data){var iface=data.BaseInterface||data.Interface;if(iface){var data=funcs.fetchBranch(config,iface);if(data)return/Device.Network.Interface.Cellular./.test(data.LowerLayer)||/Device.USB.Modem./.test(data.LowerLayer)}return!1}function isDHCP(link){return/Device.Network.Connection.DHCP./.test(link)}var backupConnetions=profile&&profile.BackupConnections?profile.BackupConnections:[],connections=[],config=funcs.deepClone(initConfig),pppClientRe=/^Device\.Network\.Settings\.PPPClient\.([0-9]+)\./,pppClientList=[],types=profile.KeepDefaultConns&&"IPv4"==profile.KeepDefaultConns?[]:["DHCP"];types=types.concat(["USB","Static","PPPoE","DHCPv6","L2TP"]),_.each(_.pick(initConfig.Device.Network.Connection,types),function(items,type){_.each(funcs.newConfig.normalize(items),function(data,inx){if(!_.contains(backupConnetions,data.Name)&&!isCellularInterface(data)&&(delete config.Device.Network.Connection[type][inx],connections.push("Device.Network.Connection.".concat(type,".").concat(inx,".")),pppClientRe.test(data.PPPConfiguration)&&pppClientList.push(pppClientRe.exec(data.PPPConfiguration)[1]),"PPPoE"==type)){var dhcpKey=_.findKey(initConfig.Device.Network.Connection.DHCPv6,{Interface:"Device.Network.Connection.".concat(type,".").concat(inx,".")});dhcpKey&&(delete config.Device.Network.Connection.DHCPv6[dhcpKey],connections.push("Device.Network.Connection.DHCPv6.".concat(dhcpKey,".")))}})}),initConfig.Device.USB&&!profile.ModemAutoConnection&&_.each(initConfig.Device.USB.Connection,function(_,key){delete config.Device.USB.Connection[key]});var networkIPs=funcs.newConfig.normalize(initConfig.Device.Network.IP),_loop=function(inst){var obj=networkIPs[inst],ipv4List=Object.values(funcs.newConfig.normalize(initConfig.Device.Network.IP[inst].IPv4Address));if(obj.LowerLayer&&/Device\.Network\.Interface\.Cellular\./.test(obj.LowerLayer)&&profile.ModemAutoConnection)return"continue";if(ipv4List.some(function(ipv4){return ipv4.Origin}))return"continue";if(options.doNotRemoveFakeIP&&ipv4List.some(function(ipv4){return"Static"==ipv4.AddressingType&&"1.0.0.1/30"==ipv4.IPAddress}))return"continue";var isLowerLayer=connections.includes(function(conn){return conn==obj.LowerLayer})&&!isDHCP(obj.LowerLayer),isEtherWAN=!!obj.LowerLayer&&funcs.fetchBranch(config,obj.LowerLayer+"Upstream");(isLowerLayer||isEtherWAN)&&delete config.Device.Network.IP[inst]};for(var inst in networkIPs)_loop(inst);return _.each(funcs.newConfig.normalize(initConfig.Device.Network.Settings.PPPClient),function(obj,key){_.contains(pppClientList,key)&&delete config.Device.Network.Settings.PPPClient[key]}),_.has(initConfig.Device,"xDSL")&&(config.Device.xDSL[1].ATM.PVC={}),_.has(initConfig.Device.Network.Interface,"ATM")&&(config.Device.Network.Interface.ATM={}),_.has(initConfig.Device.Network.Interface,"PTM")&&(config.Device.Network.Interface.PTM={}),config}var _=__webpack_require__(4),funcs=(__webpack_require__(35).T,__webpack_require__(5));module.exports=diff},function(module,exports,__webpack_require__){"use strict";function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function(){it=it.call(o)},n:function(){var step=it.next();return normalCompletion=step.done,step},e:function(_e2){didErr=!0,err=_e2},f:function(){try{normalCompletion||null==it["return"]||it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);len>i;i++)arr2[i]=arr[i];return arr2}function diff(config,profile,options){function getFW(config,profile,bridges){var fw=angular.copy(funcs.fetchBranch(config,"Device.Firewall.")),result=[];for(var i in fw){var elem=fw[i];if("IPv4"==i||"IPv6"==i){var obj={type:i,zones:[],policy:[]};_.omit(bridges,function(bridge){return!isCreateInterface(bridge)});for(var j in funcs.newConfig.normalize(elem.Zones)){var ifaces=[];for(var k in funcs.newConfig.normalize(elem.Zones[j].Interfaces))ifaces.push({key:k,link:elem.Zones[j].Interfaces[k].Path});obj.zones.push({key:j,ifaces:ifaces,name:elem.Zones[j].Name,access:elem.Zones[j].Access})}for(var key in funcs.newConfig.normalize(elem.Policy))obj.policy.push({key:key,policy:elem.Policy[key]});result.push(obj)}}return result}function getAllLinks(config){var result=[];return _.each(fetch(config,"Device.Network.Interface.Bridge."),function(bridge,bridgeKey){_.each(funcs.newConfig.normalize(bridge.Port),function(port,portKey){result.push({iface:port.LowerLayer,tag:port.Tagged,bridgeKey:bridgeKey,portKey:portKey})})}),result}function getVID(conn){return conn.VLAN&&conn.VLAN.Enable&&conn.VLAN.ID>0?conn.VLAN.ID:0}function getQoS(conn){return conn.VLAN&&conn.VLAN.Enable&&conn.VLAN.QoS>0?conn.VLAN.QoS:0}function fetch(branch,path){var data=funcs.fetchBranch(branch,path);return _.isObject(data)?funcs.newConfig.normalize(data):data}function getUpstreamPort(profile){var port=funcs.fetchBranch(profile,"Config.EtherWAN.Port");return port?port:profile.InternetPort||"WAN"}function getPortLinkByName(config,name){var key=_.findKey(fetch(config,"Device.Switch.Ports."),function(port){return port.Alias==name});return"Device.Switch.Ports.".concat(key,".")}function getATMs(profile,config){function getLinkType(type,atm){return"Bridge"==type?"BRIDGE":"IPoA"==atm.LinkType?"IPOA":"PPPoA"==atm.LinkType?"PPPOA":"IPOE_PPPOE"}var conns=fetch(profile,"Config.WAN."),groups=fetch(profile,"Config.GroupingInterfaces."),result=[];return _.each(fetch(config,"Device.Network.Interface.ATM."),function(obj,key){result.push({key:key})}),_.each(conns,function(list,type){_.each(list.Connection,function(data){if("DSL.ATM"==data.MediaType){var atm=funcs.fetchBranch(data,"Media.DSL.ATM."),group=_.find(groups,function(o){return _.contains(o.create.wans,data.Name)});group&&result.push({key:group.create.name,name:"ATM_"+group.create.name,enable:!0,vpi:parseInt(atm.DestinationAddress.split("/")[0]),vci:parseInt(atm.DestinationAddress.split("/")[1]),linkType:getLinkType(type,atm)})}})}),result}function getPVC(atmList,config){var result=[];return _.each(fetch(config,"Device.xDSL.1.ATM.PVC."),function(obj,key){result.push({key:key})}),result.concat(atmList)}function getPTMs(profile){var conns=fetch(profile,"Config.WAN."),groups=fetch(profile,"Config.GroupingInterfaces."),result=[];return _.each(fetch(config,"Device.Network.Interface.PTM."),function(obj,key){result.push({key:key})}),_.each(conns,function(list,type){_.each(list.Connection,function(data){if("DSL.PTM"==data.MediaType){var vid=(fetch(data,"Media.DSL.PTM."),getVID(data)),group=_.find(groups,function(o){return _.contains(o.create.wans,data.Name)});group&&result.push({key:group.create.name,name:"PTM_"+group.create.name,enable:!0,linkType:"BRIDGE",vid:vid})}})}),result}function getAllPorts(config,profile,upstream){function getBusyPorts(profile){var result=[],groups=fetch(profile,"Config.GroupingInterfaces.");return _.each(groups,function(group){result=result.concat(group.create.lans)}),_.uniq(result)}var result=[],busyPorts=getBusyPorts(profile);return _.each(fetch(config,"Device.Switch.Ports."),function(port,key){result.push({name:port.Alias,path:"Device.Switch.Ports.".concat(key,"."),isUpstream:port.Alias==upstream,isBusy:_.contains(busyPorts,port.Alias)})}),_.each(fetch(config,"Device.Network.Interface.WiFi."),function(band,key){"ap"==band.Type&&result.push({name:band.Name,path:"Device.Network.Interface.WiFi.".concat(key,"."),isUpstream:!1,isBusy:!1})}),result}function getAllBridges(config,profile,ports,upstream,links){function isLAN(key){return"1"==key}function isWAN(key){return"2"==key}function isLanAndFree(ports,iface){var port=_.find(ports,function(o){return o.path==iface});return port&&!port.isUpstream&&!port.isBusy}function isWanAndFree(ports,iface){var port=_.find(ports,function(o){return o.path==iface});return port.isUpstream&&!port.isBusy}var etherWanPort,result=[],upstreamLink=getPortLinkByName(config,getUpstreamPort(profile)),isNeedCreateWanBridge=!0;_.each(fetch(config,"Device.Network.Interface.Bridge."),function(bridge,key){var members=[];isLAN(key)?(_.each(links,function(link){link.bridgeKey==key&&isLanAndFree(ports,link.iface)&&members.push({link:link.iface,tag:!1})}),fetch(profile,"Config.EtherWAN.Port")&&isLanAndFree(ports,getPortLinkByName(config,"WAN"))&&members.push({link:getPortLinkByName(config,"WAN"),tag:!1})):isWAN(key)&&_.each(links,function(link){link.bridgeKey==key&&isWanAndFree(ports,link.iface)&&(isNeedCreateWanBridge=!1,members.push({link:link.iface,tag:!1}))}),members.length>0&&result.push({key:key,type:"Default",members:members})}),isNeedCreateWanBridge&&fetch(profile,"Config.EtherWAN.Port")&&(etherWanPort=fetch(profile,"Config.EtherWAN.Port"),result.push({key:"new_key",name:etherWanPort,type:"WAN",members:[{link:getPortLinkByName(config,etherWanPort),tag:!1}]}));var wanConns=_.filter(fetch(profile,"Config.WAN."),function(elem,type){return"Bridge"!=type}),vidList=[],vlanName="";return _.each(wanConns,function(list){_.each(list.Connection,function(conn,type){if("Bridging"==conn.MediaType){var vid=getVID(conn);vid&&(vidList.push(vid),-1!=conn.Name.indexOf("pppoe")||-1!=conn.Name.indexOf("l2tp")||-1!=conn.Name.indexOf("pptp")?vlanName=conn.Name:""==vlanName&&(vlanName=conn.Name))}})}),vidList=_.uniq(vidList),vidList.length>0&&result.push({key:vlanName,name:vlanName,type:"WAN",members:[{link:upstreamLink,vid:vidList[0],tag:!0}]}),_.each(fetch(profile,"Config.WAN.Bridge.Connection."),function(conn){var group=_.find(fetch(profile,"Config.GroupingInterfaces."),function(o){return _.contains(o.create.wans,conn.Name)});if("DSL.ATM"==conn.MediaType){var bridge={key:conn.Name,name:conn.Name,type:"TransparentBridge",members:[{link:"Device.Network.Interface.ATM.".concat(group.create.name,"."),tag:!1}]};_.each(group.create.lans,function(name){var port=_.find(ports,{name:name});bridge.members.push({link:port.path,tag:!1})}),result.push(bridge)}else if("DSL.PTM"==conn.MediaType){var bridge={key:conn.Name,name:conn.Name,type:"TransparentBridge",members:[{link:"Device.Network.Interface.PTM.".concat(group.create.name,"."),tag:!1}]};_.each(group.create.lans,function(name){var port=_.find(ports,{name:name});bridge.members.push({link:port.path,tag:!1})}),result.push(bridge)}else if("Bridging"==conn.MediaType){var defaultWAN=_.find(result,function(o){return"Default"==o.type&&isWAN(o.key)}),etherWanBridge=_.find(result,function(o){return"WAN"==o.type});if(0!=getVID(conn)||__autoconf.BR2_PACKAGE_ANWEB_ALLOW_DUPLICATE_VID||!defaultWAN&&!etherWanPort){var bridge={key:conn.Name,name:conn.Name,type:"TransparentBridge",members:[{link:upstreamLink,vid:getVID(conn),qos:getQoS(conn),tag:0!=getVID(conn)}]};_.each(group.create.lans,function(name){var port=_.find(ports,{name:name});bridge.members.push({link:port.path,vid:0,tag:!1})}),result.push(bridge)}else _.each(group.create.lans,function(name){var port=_.find(ports,{name:name});defaultWAN&&defaultWAN.members.push({link:port.path,vid:0,tag:!1}),etherWanBridge&&etherWanPort&&etherWanBridge.members.push({link:port.path,vid:0,tag:!1})})}}),result}function formatBridge(bridge,links,profile){function getConn(profile){var connPath="";return _.each(profile.View,function(elem,key){1==elem&&(connPath=key)}),funcs.fetchBranch(profile,connPath)}var result={},conn=getConn(profile);return"Default"==bridge.type?_.each(bridge.members,function(member,i){var info=_.find(links,{bridgeKey:bridge.key,iface:member.link});info?(funcs.setValue("Port.".concat(info.portKey,".LowerLayer"),member.link,result),funcs.setValue("Port.".concat(info.portKey,".Tagged"),member.tag,result)):(funcs.setValue("Port.new_port_".concat(i,".LowerLayer"),member.link,result),funcs.setValue("Port.new_port_".concat(i,".Tagged"),member.tag,result))}):(result.Name=bridge.name,result.Enable=!0,result.CreateInterface=isCreateInterface(bridge),_.each(bridge.members,function(member,i){funcs.setValue("Port.new_port_".concat(i),{LowerLayer:member.link,Tagged:member.tag},result),member.vid&&funcs.setValue("VLANID",member.vid,result),member.qos&&funcs.setValue("VLANPriority",member.qos,result)}),conn&&conn.Media&&conn.Media.Bridge&&conn.Media.Bridge.MACAddress&&(result.MACAddress=conn.Media.Bridge.MACAddress)),result}function getAllIPs(config,bridges){var _step,ips=fetch(config,"Device.Network.IP."),result=funcs.newConfig.map(ips,function(ip,key){return{key:key,data:{}}}),_iterator=_createForOfIteratorHelper(bridges);try{for(_iterator.s();!(_step=_iterator.n()).done;){var bridge=_step.value;if(!/^(\d+)$/.test(bridge.key)){var data={Enable:!0,LowerLayer:"Device.Network.Interface.Bridge.".concat(bridge.key,".")};"WAN"==bridge.type&&(data.IPv4Address={new_fake_ip:{Enable:!0,IPAddress:"1.0.0.1/30"}}),result.push({key:bridge.key+"_IP",data:data})}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return result}function isCreateInterface(bridge){return"WAN"==bridge.type}function getInterface(profile,bridges){var result=[],etherWanPort=fetch(profile,"Config.EtherWAN.Port"),etherWanPortLink=getPortLinkByName(config,etherWanPort);if(_.each(fetch(profile,"Config.WAN."),function(data,type){"Bridge"!=type&&_.each(funcs.newConfig.normalize(data.Connection),function(conn){conn.VLAN&&conn.VLAN.Enable&&conn.VLAN.ID&&result.push("Device.Network.Interface.Bridge.".concat(conn.Name,"."))})}),etherWanPort){var etherWanBr=_.find(bridges,function(elem,key){var isEtherWanBr=_.find(elem.members,function(port){return port.link==etherWanPortLink});return isEtherWanBr});etherWanBr&&result.push("Device.Network.Interface.Bridge.".concat(etherWanBr.key,"."))}return _.first(result)}var pattern=T({"->":["$config","$profile","$links","$upstream","$ports","$bridges","$ips","$atms","$pvc","$ptms","__interface","Device"],$config:":external",$profile:":external",$atms:["$root",function(r){return getATMs(r.$profile,r.$config)}],$ptms:["$root",function(r){return getPTMs(r.$profile,r.$config)}],$pvc:["$root",function(r){return getPVC(r.$atms,r.$config)}],$upstream:["$root",function(r){return getUpstreamPort(r.$profile)}],$ports:["$root",function(r){return getAllPorts(r.$config,r.$profile,r.$upstream)}],$links:["$root",function(r){return getAllLinks(r.$config)}],$bridges:["$root",function(r){return getAllBridges(r.$config,r.$profile,r.$ports,r.$upstream,r.$links)}],$ips:["$root",function(r){return __autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ROSTELECOM_49221?getAllIPs(r.$config,r.$bridges):void 0}],__interface:["$root",function(r){return getInterface(r.$profile,r.$bridges)}],Device:{Switch:{Ports:{"->":!0,"{$port, $key}":["$root",function(r){return fetch(r.$config,"Device.Switch.Ports.")}],":":["$key",function(s){return s}],Upstream:["$port","$root",function(p,r){return p.Alias==r.$upstream}]}},Network:{Interface:{Bridge:{"->":!0,"{$bridge}":["$root",function(r){return r.$bridges}],":":["$bridge",function(br){return br.key}],$return:["$root","$bridge",function(r,br){return formatBridge(br,r.$links,r.$profile)}]},ATM:{"->":["?"],"?":["$root",function(r){return r.$atms&&r.$atms.length>0}],"{$atm}":["$root",function(r){return r.$atms}],":":["$atm*",function(o){return o.key}],Name:["$atm*",function(o){return o.name}],Enable:["$atm*",function(o){return o.enable}],LinkType:["$atm*",function(o){return o.linkType}]},PTM:{"->":["?"],"?":["$root",function(r){return r.$ptms&&r.$ptms.length>0}],"{$ptm}":["$root",function(r){return r.$ptms}],":":["$ptm*",function(o){return o.key}],Name:["$ptm*",function(o){return o.name}],Enable:["$ptm*",function(o){return o.enable}],LinkType:["$ptm*",function(o){return o.linkType}],VID:["$ptm*",function(o){return o.vid}]}},IP:{"->":"?","?":["$root",function(r){return!!r.$ips}],"{$ip}":["$root",function(r){return r.$ips}],":":["$ip",function(ip){return ip.key}],$return:["$ip",function(ip){return ip.data}]}},Firewall:{"->":["?","$fw","Zones","Policy"],"?":["$root",function(r){return!!r.$profile.Config.GroupingInterfaces}],"{$fw}":["$root",function(r){return getFW(r.$config,r.$profile,r.$bridges)}],":":["$fw*",function(fw){return fw.type}],Zones:{"->":["?","$zones","Name","Interfaces"],"?":["$parent",function(p){return p.$fw&&p.$fw.zones}],"{$zones}":["$parent",function(p){return p.$fw?p.$fw.zones:null}],":":["$zones*",function(z){return z.key}],Name:["$zones*",function(z){return z.name}],Access:["$zones*",function(z){return z.access}],Interfaces:{"->":["?"],"?":["$parent",function(p){return p.$zones}],"{$ifaces}":["$parent",function(p){return p.$zones.ifaces}],":":["$ifaces*",function(i){return i.key}],Path:["$ifaces*",function(i){return i.link}]}},Policy:{"->":["?"],"?":["$parent",function(p){return p.$fw&&p.$fw.policy}],"{$policy}":["$parent",function(p){return p.$fw?p.$fw.policy:null}],":":["$policy*",function(p){return p.key}],$return:["$policy*",function(p){return p.policy}]}},xDSL:{"->":["?"],"?":["$root",function(r){return r.$atms&&r.$atms.length>0}],":":1,ATM:{PVC:{"->":!0,"{$atm, $key}":["$root",function(r){return r.$atms}],":":["$atm*",function(o){return o.key}],Enable:["$atm*",function(o){return o.enable}],Interface:["$atm*",function(o){return o.name?"Device.Network.Interface.ATM.".concat(o.key,"."):void 0}],VPI:["$atm*",function(o){return o.vpi}],VCI:["$atm*",function(o){return o.vci}]}}}}}),result=pattern.build({$config:config,$profile:profile});return result}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5),__autoconf="undefined"!=typeof autoconf?autoconf:{};module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile,options){function getModem(data){var splitModem=data.Modem?data.Modem.split(" "):void 0;return splitModem?splitModem[0]:""}function getPingConnections(conns){var connections=_.filter(conns,function(conn){if(/Config\.WAN\.IPv4oE/.test(conn.nativeLink)){var tunnelConn=_.find(conns,function(tconn){return tconn.data&&tconn.data.BaseConnection==conn.nativeLink+"."||"PPPoE"==tconn.type});return!tunnelConn}return!0});return connections}function getPingRules(pingRules,v6){var list={};return _.each(pingRules,function(rule,k){v6?list["+new_ipv6_rule_".concat(k)]=rule:list["+new_ipv4_rule_".concat(k)]=rule}),list}function getMasqRules(masqRules){var list={};return _.each(masqRules,function(rule,k){list["+new_ipv4_masq_".concat(k)]=rule}),list}function getFwRuleWan2Lan(profile){function getAddress(addr,mask){return"".concat(addr,"/").concat(-1===mask.indexOf(".")?mask:funcs.ipv4.mask["short"](mask))}var list={};if(profile.Config.GroupingInterfaces){var g=_.find(profile.Config.GroupingInterfaces,function(g){return g.create.fw_rule_wan2lan});if(g){var st=profile.Config.LAN[1].IPv4.StaticIP[1];list[g.create.name]={CTState:{new_inst_1:{Value:"NEW"},new_inst_2:{Value:"ESTABLISHED"},new_inst_3:{Value:"RELATED"}},Dest:{Address:{new_inst:{IPEnd:"",IPStart:getAddress(st.Address,st.SubnetMask)}},Zone:"Device.Firewall.IPv4.Zones.3."},Ports:{Dest:{new_inst:{PortStart:-1,PortEnd:-1}},Source:{new_inst:{PortStart:-1,PortEnd:-1}}},Source:{Address:{new_inst:{IPEnd:"",IPStart:""}},Zone:"Device.Firewall.IPv4.Zones.2."},Action:"ACCEPT",Enable:!0,Name:g.create.name,Proto:{new_inst:{Value:"",Type:{}}}}}}return list}function getIPv6ConnectionLink(conn){return"DHCPv6"==conn.type||"PPPoEv6"==conn.type||"PPPoEDual"==conn.type?"Device.Network.Connection.DHCPv6.".concat(conn.key,"."):conn.link}function getDNS(conn,isStatic,type){function addDNS(output,value,inst){output[inst]={IPAddress:value}}if(__autoconf.BR2_PACKAGE_ANWEB_CUSTOM_GIPERNET_43740){var output={};return(_.has(conn,"DNSAutomatical")&&!conn.DNSAutomatical||isStatic)&&"v6"!=type&&(conn.DNSServer1&&addDNS(output,conn.DNSServer1,conn.DNSOrder&&conn.DNSOrder[0]?conn.DNSOrder[0]:"+1"),conn.DNSServer2&&addDNS(output,conn.DNSServer2,conn.DNSOrder&&conn.DNSOrder[1]?conn.DNSOrder[1]:"+2")),output}}function getVersion(type){return"PPPoEDual"==type?"Dual":"PPPoEv6"==type?"IPv6":"IPv4"}var pattern=T({"->":["$profile","$config","$isChangeMode","Device"],$profile:":external",$config:":external",$isChangeMode:["$profile","$config",function(p,c){return!p.Config.DeviceMode||!p.Config.DeviceMode.Mode||p.Config.DeviceMode.Mode.toLowerCase()!=c.Device.DeviceInfo.DeviceMode.toLowerCase()}],Device:{"->":["$connections","Network","xDSL","Firewall","Routing","Services","Voip","USB"],$connections:{"->":["?"],"{$list, $type}":["$root",function(r){return _.omit(r.$profile.Config.WAN,"Bridge")}],"{$conn, $inst, $n}":["$list",function(l){return l.Connection}],"?":["$root",function(r){return!_.isEmpty(_.omit(r.$profile.Config.WAN,"Bridge"))}],type:["$type","$conn",function(s,o){return helper.getActualType(s,o)}],media:["$conn",function(o){return o.MediaType}],data:["$conn",function(o){return o}],key:["$n",function(n){return"+connection_".concat(n)}],link:["key","type",function(k,t){return helper.getActualLink(k,t)}],nativeLink:["$inst","$type",function(i,t){return"Config.WAN.".concat(t,".Connection.").concat(i)}],ipv6:["type",function(o){return _.contains(["DHCPv6","Staticv6","PPPoEv6","PPPoEDual"],o)}],ipv4:["ipv6","type",function(o,t){return!o||"PPPoEDual"==t}]},xDSL:{"->":["$atm","?","ATM"],$atm:["$parent",function(p){return _.filter(p.$connections,function(o){return"DSL.ATM"==o.media})}],"?":["$atm",function(o){return o.length>0}],":":"1",ATM:{PVC:{"->":!0,"{$atm}":["$parent",function(p){return p.$parent.$atm}],$media:["$atm*",function(o){return funcs.fetchBranch(o.data.Media,o.data.MediaType+".")}],":":["$atm",function(o){return"".concat(o.key,"_ATM_PVC")}],Enable:!0,VCI:["$media*",function(o){return parseInt(o.DestinationAddress.split("/")[1])}],VPI:["$media*",function(o){return parseInt(o.DestinationAddress.split("/")[0])}],Interface:["$atm*",function(o){return"Device.Network.Interface.ATM.".concat(o.key,"_ATM_interface.")}]}}},Services:{"->":["$connections","IGMPX","TR069"],$connections:["$parent",function(p){return p.$connections}],IGMPX:{"->":["$ipoe","?","Upstreams","Enable"],"?":["$ipoe",function(o){return!!o}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return o.data.Flags.IGMP})}],Enable:["$ipoe",function(o){return!!o}],Upstreams:{"->":!0,":":"+new_igmp_connection",Interface:["$parent",function(p){return p.$ipoe.link}]}},TR069:{"->":!0,"?":["$ipoe",function(i){return!!i}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return"TR069"===o.data.Name})}],Iface:["$ipoe*",function(i){return i.link}]}},Voip:{"->":!0,"?":["$ipoe",function(i){return!!i}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return"VoIP"===o.data.Name})}],XDLinkNetworkConnection:["$ipoe*",function(i){return i.link}]},Routing:{"->":["$IPv4RIP","$IPv6RIP","?","RIP","RIPng"],$IPv4RIP:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv4&&o.data.Flags.RIP})}],$IPv6RIP:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv6&&o.data.Flags.RIP})}],"?":["$IPv4RIP","$IPv6RIP",function(r4,r6){return!!r4.length||!!r6.length}],RIP:{"->":!0,"?":["$parent",function(p){return!!p.$IPv4RIP.length}],Enable:!0,Networks:{"->":!0,"{$rule, $keym, $i}":["$parent",function(p){return p.$parent.$IPv4RIP}],":":["$i",function(i){return"+new_RIP_rule_".concat(i)}],Link:["$rule*",function(o){return o.link}]}},RIPng:{"->":!0,"?":["$parent",function(p){return!!p.$IPv6RIP.length}],Enable:!0,Networks:{"->":!0,"{$rule, $keym, $i}":["$parent",function(p){return p.$parent.$IPv6RIP}],":":["$i",function(i){return"+new_RIPng_rule_".concat(i)}],Link:["$rule*",function(o){return o.link}]}}},Network:{"->":["$connections","Connection","Settings","Group","Interface","Server","IP"],$connections:["$parent",function(p){return p.$connections}],Connection:{"->":["?","$DHCP","$DHCPv6","$Static","$Staticv6","$PPPoE","$PPPoEv6","$PPTP","$L2TP","$USB"],"?":["$parent",function(p){return _.size(p.$connections)}],$DHCP:{"->":["$conn","$data","?","Kabinet"],"?":["$conn",function(o){return o&&"DHCP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options,r.$config)}],Name:["$data",function(o){return o.Name}],DNS:["$data",function(o){return getDNS(o,!1)}],VendorID:["$data",function(o){return o.VendorID||void 0}],Kabinet:{"->":["?"],"?":["$parent",function(p){return!!p.$data&&!!p.$data.Kabinet}],Enable:["$parent",function(p){return p.$data.Kabinet.Enable}],Password:["$parent",function(p){return p.$data.Kabinet.Password}]}},$DHCPv6:{"->":["$conn","?"],"?":["$conn",function(o){return o&&("DHCPv6"==o.type||"PPPoEv6"==o.type||"PPPoEDual"==o.type)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return"PPPoEv6"==o.type||"PPPoEDual"==o.type?"Device.Network.Connection.PPPoE.+connection_0.":helper.getInterface(r.$profile,o,options,r.$config)}],Name:["$data",function(o){return o.Name}],VendorID:["$data",function(o){return o.VendorID||void 0}],RequestPrefixes:"Auto",IPv6Mode:["$conn",function(o){return helper.getIPv6Mode(o)}]},$Static:{"->":["$conn","?","DNS"],"?":["$conn",function(o){return o&&"Static"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key;
}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options,r.$config)}],Name:["$data",function(o){return o.Name}],Gateway:["$data",function(o){return o.GatewayIPAddress}],IPAddress:["$data",function(o){return helper.getIPAddress(o)}],DNS:{"->":!0,":":"+1",IPAddress:["$parent",function(p){return p.$data.DNSServer1}]}},$Staticv6:{"->":["$conn","?","DNS"],"?":["$conn",function(o){return o&&"Staticv6"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options,r.$config)}],Name:["$data",function(o){return o.Name}],Gateway:["$data",function(o){return o.GatewayIPAddress}],IPAddress:["$data",function(o){return helper.getIPAddress(o)}],DNS:{"->":!0,":":"+1",IPAddress:["$parent",function(p){return p.$data.DNSServer1}]}},$PPPoE:{"->":["$conn","?"],"?":["$conn",function(o){return o&&helper.isPPPoE(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options,r.$config)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient.".concat(o.key,"_pppClient.")}],Name:["$data",function(o){return o.Name}],DNS:["$data",function(o){return getDNS(o,!1)}],ServiceName:["$data",function(o){return o.ServiceName}],UnnumberedIP:["$conn",function(o){return o.data.UnnumberedIP?helper.getUnnumberedIPLink(o):void 0}]},$PPTP:{"->":["$conn","?"],"?":["$conn",function(o){return o&&"PPTP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$parent","$data",function(p,c){return helper.getXXTPInterface(p.$parent.$connections,c)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient.".concat(o.key,"_pppClient.")}],Name:["$data",function(o){return o.Name}],ServerAddress:["$data",function(o){return o.ServiceName}]},$L2TP:{"->":["$conn","?"],"?":["$conn",function(o){return o&&"L2TP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$parent","$data",function(p,c){return helper.getXXTPInterface(p.$parent.$connections,c)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient.".concat(o.key,"_pppClient.")}],Name:["$data",function(o){return o.Name}],LNS:["$data",function(o){return o.ServiceName}]},DHCP:["$DHCP",function(o){return _.size(o)?o:void 0}],DHCPv6:["$DHCPv6",function(o){return _.size(o)?o:void 0}],Static:["$Static",function(o){return _.size(o)?o:void 0}],Staticv6:["$Staticv6",function(o){return _.size(o)?o:void 0}],PPPoE:["$PPPoE",function(o){return _.size(o)?o:void 0}],PPTP:["$PPTP",function(o){return _.size(o)?o:void 0}],L2TP:["$L2TP",function(o){return _.size(o)?o:void 0}]},Settings:{"->":["PPPClient","?"],"?":["PPPClient",function(o){return _.size(o)}],PPPClient:{"->":!0,"?":["$conn",function(o){return o&&helper.isPPP(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn*",function(o){return"".concat(o.key,"_pppClient")}],$data:["$conn*",function(c){return c.data}],Username:["$data*",function(o){return o.Username}],Password:["$data*",function(o){return o.WithoutAuth?"":o.Password}],IPStack:["$conn*",function(o){return getVersion(o.type)}],MTU:["$data*",function(o){return o.MaxMRUSize||1492}],KeepAlive:{Enable:!0,Fails:3,Interval:30},Ondemand:["$data*",function(o){return o.Ondemand}],OndemandTimeout:["$data*",function(o){return o.IdleDisconnectTime}]}},Group:{"->":!0,1:{"->":["$connections","WAN","WANv6"],$connections:["$parent",function(p){return p.$parent.$connections}],$profile:["$root",function(r){return r.$profile}],WAN:["$connections",function(o){return helper.getGroups(o,!1,profile,config)}],WANv6:["$connections",function(o){return helper.getGroups(o,!0,profile,config)}],Name:"Default#nat"}},Interface:{"->":!0,ATM:["$parent",function(p){return helper.getATMInterfaces(p.$connections)}],PTM:["$parent",function(p){return helper.getPTMInterfaces(p.$connections)}],Bridge:{"->":["$target","$extend"],$target:["$parent",function(p){return p.$parent.$connections.find(function(o){return"Bridging"==o.data.MediaType&&o.data.Media.Bridge.MACAddress&&!o.data.Media.Bridge.__VlanName})}],$extend:["$target*",function(target){helper.getCloneMacIface(this,target.data,options)}]}},IP:{"->":["$ip","?","IPv4Address"],"{$ip}":["$root","$parent",function(r,p){return helper.getIPInstances(p.$parent.$connections,_.filter(r.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),r.$profile.Config.LAN)}],"?":["$ip",function(o){return!!o}],":":["$ip*",function(o){return o.Key}],Enable:!0,LowerLayer:["$ip",function(o){return o.LowerLayer}],IPv4Address:{"->":["$ipv4","?"],"{$ipv4}":["$parent",function(p){return p.$ip.IPv4Address}],"?":["$ipv4",function(o){return!!o}],":":["$ipv4*",function(o){return o.Key}],Enable:!0,IPAddress:["$ipv4",function(o){return o.IPAddress}]}}},Firewall:{"->":["$connections","IPv4","IPv6"],$connections:["$parent",function(p){return p.$connections}],IPv4:{"->":["$list","?","$pingRules","$masqRules","Zones","Rules"],$list:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv4})}],"?":["$list",function(o){return _.size(o)>0}],$pingRules:{"->":["$conn","?","Source","Dest"],"{$conn, $key, $i}":["$parent",function(p){return getPingConnections(p.$parent.$connections)}],"?":["$conn*",function(o){return o.ipv4&&o.data.Flags.Ping}],Action:"ACCEPT",Enable:!0,Dest:{"->":["$conn","IPLinks"],$conn:["$parent",function(p){return p.$conn}],Zone:"Device.Firewall.IPv4.Zones.1.",IPLinks:{"->":!0,$conn:["$parent",function(p){return p.$conn}],":":1,Link:["$conn*",function(c){return c.link}]}},Direction:"NONE",Pattern:"ICMP",Source:{"->":!0,$conn:["$parent",function(p){return p.$conn}],Iface:["$conn*",function(o){return o.link}],Zone:"Device.Firewall.IPv4.Zones.2."},Proto:{"+new_rule_proto":{Value:"icmp"}},Table:"Filter"},$masqRules:{"->":["$conn","Dest","Source"],"{$conn, $key, $index}":["$parent",function(p){return _.filter(p.$list,function(e){return e.data.Flags.NAT})}],"?":["$conn",function(c){return!!c}],Enable:!0,Action:"MASQUERADE",Dest:{"->":["$conn","IPLinks"],$conn:["$parent",function(p){return p.$conn}],Iface:["$parent",function(p){return p.$conn.link}],Zone:"Device.Firewall.IPv4.Zones.2."},Source:{"->":["$conn","IPLinks"],$conn:["$parent",function(p){return p.$conn}],Iface:"Device.Network.Interface.Bridge.1.",Zone:"Device.Firewall.IPv4.Zones.3.",IPLinks:{"->":!0,":":1,Link:"Device.Network.Interface.Bridge.1.",UseSubnet:!0}},Direction:"POSTROUTING",Table:"NAT"},Rules:{"->":!0,$extend:["$root","$parent",function(root,parent){_.extend(this,getPingRules(parent.$pingRules,!1)),_.extend(this,getFwRuleWan2Lan(root.$profile)),_.extend(this,getMasqRules(parent.$masqRules))}]},Zones:{2:{"->":!0,Interfaces:{"->":!0,"{$conn, $key, $index}":["$parent",function(p){return helper.getFirewallConnections(p.$parent.$parent.$list,!1)}],":":["$index",function(i){return"+new_v4_zones_".concat(i)}],Path:["$conn*",function(o){return o.link}]}}}},IPv6:{"->":["$list","?","$pingRules","Zones","Rules"],$list:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv6})}],"?":["$list",function(o){return _.size(o)>0}],$pingRules:{"->":["$conn","?","Source","Dest"],"{$conn, $key, $i}":["$parent",function(p){return p.$parent.$connections}],"?":["$conn*",function(o){return o.ipv6&&o.data.Flags.Ping}],Action:"ACCEPT",Enable:!0,Dest:{"->":["$conn","IPLinks"],$conn:["$parent",function(p){return p.$conn}],Zone:"Device.Firewall.IPv6.Zones.1.",IPLinks:{"->":!0,$conn:["$parent",function(p){return p.$conn}],":":1,Link:["$conn*",function(c){return getIPv6ConnectionLink(c)}]}},Pattern:"ICMP",Source:{"->":!0,$conn:["$parent",function(p){return p.$conn}],Iface:["$conn*",function(o){return getIPv6ConnectionLink(o)}],Zone:"Device.Firewall.IPv6.Zones.2."},Proto:{"+new_v6_rule_proto":{Value:"ipv6-icmp",Type:{"+new_v6_rule_proto_128":{Value:128},"+new_v6_rule_proto_129":{Value:129}}}},Direction:"NONE",Table:"Filter"},Rules:{"->":!0,$extend:["$root","$parent",function(root,parent){_.extend(this,getPingRules(parent.$pingRules,!0))}]},Zones:{2:{"->":["$list","Interfaces"],$list:["$parent",function(p){return helper.getFirewallConnections(p.$parent.$list,!0)}],Interfaces:{"->":!0,"{$conn, $key, $index}":["$parent",function(p){return _.filter(p.$list,function(o){return"PPPoE"!=o.type})}],":":["$index",function(i){return"+new_v6_zones_".concat(i)}],Path:["$conn",function(o){return o.link}]}}}}},USB:{"->":["?","AutoConnect","Connection"],"?":["$root",function(r){return"object"==_typeof2["default"](r.$config.Device.USB)&&"object"==_typeof2["default"](r.$config.Device.USB.AutoConnect)}],AutoConnect:{"->":!0,"?":["$root",function(r){return"boolean"==typeof r.$profile.ModemAutoConnection}],Enable:["$root",function(r){return r.$profile.ModemAutoConnection}],DefaultGW:["$root",function(r){return"undefined"==typeof r.$profile.ModemAutoConnectionAsDefaultGW||r.$profile.ModemAutoConnectionAsDefaultGW}]},Connection:{"->":["$conn","?","Binding"],"?":["$conn",function(o){return o&&helper.isUSB(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn*",function(c){return c.key}],$data:["$conn*",function(c){return c.data}],$is3G:["$data*",function(o){return"3G"==o.Media[o.MediaType].Type||void 0}],Enable:!0,Name:["$data*",function(o){return o.Name}],APN:["$data*",function(o){return o.APN}],DialNumber:["$data*",function(o){return o.DialNumber}],Username:["$data*",function(o){return o.Username}],Password:["$data*",function(o){return o.Password}],NoAuth:["$data*",function(o){return!o.Username&&!o.Password}],Binding:{"->":!0,$data:["$parent",function(p){return p.$data}],Modem:["$data*",function(d){return getModem(d)}]}}}}}),result=pattern.build({$profile:profile,$config:config});return result}var _interopRequireDefault=__webpack_require__(7),_typeof2=_interopRequireDefault(__webpack_require__(8)),_=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5),helper=__webpack_require__(41),__autoconf="undefined"!=typeof autoconf?autoconf:{};module.exports=diff},function(module,exports,__webpack_require__){"use strict";function getATMInterfaces(connections){var result={},conn=_.filter(connections,function(o){return"DSL.ATM"==o.media});return _.each(conn,function(obj,index){var media=funcs.fetchBranch(obj.data.Media,obj.data.MediaType+".");result["".concat(obj.key,"_ATM_interface")]={Enable:!0,Name:media.Name,LinkType:getLinkType(media.LinkType)}}),_.size(result)?result:void 0}function getLinkType(lt){switch(lt){case"EoA":return"IPOE_PPPOE";case"IPoA":return"IPOA";case"PPPoA":return"PPPOA";case"BRIDGE":return"BRIDGE"}}function getPTMInterfaces(connections){function getVID(data){return data.VLAN&&data.VLAN.Enable?data.VLAN.ID:0}var result={},conn=_.filter(connections,function(o){return"DSL.PTM"==o.media});return _.each(conn,function(obj,index){var media=funcs.fetchBranch(obj.data.Media,obj.data.MediaType+".");result["".concat(obj.key,"_PTM_interface")]={Enable:!0,VID:getVID(obj.data),Name:media.Name,MACAddress:media.MACAddress}}),_.size(result)?result:void 0}function getIPv6Mode(obj){switch(obj.data.Origin){case"AutoConfiguredBySlaac":return"Autoconf";case"AutoConfiguredByDHCPv6":return"DHCP";case"AutoConfigured":return"Auto";default:return}}function isPPP(obj){return _.contains(["PPPoEv6","PPPoEDual","PPPoE","PPTP","L2TP"],obj.type)}function isPPPoE(obj){return _.contains(["PPPoEv6","PPPoEDual","PPPoE"],obj.type)}function isUSB(obj){return _.contains(["USB"],obj.type)}function getActualType(type,obj){switch(type){case"IPv4oE":return obj.AddressingType;case"IPv6oE":return obj.AddressingType+"v6";case"PPTP":return obj.ActualType;case"3G":case"LTE":return"USB"}return type}function getActualLink(key,type){switch(type){case"PPPoEDual":case"PPPoEv6":return"Device.Network.Connection.PPPoE.".concat(key,".");case"USB":return"Device.USB.Connection.".concat(key,".")}return"Device.Network.Connection.".concat(type,".").concat(key,".")}function getGroupConnections(list,ipv6){function getIPv4Links(obj){return obj.ipv4?obj:null}function getIPv6Links(obj){var list=[];switch(obj.type){case"PPPoEv6":case"PPPoEDual":list.push({ipv6:!0,key:"+DHCPv6",link:"Device.Network.Connection.DHCPv6.+connection_0."});break;case"DHCPv6":case"Staticv6":list.push(obj)}return list}return _.compact(_.reduce(list,function(list,obj){return list.concat(ipv6?getIPv6Links(obj):getIPv4Links(obj))},[]))}function getFirewallConnections(list,ipv6){return _.reduce(list,function(list,obj){return"PPPoEDual"!=obj.type||ipv6?obj.ipv6!=ipv6?list:"PPPoEv6"==obj.type||"PPPoEDual"==obj.type?list.concat({ipv6:!0,key:"+DHCPv6",link:"Device.Network.Connection.DHCPv6.+connection_0."}):(list.push(obj),list):list.concat(obj)},[])}function getInterface(profile,conn,options,config){function getWiredIface(){return!options.isRealtekModemAsDIR&&options.isRealtekModem&&(isSecondDHCP(profile,conn.data)||options.isMultipleUntagIface)&&"Bridging"===conn.data.MediaType?"Device.Network.Interface.Bridge.".concat(conn.data.Name,"."):"DSL.ATM"==conn.data.MediaType?"Device.Network.Interface.ATM.".concat(conn.key,"_ATM_interface."):"DSL.PTM"==conn.data.MediaType?"Device.Network.Interface.PTM.".concat(conn.key,"_PTM_interface."):options["interface"]}function isUseVLAN(conn){return!!conn.VLAN&&conn.VLAN.ID>0}function isSecondDHCP(profile,conn){if(!profile.Config.WAN.IPv4oE)return!1;var list=[];return _.each(profile.Config.WAN.IPv4oE.Connection,function(conn){isUseVLAN(conn)||list.push(conn.Name)}),list.indexOf(conn.Name)>0}if(conn.data.__InterfaceName){var br=funcs.fetchBranch(config,"Device.Network.Interface.Bridge."),ifaceKey=funcs.newConfig.findKey(br,function(o){return o.Name==conn.data.__InterfaceName});if(ifaceKey)return"Device.Network.Interface.Bridge.".concat(ifaceKey,".")}return"WiFi"==conn.data.MediaType?options["interface"]:getWiredIface()}function getXXTPInterface(connections,obj){return _.find(connections,function(o){return"DHCP"==o.type||"Static"==o.type}).link}function getIPAddress(input){return input.Prefix?input.StaticIPAddress0+"/"+input.Prefix:input.StaticIPAddress0+"/"+funcs.ipv4.mask["short"](input.StaticIPSubnetMask0)}function getIPInstances(connections,groupIfs,lans){var result=[];_.each(connections,function(conn){"PPPoE"==conn.type&&conn.data.UnnumberedIP&&result.push({Key:"".concat(conn.key,"_").concat(conn.type,"_unnumbered_ip"),LowerLayer:"Device.Network.Interface.Loopback.1.",Name:"".concat(conn.type," Unnumbered IP"),IPv4Address:[{Key:"".concat(conn.key,"_").concat(conn.type,"_unnumbered_ip_v4_0"),IPAddress:conn.data.UnnumberedIP.Address+"/"+funcs.ipv4.mask["short"](conn.data.UnnumberedIP.SubnetMask)}]})});var staticip=lans&&lans[1].IPv4.StaticIP[1];return groupIfs&&staticip&&_.each(groupIfs,function(i){result.push({Key:i.create.name,LowerLayer:"Device.Network.Interface.Bridge.".concat(i.create.name,"."),Name:i.create.name,IPv4Address:[{Key:"1",IPAddress:staticip.Address+"/"+(-1!==_.indexOf(staticip.SubnetMask,".")?funcs.ipv4.mask["short"](staticip.SubnetMask):staticip.SubnetMask)}]})}),result}function getUnnumberedIPLink(conn){return"Device.Network.IP.".concat(conn.key,"_").concat(conn.type,"_unnumbered_ip.IPv4Address.+connection_0_PPPoE_unnumbered_ip_v4_0.")}function getGroups(connections,v6,profile,config){var list=getGroupConnections(connections,v6),result={};if(!_.isEmpty(list)){if(_.each(list,function(value,index){result["".concat(value.key,"_").concat(v6?"ipv6":"ipv4","_group")]={Link:value.link},0==index&&(result["".concat(value.key,"_").concat(v6?"ipv6":"ipv4","_group")].index=index)}),profile&&_.has(profile,"KeepDefaultConns")){"IPv4"!=profile.KeepDefaultConns||v6||(result.order=_.keys(result)),"IPv6"==profile.KeepDefaultConns&&v6&&(result.order=_.keys(result));var instPath="Device.Network.Group.1."+("IPv4"==profile.KeepDefaultConns?"WAN":"WANv6")+".max_instance",inst=funcs.fetchBranch(config,instPath);_.each(result.order,function(elem,key){-1!=elem.indexOf("+")&&(result.order[key]=(++inst).toString())})}return result}}function getUSBModem(data){function getID(link){var linkID=link?link.match(/\.\d+\.$/g,""):void 0;return linkID?Number(linkID[0].replace(/\./g,"")):""}if(isUSB(data)){var input=data.data;if(0==input.ActiveSIM||!input.Modem||""==input.Modem)return;var splitModem=input.Modem.split(" "),currentActiveSIM=parseInt(splitModem[1]);if(currentActiveSIM==input.ActiveSIM)return;var result={Modem:{}};return result.Modem[getID(splitModem[0])]={ActiveSIM:currentActiveSIM},result}}function getCloneMacIface(out,conn,options){var br=conn.Media.Bridge;if(/Bridge/.test(options["interface"])){if(!(conn.VLAN&&conn.VLAN.Enable&&conn.VLAN.ID)){var key=/Bridge\.(\d+)\./.exec(options["interface"]);key&&(out[key[1]]={MACAddress:br.MACAddress})}}else if(/Vlan/.test(options["interface"])){var _key=/Vlan\.(\d+)\./.exec(options["interface"]);_key&&(out[_key[1]]={MACAddress:br.MACAddress})}}var _=__webpack_require__(4),funcs=__webpack_require__(5);module.exports={isPPP:isPPP,isPPPoE:isPPPoE,isUSB:isUSB,getActualType:getActualType,getActualLink:getActualLink,getInterface:getInterface,getIPv6Mode:getIPv6Mode,getXXTPInterface:getXXTPInterface,getIPAddress:getIPAddress,getGroupConnections:getGroupConnections,getGroups:getGroups,getFirewallConnections:getFirewallConnections,getIPInstances:getIPInstances,getUnnumberedIPLink:getUnnumberedIPLink,getUSBModem:getUSBModem,getATMInterfaces:getATMInterfaces,getPTMInterfaces:getPTMInterfaces,getCloneMacIface:getCloneMacIface}},function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){function getConnection(profile){return profile.Config.WAN["3G"]?profile.Config.WAN["3G"].Connection[1]:profile.Config.WAN.LTE?profile.Config.WAN.LTE.Connection[1]:void 0}function getModem(data){var splitModem=data.Modem?data.Modem.split(" "):void 0;return splitModem?splitModem[0]:""}return T({"->":["$profile","$connection","Device"],$profile:":external",$connection:["$profile",function(o){return getConnection(o)}],Device:{"->":["?","Network"],"?":["$parent",function(p){return!!p.$connection}],Network:{Connection:{USB:{"->":["$data","Binding"],":":1,$data:["$root",function(o){return o.$connection}],Enable:!0,Name:["$data",function(o){return o.Name}],APN:["$data",function(o){return o.APN}],DialNumber:["$data",function(o){return o.DialNumber}],Username:["$data",function(o){return o.Username}],Password:["$data",function(o){return o.Password}],NoAuth:["$data",function(o){return!o.Username&&!o.Password}],Binding:{"->":!0,$data:["$parent",function(p){return p.$data}],Modem:["$data",function(d){return getModem(d)}]}}}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(35).T);__webpack_require__(5),__webpack_require__(41),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getIfaceType(media){return"DSL.PTM"==media?"PTM":media}return T({"->":["$profile","$media","__interfaces"],$profile:":external",$media:{"->":!0,"{$type}":["$root",function(r){return r.$profile.Config.WAN}],"{$conn}":["$type",function(o){return funcs.newConfig.normalize(o.Connection)}],"?":["$conn",function(o){return!_.contains(["DSL.ATM"],o.MediaType)}],Key:["$conn",function(o){return"WiFi"==o.MediaType?funcs.fetchBranch(o.Media,o.MediaType+".").Name:getIfaceType(o.MediaType)}],MACAddress:["$conn",function(o){return funcs.fetchBranch(o.Media,o.MediaType+".").MACAddress}]},__interfaces:{"->":["$iface"],"{$obj}":["$root",function(r){return r.$media}],":":["$obj*",function(o){return o.Key}],"?":["$obj*",function(o){return!!o.MACAddress}],MACAddress:["$obj*",function(o){return o.MACAddress}]}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5);module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile,options){function getAddress(addr,mask){return addr+"/"+funcs.ipv4.mask["short"](mask)}function getMode(mode){switch(mode){case"Disable":return"None"}}function getLocalDHCP(groupIfs,dhcp){if(groupIfs&&dhcp){var list={};return _.each(groupIfs,function(i){list[i.create.name]={Enable:!0,Interface:"Device.Network.Interface.Bridge.".concat(i.create.name,"."),IPv6Mode:"Autoconf",Leasev6:300,StartIP:dhcp.Server.MinAddress,EndIP:dhcp.Server.MaxAddress}}),list}}function getLocalDNS(groupIfs,dhcp){if(groupIfs&&dhcp){var list={};return _.each(groupIfs,function(i){list[i.create.name]={Enable:!0,Interface:"Device.Network.Interface.Bridge.".concat(i.create.name,"."),DNSServers:_.filter([dhcp.Server.DNSPrim,dhcp.Server.DNSSec],function(e){return e}).join(",")}}),list}}var pattern=T({"->":["$profile","$config","$static","$dhcp","$ipv4","Device"],$profile:":external",$config:":external",$ipv4:["$profile",function(o){return o.Config.LAN[1].IPv4}],$static:["$profile",function(o){return o.Config.LAN[1].IPv4.StaticIP[1]}],$dhcp:["$profile",function(o){return o.Config.LAN[1].IPv4.DHCP}],Device:{Network:{"->":!0,Group:{"->":["?"],"?":["$root",function(r){return r.$profile.Config.DeviceMode&&"ap"==r.$profile.Config.DeviceMode.Mode&&_.has(r.$static,"AddnHostname")&&r.$static.AddnHostname}],":":1,DomainName:["$root",function(r){return r.$static.AddnHostname?r.$static.AddnHostname.toLowerCase():r.$static.AddnHostname}]},Connection:{"->":["?"],$mode:["$root",function(r){return r.$profile.Config.DeviceMode?r.$profile.Config.DeviceMode.Mode:void 0}],"?":["$mode",function(mode){return"ap"==mode}],Static:{"->":!0,":":1,Gateway:["$root",function(r){return r.$static.GatewayAddress}],IPAddress:["$root",function(r){return r.$static.Address&&r.$static.SubnetMask?getAddress(r.$static.Address,r.$static.SubnetMask):void 0}],DNS:{"->":["?"],$mode:["$root",function(r){return r.$profile.Config.DeviceMode?r.$profile.Config.DeviceMode.Mode:void 0}],"?":["$root","$mode",function(r,m){return"Dynamic"!=r.$ipv4.AddressingMode&&"ap"==m}],":":1,IPAddress:["$root",function(r){return r.$static.DNS}]}},DHCP:{"->":!0,"?":["$root",function(r){return!!r.$config.Device.Network.Connection.DHCP[1]}],":":["$root",function(r){return r.$config.Device.Network.Connection.DHCP[1]?1:void 0}],Enable:["$root",function(r){return r.$dhcp&&"Disable"!=r.$dhcp.Mode}]}},Server:{"->":["?","DHCP"],"?":["$root",function(r){return!!r.$dhcp}],DHCP:{"->":!0,1:{"->":!0,Enable:["$root",function(r){return"Dynamic"==r.$ipv4.AddressingMode&&!options.alwaysTurnOffDHCP}],DHCPv4:{"->":!0,Mode:["$root",function(r){return options.alwaysTurnOffDHCP?"None":getMode(r.$dhcp.Mode)}]}},$extend:["$root",function(root){_.extend(this,getLocalDHCP(_.filter(root.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),root.$dhcp))}]},DNS:{"->":["?"],"?":["$root",function(r){return!!r.$config.Device.Network.Server&&!!r.$config.Device.Network.Server.DNS&&!!r.$config.Device.Network.Server.DNS[1]}],1:["$root",function(r){return funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(r.$config,"Device.Network.Server.DNS.1.")))}],$extend:["$root",function(root){_.extend(this,getLocalDNS(_.filter(root.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),root.$dhcp))}]}}}}}),result=pattern.build({$profile:profile,$config:config});return result}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5);__webpack_require__(41),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getGuests(obj){if(!obj.Config.WiFi)return null;var result=[],bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.each(obj.Config.WiFi.Radio,function(radio,inst){_.each(radio.AccessPoint,function(ap,key){if(1!=key){var band=_.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==radio.OperatingFrequencyBand});result.push("Device.WiFi.Radio."+band+".AccessPoint."+key+".")}})}),result}function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getMode(security){if(security.OpenWEP)return"OPEN";var modes={None:"OPEN","WPA-Personal":"WPAPSK","WPA2-Personal":"WPA2PSK","WPA-WPA2-Personal":"WPAPSKWPA2PSK","WPA-Enterprise":"WPA","WPA2-Enterprise":"WPA2","WPA-WPA2-Enterprise":"WPA1WPA2",WPA3:"WPA3SAE","WPA2-WPA3":"WPA2PSKWPA3SAE",WEP:"SHARED"};return modes[security.ModeEnabled]}function getEncryptionType(security){if(security.OpenWEP)return"WEP";var types={"":"NONE",NONE:"NONE",TKIP:"TKIP",AES:"AES","TKIP+AES":"TKIPAES",WEP:"WEP"};return types[security.EncryptionType]}function getOperatingStandards(points,radio){var ep=_.find(points,function(o){return o.isEP&&o.Band==radio.OperatingFrequencyBand});return ep&&(ep.Security.OpenWEP||"TKIP"==ep.Security.EncryptionType||"WEP"==ep.Security.EncryptionType||"WEP"==ep.Security.ModeEnabled)?"2.4GHz"==radio.OperatingFrequencyBand?"b/g":"a":void 0}function getInterface(points){var point=_.find(points,function(o){return o.isEP});if(point){var inst=getRadioInstance(point.Band);return"Device.WiFi.Radio.".concat(inst,".EndPoint.").concat(point.Key,"_point.")}}function getWifiIfaces(points,guests,isAP){var epArr=[];if(isAP){var epPoints=_.filter(points,function(o){return o.isEP});_.each(epPoints,function(elem,inx){epArr.push("Device.WiFi.Radio.".concat(getRadioInstance(elem.Band),".EndPoint.").concat(elem.Key,"_point."))})}return _.union(guests,epArr)}return T({"->":["$config","$profile","$isAP","$points","$guests","$wifiIfaces","Device","__interface"],$config:":external",$profile:":external",$isAP:["$profile",function(o){return o.Config.DeviceMode&&"ap"==o.Config.DeviceMode.Mode}],$points:{"->":!0,"{$radio}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],"{$list, $type}":["$radio",function(o){return _.pick(o,"AccessPoint","EndPoint")}],"{$data, $inst, $index}":["$list",function(o){return funcs.newConfig.normalize(o)}],"?":["$data",function(o){return!!_.size(o)}],isAP:["$type",function(s){return"AccessPoint"==s}],isEP:["$type",function(s){return"EndPoint"==s}],isRoot:["$inst",function(i){return"1"==i}],Band:["$radio",function(o){return o.OperatingFrequencyBand}],Enable:["$radio",function(o){return o.Enable}],Broadcast:["$data",function(o){return o.Broadcast}],SSID:["$data",function(o){return o.SSID}],BSSID:["$data",function(o){return o.BSSID}],Security:["$data",function(o){return o.Security}],MaxAssociatedDevices:["$data",function(o){return o.MaxAssociatedDevices}],BandwidthRestrict:["$data",function(o){return o.BandwidthRestricted}],Index:["$index",function(i){return i}],GuestAccess:["$data",function(d){return d.GuestAccess}],Key:["$data","$index","isRoot","isAP","Band",function(o,i,isRoot,isAP,band){return isRoot&&isAP?getRadioInstance(band):"+new_profile_".concat(i+1)}]},$guests:["$profile",function(o){return getGuests(o)}],$wifiIfaces:["$points","$guests","$isAP",function(p,g,ap){return getWifiIfaces(p,g,ap)}],Device:{WiFi:{APProfile:{"->":["$point","Security"],"{$point}":["$root",function(r){return r.$points}],":":["$point",function(o){return o.Key}],"?":["$point",function(o){return o.isAP}],SSID:["$point",function(o){return o.SSID}],MaxAssociatedDevices:["$point",function(o){return o.MaxAssociatedDevices}],BandwidthRestrict:["$point",function(o){return o.BandwidthRestrict}],GuestAccess:["$point",function(o){return o.GuestAccess}],Security:{"->":!0,$security:["$parent",function(p){return p.$point.Security}],ModeEnabled:["$security*",function(o){return getMode(o)}],KeyPassphrase:["$security*",function(o){return o.PreSharedKey?o.PreSharedKey:void 0}],EncryptionType:["$security*",function(o){return getEncryptionType(o)}]}},StationProfile:{"->":["$point","Security"],"{$point}":["$root",function(r){return r.$points}],":":["$point",function(o){return o.Key}],"?":["$point",function(o){return o.isEP}],SSID:["$point",function(o){return o.SSID}],BSSID:["$point",function(o){return o.BSSID}],Security:{"->":["$security","WEPKeySelected","WEPKey"],$security:["$parent",function(p){return p.$point.Security}],ModeEnabled:["$security*",function(o){return getMode(o)}],KeyPassphrase:["$security*",function(o){return o.PreSharedKey?o.PreSharedKey:void 0}],WEPKeySelected:["$security*",function(o){return parseInt(o.DefaultKeyID)||1}],EncryptionType:["$security*",function(o){return getEncryptionType(o)}],WEPKey:{"->":["?","$return"],"?":["$parent",function(p){return"WEP"==p.$security.ModeEnabled||p.$security.OpenWEP}],$return:{"->":!0,$security:["$parent",function(p){return p.$parent.$security}],"{$name, $key, $index}":["WEPKey1","WEPKey2","WEPKey3","WEPKey4"],":":["$index",function(i){return i+1}],Str:["$security*","$name",function(s,n){return s[n]||""}],Type:["$security*",function(s){return s.WEPasHEX?"HEX":"ASCII"}]}}}},Radio:{"->":["$radio","AccessPoint","EndPoint","OperatingStandards"],"{$radio, $key}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],":":["$radio",function(o){return getRadioInstance(o.OperatingFrequencyBand)}],Enable:["$radio",function(o){return o.Enable}],AutoChannelEnable:["$radio",function(o){return o.AutoChannelEnable}],Channel:["$radio",function(o){return parseInt(o.Channel)>0?o.Channel:void 0}],OperatingStandards:["$root","$radio",function(r,o){return getOperatingStandards(r.$points,o)}],AccessPoint:{"->":!0,"{$point}":["$root",function(r){return r.$points}],"?":["$point","$parent",function(o,p){return o.isAP&&o.Band==p.$radio.OperatingFrequencyBand}],":":["$point",function(o){return o.isRoot?"1":"".concat(o.Key,"_point")}],Enable:["$point",function(o){return!!_.isUndefined(o.Broadcast)||o.Broadcast}],Profile:["$point",function(o){return"Device.WiFi.APProfile.".concat(o.Key,".")}]},EndPoint:{"->":!0,"{$point}":["$root",function(r){return r.$points}],"?":["$point","$parent",function(o,p){return o.isEP&&o.Band==p.$radio.OperatingFrequencyBand}],":":["$point",function(o){return"".concat(o.Key,"_point")}],Enable:["$point",function(o){return o.Enable}],Profile:["$point",function(o){return"Device.WiFi.StationProfile.".concat(o.Key,".")}]}}},Network:{"->":["?","Interface"],"?":["$root",function(r){return r.$wifiIfaces&&r.$wifiIfaces.length>0}],Interface:{Bridge:{"->":!0,":":1,Port:{"->":!0,"{$links, $index}":["$root",function(r){return r.$wifiIfaces}],":":["$index*",function(i){return"+new_wifi_port_".concat(i)}],LowerLayer:["$links*",function(l){return l}],Tagged:!1}}}}},__interface:["$root",function(r){return getInterface(r.$points)}]}).build({$config:config,$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5);module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getBridge(key,config,profile,list){var bridge=angular.copy(funcs.fetchBranch(config,"Device.Network.Interface.Bridge.".concat(key,".")));return"1"==key&&_.each(list,function(obj,i){obj.enable&&funcs.setValue("Port.new_key_".concat(i),{LowerLayer:"Device.WiFi.Radio.".concat(obj.radioInst,".SuperMeshPoint.").concat(obj.meshInst,"."),Tagged:!1},bridge)}),bridge}return T({"->":["$config","$profile","$radio","Device"],
$config:":external",$profile:":external",$radio:{"->":!0,"{$radio, $key, $index}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],radioInst:["$radio",function(o){return getRadioInstance(o.OperatingFrequencyBand)}],meshInst:["$index",function(o){return"+new_mesh_point_"+o}],enable:["$radio",function(o){return o.SuperMeshEnable}],passphrase:["$radio",function(o){return o.SuperMeshPassphrase}]},Device:{Network:{Interface:{Bridge:{"->":!0,"{$bridge, $key}":["$root",function(r){return funcs.newConfig.normalize(funcs.fetchBranch(r.$config,"Device.Network.Interface.Bridge."))}],":":["$key*",function(s){return s}],$return:["$key*","$root",function(k,r){return getBridge(k,r.$config,r.$profile,r.$radio)}]}}},WiFi:{SuperMeshProfile:{"+supermesh_profile":{"->":["?","$isAP","Security"],"?":["$root",function(r){return _.some(r.$radio,function(o){return o.enable})}],$isAP:["$root",function(r){return"ap"==funcs.fetchBranch(r.$profile,"Config.DeviceMode.Mode")}],IPv6:!0,IsGateway:["$isAP",function(o){return!o}],PreferMaster:["$isAP",function(o){return!o}],SSID:["$isAP",function(o){return o?"__SM-AP":"__SM-MASTER"}],Security:{"->":!0,KeyPassphrase:["$root",function(r){return _.first(r.$radio).passphrase}]}}},Radio:{"->":["$data","SuperMeshPoint"],"{$data}":["$root",function(r){return r.$radio}],":":["$data",function(o){return o.radioInst}],$isAP:["$root",function(r){return"ap"==funcs.fetchBranch(r.$profile,"Config.DeviceMode.Mode")}],AutoChannelEnable:["$data","$isAP",function(d,ap){return(!d.enable||!ap)&&void 0}],SuperMeshPoint:{"->":["$points"],"{$point}":["$parent",function(p){return p.$data.enable?[p.$data]:[]}],":":["$point*",function(o){return o.meshInst}],Enable:!0,Profile:"Device.WiFi.SuperMeshProfile.+supermesh_profile."}}}}}).build({$config:config,$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5);module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$config","$profile","Device"],$config:":external",$profile:":external",Device:{"->":!0,"?":["$root",function(r){return funcs.fetchBranch(r.$profile,"Config.WiFi.Radio.1.SuperMeshEnable")}],DeviceInfo:{"->":!0,DeviceName:["$root",function(r){return r.$profile.Config.SuperMesh.DeviceName}]},Services:{EasyMesh:{"->":!0,Enable:!0,Backhaul:["$root",function(r){return"2.4GHz"==r.$profile.Config.SuperMesh.MeshBand?"2G":"5G"}]}}}}).build({$config:config,$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(35).T),funcs=__webpack_require__(5);module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){var configData=funcs.newConfig.normalize(config.Device.Users.User),profileData=profile.Config.SystemPassword,user=_.find(configData,function(obj){return obj.Username==profileData.Login});return user&&(user.Password=profileData.Password),config}var _=__webpack_require__(4),funcs=(__webpack_require__(35).T,__webpack_require__(5));module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){var lang=profile.Config.SystemLanguage.Language;return config.Device.DeviceInfo.Language=lang,config}__webpack_require__(4),__webpack_require__(35).T,__webpack_require__(5),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getMode(value){return"ap"==value?"AccessPoint":"Router"}var mode=profile.Config.DeviceMode.Mode;return config.Device.DeviceInfo.DeviceMode=getMode(mode),config}__webpack_require__(4),__webpack_require__(35).T,__webpack_require__(5),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){return T({"->":["$profile","Device"],$profile:":external",Device:{"->":!0,$connections:{"->":!0,"{$list, $type}":["$root",function(r){return r.$profile.Config.WAN}],"{$conn, $inst, $n}":["$list",function(l){return l.Connection}],type:["$type","$conn",function(s,o){return helper.getActualType(s,o)}],data:["$conn",function(o){return o}],key:["$n",function(n){return"+connection_".concat(n)}],link:["key","type",function(k,t){return helper.getActualLink(k,t)}],nativeLink:["$inst","$type",function(i,t){return"Config.WAN.".concat(t,".Connection.").concat(i)}],ipv6:["type",function(o){return _.contains(["DHCPv6","Staticv6","PPPoEv6","PPPoEDual"],o)}],ipv4:["ipv6","type",function(o,t){return!o||"PPPoEDual"==t}]},USB:["$connections",function(c){return helper.getUSBModem(c[0])}]}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(35).T,helper=(__webpack_require__(5),__webpack_require__(41));module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$config","$line","Device"],$profile:":external",$config:":external",$sip:["$profile",function(o){return o.Config.VoIP.SIP}],$line:["$profile",function(o){return o.Config.VoIP.Line}],$dhcpopt15:["$profile",function(o){return o.Config.VoIP.XDLinkDHCPOption15}],Device:{Voip:{"->":!0,Enable:!0,VoiceProfile:{"->":!0,":":1,Enable:"Enabled",Line:{"->":["$line","Enable","SIP"],"{$line, $key}":["$root",function(r){return r.$line}],":":["$key",function(o){return o}],Enable:["$line",function(o){return o.SIP.X_DLINK_Registration?"Enabled":"Disabled"}],DirectoryNumber:["$line",function(o){return o.SIP.X_DLINK_LoginID}],PhyReferenceList:["$line",function(o){return o.PortInstance}],SIP:{"->":!0,AuthUserName:["$parent",function(p){return p.$line.SIP.AuthUserName}],AuthPassword:["$parent",function(p){return p.$line.SIP.AuthPassword}]}},SIP:{"->":["?","ProxyServer","XDLinkUserAgentDomainInDigestEnable","UserAgentDomain"],"?":["$root",function(r){return!!r.$sip}],ProxyServer:["$root",function(r){return r.$sip.ProxyServer}],XDLinkUserAgentDomainInDigestEnable:["$root",function(r){return r.$sip.X_DLINK_UseDomain}],XDLinkUseUserAgentDomainInsteadProxy:["$root",function(r){return r.$sip.XDLinkUseUserAgentDomainInsteadProxy}],UserAgentDomain:["$root",function(r){return r.$sip.UserAgentDomain}]}},XDLinkDHCPOption15:{"->":!0,EnableForAuthUserName:["$root",function(r){return r.$dhcpopt15.EnableForAuthUserName}],EnableForUserAgentDomain:["$root",function(r){return r.$dhcpopt15.EnableForUserAgentDomain}]}}}}).build({$profile:profile,$config:config})}var T=(__webpack_require__(4),__webpack_require__(35).T);__webpack_require__(5),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$upnp","Device"],$profile:":external",$upnp:["$profile",function(o){return o.Config.UPnP}],Device:{Services:{DynamicPortMapping:{"->":!0,":":1,Enable:["$root",function(r){return r.$upnp.enable}]}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(35).T);__webpack_require__(5),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$config","$xdsl","Device"],$profile:":external",$config:":external",$xdsl:["$profile",function(o){return o.Config.xDSL}],Device:{xDSL:{"->":!0,":":1,ATM:{"->":!0,EnableADSL:["$root",function(r){return r.$xdsl.EnableADSL}]},PTM:{"->":!0,EnableVDSL:["$root",function(r){return r.$xdsl.EnableVDSL}]}}}}).build({$profile:profile,$config:config})}var T=(__webpack_require__(4),__webpack_require__(35).T);__webpack_require__(5),module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getAddr(isIPv6,ip,mask){return isIPv6?"::"==ip?{}:{1:{IPStart:ip}}:"0.0.0.0"==ip&&"0.0.0.0"==mask?{}:{1:{IPStart:ip+"/"+funcs.ipv4.mask["short"](mask)}}}function getAddrList(addrs){var result={};return _.each(addrs,function(elem,key){var index=_.has(elem,"__id")?elem.__id:"new_addr_"+key;result[index]={IPStart:elem.Addr}}),result}function getPattern(protocol){if(protocol){var protocol=protocol;return"SMB"==protocol&&(protocol="Samba"),"TELNET"==protocol&&(protocol="Telnet"),"domoticz_nav"==protocol&&(protocol="Smart"),"(RA)"+protocol}}return T({"->":["$profile","$attrs","$config","$rules","Device"],$profile:":external",$rules:["$profile",function(o){return o.Config.RemoteAccess}],Device:{Firewall:{IPv4:{Rules:{"->":["$rule","Ports","NAT","Source","Pattern"],"{$rule, $key}":["$root",function(r){return _.omit(r.$rules,function(o){return o.IsIPv6})}],":":["$key",function(k){return"new_ipv4_raccess_rule_"+k}],"?":["$rule",function(r){return!!_.size(r)}],Action:"DNAT",CTState:{1:{Value:"NEW"},2:{Value:"ESTABLISHED"},3:{Value:"RELATED"}},Dest:{Zone:zonesPath.v4.dest},Direction:"PREROUTING",NAT:{IPLinks:{1:{Link:"Device.Network.Interface.Bridge.1."}},Port:{"->":!0,$rule:["$parent",function(p){return p.$rule}],PortStart:["$rule",function(r){return"ICMP"!=r.Protocol&&parseInt(r.DstPort)?parseInt(r.DstPort):-1}],PortLink:["$rule",function(r){return"ICMP"==r.Protocol||parseInt(r.DstPort)?"":r.DstPort}]}},Proto:{1:{Value:"tcp"}},Ports:{"->":["$rule","Dest"],$rule:["$parent",function(p){return p.$rule}],Dest:{"->":["$port","?","1"],$port:["$parent",function(p){return p.$rule.SrcPort}],"?":["$parent",function(p){return"ICMP"!=p.$rule.Protocol}],1:{"->":!0,PortStart:["$parent",function(p){return parseInt(p.$port)?parseInt(p.$port):-1}],PortLink:["$parent",function(p){return parseInt(p.$port)?"":p.$port}]}}},Enable:!0,Source:{"->":["$rule","Address"],$rule:["$parent",function(p){return p.$rule}],Zone:zonesPath.v4.source,Iface:["$rule",function(r){return"auto"!=r.Iface?r.Iface:""}],Address:["$rule","$root",function(r,root){return r.IPList?getAddrList(r.IPList):getAddr(r.IsIPv6,r.IPs,r.Mask)}]},Name:["$rule*",function(o){return o.Name}],Pattern:["$rule*",function(o){return getPattern(o.Protocol)}],Table:"NATFilter"}},IPv6:{Rules:{"->":["$rule","Ports","NAT","Source","Pattern"],"{$rule, $key}":["$root",function(r){return _.omit(r.$rules,function(o){return!o.IsIPv6})}],":":["$key",function(k){return"new_ipv6_raccess_rule_"+k}],"?":["$rule",function(r){return!!_.size(r)}],Action:"ACCEPT",CTState:{1:{Value:"NEW"},2:{Value:"ESTABLISHED"},3:{Value:"RELATED"}},Dest:{Zone:zonesPath.v6.dest},Direction:"PREROUTING",Proto:{1:{Value:"tcp"}},Ports:{"->":["$rule","Dest"],$rule:["$parent",function(p){return p.$rule}],Dest:{"->":["$port","?","1"],$port:["$parent",function(p){return p.$rule.SrcPort}],"?":["$parent",function(p){return"ICMP"!=p.$rule.Protocol}],1:{"->":!0,PortStart:["$parent",function(p){return parseInt(p.$port)?parseInt(p.$port):-1}],PortLink:["$parent",function(p){return parseInt(p.$port)?"":p.$port}]}}},Enable:!0,Source:{"->":["$rule","Address"],$rule:["$parent",function(p){return p.$rule}],Zone:zonesPath.v6.source,Iface:["$rule",function(r){return"auto"!=r.Iface?r.Iface:""}],Address:["$rule","$root",function(r,root){return r.IPList?getAddrList(r.IPList):getAddr(r.IsIPv6,r.IPs,r.Mask)}]},NAT:{Port:{"->":!0,$rule:["$parent",function(p){return p.$rule}],PortStart:["$rule",function(r){return"ICMP"!=r.Protocol&&parseInt(r.Ports.Dest)?parseInt(r.Ports.Dest):-1}],PortLink:["$rule",function(r){return"ICMP"==r.Protocol||parseInt(r.Ports.Dest)?"":r.Ports.Dest}]}},Name:["$rule*",function(o){return o.Name}],Pattern:["$rule*",function(o){return getPattern(o.Protocol)}],Table:"NATFilter"}}}}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(35).T,funcs=__webpack_require__(5),zonesPath={v4:{source:"Device.Firewall.IPv4.Zones.2.",dest:"Device.Firewall.IPv4.Zones.1."},v6:{source:"Device.Firewall.IPv6.Zones.2.",dest:"Device.Firewall.IPv6.Zones.1."}};module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$time","Device"],$profile:":external",$time:["$profile",function(o){return o.Config.SystemTime}],Device:{Services:{NTP:{"->":!0,$zone:["$root",function(r){return r.$time.TimeZone}],TimeZoneHourOffset:["$zone*",function(o){return parseInt(o.split(":")[0])}],TimeZoneMinuteOffset:["$zone*",function(o){return parseInt(o.split(":")[1])}]}},System:{Time:{"->":__autoconf.BR2_PACKAGE_ANWEB_DSYSINIT,LocalTimeZone:["$root",function(r){return r.$time?r.$time.LocalTimeZone:void 0}]}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(35).T),__autoconf=(__webpack_require__(5),"undefined"!=typeof autoconf?autoconf:{});module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getBridge(config,profile){var hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,bridges=funcs.fetchBranch(config,"Device.Network.Interface.Bridge."),result=[],wifiIfaces=[];bridges=funcs.newConfig.normalize(bridges);for(var i in bridges){var ports=funcs.newConfig.normalize(bridges[i].Port),obj={};obj.Key=i,obj.Ports=[];for(var j in ports){var link=ports[j].LowerLayer;-1!=link.indexOf("WiFi")&&hasHotSpot?wifiIfaces.push({Key:"new_wifi_"+wifiIfaces.length,Link:link}):obj.Ports.push({Key:j,Link:link})}result.push(obj)}return hasHotSpot&&result.push({Key:"hot_spot_bridge",CreateInterface:!0,Name:"HotSpot",Ports:wifiIfaces}),result}function getFW(config,profile){var fw=funcs.fetchBranch(config,"Device.Firewall."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in fw){var elem=fw[i];if("IPv4"==i||"IPv6"==i){var obj={type:i,zones:[],masquerade:[],policy:[]};hasHotSpot&&"IPv4"==i&&(elem.Zones.new_zones={Name:"coovachilli",Interfaces:{1:{Path:"Device.Network.Server.Chilli.new_chilli."}}},elem.Rules.new_rule={Action:"MASQUERADE",Name:"CoovaChilli_Masq",Dest:{Iface:"Device.Network.Group.1."},Direction:"POSTROUTING",Enable:!0,Source:{Iface:"Device.Network.Server.Chilli.new_chilli."},Table:"NAT"},elem.Policy.new_policy={Dest:"Device.Firewall.IPv4.Zones.2.",Source:"Device.Firewall.IPv4.Zones.new_zones.",Policy:"ACCEPT"});for(var j in funcs.newConfig.normalize(elem.Zones)){var ifaces=[];for(var k in funcs.newConfig.normalize(elem.Zones[j].Interfaces))ifaces.push({key:k,link:elem.Zones[j].Interfaces[k].Path}),"lan"==elem.Zones[j].Name&&hasHotSpot&&ifaces.push({key:"new_key",link:"Device.Network.Interface.Bridge.hot_spot_bridge."});obj.zones.push({key:j,ifaces:ifaces,name:elem.Zones[j].Name})}for(var key in funcs.newConfig.normalize(elem.Rules))obj.Rules.push({key:key,rule:elem.Rules[key]});for(var key in funcs.newConfig.normalize(elem.Policy))obj.policy.push({key:key,policy:elem.Policy[key]});result.push(obj)}}return result}function getDHCP(config,profile){var dhcps=funcs.fetchBranch(config,"Device.Network.Server.DHCP."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in funcs.newConfig.normalize(dhcps)){var elem=dhcps[i];result.push({key:i,iface:elem.Interface,v4:{startIP:elem.DHCPv4.StartIP,endIP:elem.DHCPv4.EndIP},v6:{startIP:elem.DHCPv6.StartIP,endIP:elem.DHCPv6.EndIP}})}if(hasHotSpot){var ip=getNewIPNet(config),obj={key:"new_dhcp",iface:"Device.Network.Interface.Bridge.hot_spot_bridge.",v4:{startIP:ip.replace(/\.0$/,".100"),endIP:ip.replace(/\.0$/,".199")},v6:{startIP:__autoconf.BR2_PACKAGE_ANWEB_IPV6?"::2":void 0,endIP:__autoconf.BR2_PACKAGE_ANWEB_IPV6?"::64":void 0}};result.push(obj)}return result}function getNewIPNet(config){function getBridgeNets(ips){var result=[];for(var i in ips)if(/Bridge/.test(ips[i].LowerLayer))for(var j in funcs.newConfig.normalize(ips[i].IPv4Address)){var elem=ips[i].IPv4Address[j],splitAddrs=elem.IPAddress.split("/");result.push(funcs.ipv4.subnet.getNetworkAddress(splitAddrs[0],funcs.ipv4.mask["long"](splitAddrs[1])))}return result}for(var ips=funcs.fetchBranch(config,"Device.Network.IP."),bridgeNets=getBridgeNets(ips),k=0,net="",is_find_net=!1;!is_find_net;)net="192.168."+k++ +".0",_.contains(bridgeNets,net)||(is_find_net=!0);return net}return T({"->":["$config","$profile","$points","Device"],$config:":external",$profile:":external",$points:{"->":!0,"{$radio}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],"{$list}":["$radio",function(o){return funcs.newConfig.normalize(o.AccessPoint)}],"{$data, $inst, $index}":["$list",function(l){return funcs.newConfig.normalize(l)}],"?":["$data",function(o){return Object.keys(o).length>0}],Band:["$radio",function(o){return o.OperatingFrequencyBand}],Index:["$index",function(i){return i}],Key:["Band",function(b){return getRadioInstance(b)}]},Device:{"->":!0,Firewall:{"->":["$fw","Zones","Policy","Rules"],"{$fw}":["$root",function(r){return getFW(r.$config,r.$profile)}],":":["$fw",function(fw){return fw.type}],Zones:{"->":["$zones","Name","Interfaces"],"{$zones}":["$parent",function(p){return p.$fw.zones}],":":["$zones*",function(z){return z.key}],Name:["$zones",function(z){return z.name}],Interfaces:{"->":!0,"{$ifaces}":["$parent",function(p){return p.$zones.ifaces}],":":["$ifaces*",function(i){return i.key}],Path:["$ifaces*",function(i){return i.link}]}},Rules:{"->":!0,"{$masq}":["$parent",function(p){return p.$fw.masq}],":":["$masq*",function(m){return m.key}],$return:["$masq*",function(m){return m.masq}]},Policy:{"->":!0,"{$policy}":["$parent",function(p){return p.$fw.policy}],":":["$policy*",function(p){return p.key}],$return:["$policy*",function(p){return p.policy}]}},Network:{"->":!0,Interface:{Bridge:{"->":["$bridge","Port"],"{$bridge}":["$root",function(r){return getBridge(r.$config,r.$profile)}],":":["$bridge",function(br){return br.Key}],Enable:!0,Name:["$bridge",function(br){return br.Name}],CreateInterface:["$bridge",function(br){return br.CreateInterface}],Port:{"->":!0,"{$port}":["$parent",function(p){return p.$bridge.Ports}],":":["$port*",function(p){return p.Key}],LowerLayer:["$port*",function(p){return p.Link}]}}},Server:{"->":!0,Chilli:{"->":["$hotSpot","RADIUS","UAM"],$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"?":["$hotSpot",function(h){return!!h&&h.Enable}],":":"new_chilli",Enable:["$hotSpot",function(h){return h.Enable}],NetworkPrefix:["$hotSpot",function(h){return h.IPAddr}],Interface:"Device.Network.Interface.Bridge.hot_spot_bridge.",RADIUS:{"->":!0,$hotSpot:["$parent",function(p){return p.$hotSpot}],PrimaryServer:["$hotSpot",function(h){return h.PrimaryServer}],SecondaryServer:["$hotSpot",function(h){return h.SecondaryServer}],Secret:["$hotSpot",function(h){return h.Secret}]},UAM:{"->":!0,$hotSpot:["$parent",function(p){return p.$hotSpot}],Server:["$hotSpot",function(h){return h.UAMServer}],WalledGarden:["$hotSpot",function(h){return h.WalledGarden}]}},DHCP:{"->":["$dhcp","DHCPv4","DHCPv6"],"{$dhcp}":["$root",function(r){return getDHCP(r.$config,r.$profile)}],":":["$dhcp",function(d){return d.key}],Interface:["$dhcp",function(d){return d.iface}],Enable:!0,DHCPv4:{"->":!0,$version:["$parent",function(p){return p.$dhcp.v4}],StartIP:["$version",function(v){return v.startIP}],EndIP:["$version",function(v){return v.endIP}]},DHCPv6:{"->":!0,$version:["$parent",function(p){return p.$dhcp.v6}],StartIP:["$version",function(v){return v.startIP}],EndIP:["$version",function(v){return v.endIP}]}}}},WiFi:{"->":!0,$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"?":["$hotSpot",function(hs){return!!hs&&hs.Enable}],APProfile:{"->":!0,$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"{$points}":["$root",function(r){return r.$points}],":":["$points",function(p){return p.Key}],SSID:["$points","$hotSpot",function(p,h){return-1!=p.Band.indexOf("2.4")?h.SSID24:h.SSID5}]}}}}).build({$config:config,$profile:profile})}var _require=__webpack_require__(41),T=(_require.getGroups,_require.getFirewallConnections,__webpack_require__(35).T),funcs=__webpack_require__(5),_=__webpack_require__(4),__autoconf="undefined"!=typeof autoconf?autoconf:{};module.exports=diff},function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){var config=funcs.deepClone(initConfig);return _.each(funcs.newConfig.normalize(initConfig.Device.Network.Connection.DHCP),function(item,inx){/Device\.Network\.Interface\.Cellular/.test(item.Interface)||delete config.Device.Network.Connection.DHCP[inx]}),funcs.setValue("Device.USB.AutoConnect.DefaultGW",!0,config),config}var funcs=__webpack_require__(5);module.exports=diff},function(module,exports){module.exports=function(){}}]);