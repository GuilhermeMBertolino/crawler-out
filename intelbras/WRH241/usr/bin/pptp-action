#!/bin/sh

. /usr/bin/pptpc-customer
#. /tmp/pptpc-customer
. /usr/bin/scriptlib

PPTP_PHASE1_TYPE=`rdcsman 0x00050e00 u8`
ETH=`rdcsman 0x8000F231 str`
PPTP_CLR="/var/run/pptp.clr"
PPTP_CLR_PHASE1="/var/run/pptp-phase1.clr"
LINK_NAME="pptp"
PIDFILE_PPPD="/var/run/ppp-$LINK_NAME.pid"
PPP_OPTS="/etc/ppp/options.pptp"
PEERS_DIR="/etc/ppp/peers"
PEERS_FILE="/etc/ppp/peers/pptp"
RESOLV_CONF="/etc/resolv.conf"
PPTP_PNSSERVER="`rdcsman 0x00050600 str`"
PPTP_LNSPORT=1723 
MAX_TIMEOUT=30
LCP_INTERVAL=20
LCP_FAILURE=6
KERNEL_MODE=`rdcsman 0x00050003 u16`
USE_MPPE=`rdcsman 0x00054100 u8`
   
gen_peers_file()
{
    [ ! -d $PEERS_DIR ] && mkdir -p $PEERS_DIR
    rm -f $PEERS_FILE > /dev/null 2>&1

    if [ "$KERNEL_MODE" = "0" ]; then        
        if [ "$USE_MPPE" = "1" ]; then
            echo "pty \"pptp $PPTP_PNSSERVER --nolaunchpppd --loglevel 0\"" >> $PEERS_FILE
        else
            echo "pty \"pptp $PPTP_PNSSERVER --nolaunchpppd --loglevel 0 --sync\"" >> $PEERS_FILE
        fi
    fi

    local account="`rdcsman 0x00050100 str`" #CSID_C_PPTP_USER  
    echo "name $account"        >> $PEERS_FILE
    echo "file $PPP_OPTS"       >> $PEERS_FILE
    echo "ipparam $LINK_NAME"   >> $PEERS_FILE
}   

pptp_start_pre()
{
    local account="`rdcsman 0x00050100 str`" #CSID_C_PPTP_USER  
    local passwd="`rdcsman 0x00050200 str`" #CSID_C_PPTP_PASSWORD  
    sl_insert_secrets_file "$account" "$passwd"

    # HW NAT may affect VPN throughput
    [ "`lsmod | grep hw_nat`" != "" ] && rmmod -f hw_nat  
                    
    #clear last ppp auth fail temp file
    [ -e $PPTP_CLR_PHASE1 ] && sh $PPTP_CLR_PHASE1
    [ -e $PPTP_CLR ] && sh $PPTP_CLR  
    rm -rf /var/run/ppp_auth* $PPTP_CLR $PPTP_CLR_PHASE1
    wrcsman "0x8001000E 0x00"

    local IF_DNS1="0.0.0.0"
    local IF_DNS2="0.0.0.0"
    local IF_GW=""
    if [ "$PPTP_PHASE1_TYPE" = 0 ] ; then
        udhcpc-action start
        [ $? != 0 ] && pptp_ip_down "Can't get LAN IP/DHCP Server response for PPTP "
        echo "udhcpc-action stop" >> $PPTP_CLR
        
        IF_GW="`rdcsman 0x80035004 ipv4`"        
        IF_DNS1="`rdcsman 0x80035005 ipv4`"
        IF_DNS2="`rdcsman 0x80035006 ipv4`"
        [ "$IF_DNS1" != "0.0.0.0" ] && sl_append_dns_file "$RESOLV_CONF" $IF_DNS1
        [ "$IF_DNS2" != "0.0.0.0" ] && sl_append_dns_file "$RESOLV_CONF" $IF_DNS2

    elif [ "$PPTP_PHASE1_TYPE" = 1 ] ; then 
        IF_IP=`rdcsman 0x00050300 ipv4`
        IF_NM=`rdcsman 0x00050400 ipv4`
        IF_GW=`rdcsman 0x00050500 ipv4`

        ifconfig $ETH $IF_IP netmask $IF_NM
        echo "ifconfig $ETH 0.0.0.0" >> $PPTP_CLR
        
        IF_DNS1="`rdcsman 0x00050700 ipv4`"
        IF_DNS2="`rdcsman 0x00050800 ipv4`"
        if [ "$IF_DNS1" != "0.0.0.0" ] && [ "$IF_DNS2" != "0.0.0.0" ]; then
            sl_append_dns_file "$RESOLV_CONF" $IF_DNS2 $IF_DNS1
        elif [ "$IF_DNS1" != "0.0.0.0" ] && [ "$IF_DNS2" = "0.0.0.0" ]; then
            sl_append_dns_file "$RESOLV_CONF" $IF_DNS1
        elif [ "$IF_DNS1" = "0.0.0.0" ] && [ "$IF_DNS2" != "0.0.0.0" ]; then
            sl_append_dns_file "$RESOLV_CONF" $IF_DNS2
        else # No any DNS info., using default value 
            IF_DNS1="8.8.8.8"
            IF_DNS2="4.2.2.2"
            sl_append_dns_file "$RESOLV_CONF" $IF_DNS2 $IF_DNS1
        fi
    fi

    if [ "$IF_DNS1" != "0.0.0.0" ]; then
        route add -host $IF_DNS1 gw $IF_GW dev $ETH
        echo "route delete -host $IF_DNS1 gw $IF_GW dev $ETH" >> $PPTP_CLR_PHASE1
    fi

    if [ "$IF_DNS2" != "0.0.0.0" ]; then
        route add -host $IF_DNS2 gw $IF_GW dev $ETH
        echo "route delete -host $IF_DNS2 gw $IF_GW dev $ETH" >> $PPTP_CLR_PHASE1  
    fi

    route add -host $PPTP_PNSSERVER gw $IF_GW dev $ETH 
}

pptp_start()
{
    if [ -e $PIDFILE_PPPD ] ; then
        echo "PPTP Tunnel already running "
        return;
    fi

    if [ "$PPTP_PNSSERVER" = "" ]; then
        pptp_ip_down "No Peer IP/Domain for PPTP client !"
    fi   

    pptp_start_pre
    echo "Start PPTP session to $PPTP_PNSSERVER ... "
    gen_peers_file
    gen_pptp_options
    pppd call pptp debug dump logfd 2 &
    sleep 2

    # Monitor connection
    local retry=0
    local pptp_status=0
    while [ true ]; do
        if [ -e $PIDFILE_PPPD ] ; then
            sl_get_ppp_PID_IFname $PIDFILE_PPPD PPP_PID PPP_IF
            [ $? = 0 ] && pptp_status="`rdcsman 0x80050700 u16`" 
        fi 	 
                    
        if [ "$pptp_status" = "2" ]; then
            logger -t "pptp" "Link is up and running on interface $PPP_IF (PID: $PPP_PID)"
            echo "pptp-status: Link is up and running on interface $PPP_IF"
            break;
        elif [ -e /var/run/ppp_auth_fail ] ; then
            wrcsman "0x80010007 0x06 && \
                     0x80050700 0x06"
            
            pptp_ip_down "Authentication fail!"
        else 
            if [ "$PPP_PID" != "" ]; then
                kill -0 $PPP_PID 2>/dev/null 
                [ "$?" != "0" ] && pptp_ip_down "Connect fail!"
            fi

            if [ $retry -gt $MAX_TIMEOUT ] ; then
                pptp_ip_down "Connect PPTP tunnel Timeout !"
            else
                echo "PPTP connecting ... (Retry: $retry, Status: $pptp_status)"                
                retry=$(($retry+1))
            fi	            
        fi
        sleep 1
    done      
}

# $1 interface-name   e.g. ppp0, ppp1 ...etc
# $2 tty-device       e.g. /dev/modem ...
# $3 speed 
# $4 local-IP-address 
# $5 remote-IP-address 
# $6 ipparam          e.g. extra parameters   
pptp_ip_up()
{
    logger -t "ip-up-pptp" "$*"
    echo "ip-up-pptp: $*"  
    [ -e $PPTP_CLR_PHASE1 ] && sh $PPTP_CLR_PHASE1
    rm -f $PPTP_CLR_PHASE1

    #PPTP DNS info.
    IF_DNS1="`rdcsman 0x00053100 ipv4`"
    IF_DNS2="`rdcsman 0x00053200 ipv4`"
    if [ "$IF_DNS1" = "0.0.0.0" -a "$IF_DNS2" = "0.0.0.0" ] ; then
        sl_get_DNS_in_resolv_conf IF_DNS1 IF_DNS2
    fi        

    #PPTP interface info.
    IFNAME="$2"
	ifconfig $IFNAME txqueuelen 1000
    sl_get_IP_NM_GW_in_ifconfig $IFNAME IF_IP IF_NM IF_GW
    sl_get_uptime CNTTIME
	wrcsman "0x80050100 $CNTTIME && \
		 	 0x80050200 {$IF_IP} && \
			 0x80050300 {$IF_NM} && \
			 0x80050400 {$IF_GW} && \
			 0x80050500 {$IF_DNS1} && \
			 0x80050600 {$IF_DNS2} && \
			 0x80050C00  \"$IFNAME && \
			 0x80050700 0x02"      
 
    LOADSHARING=`rdcsman 0x004301c0 u32`
    SEAMLESS_MODE=`rdcsman 0x001e0080 u32`
    if [ -e /var/run/multiwan_enable ]     || 
       [ "$LOADSHARING" = "1" ]            || 
       [ "$SEAMLESS_MODE" = "1" ]          || 
       [ -e /var/run/dont_update_wantype ] ; then
        logger -p 8.7 -t "ip-up-pptp" "Exit ip-up directly (Under LoadSharing, Seamless, MultiWAN)!\""
        rm -f /var/run/dont_update_wantype  
        exit 0 # may pptp/l2tp/pppoe client -> do nothing
    fi

	# Autoback
    AUTOBAK_MODE=`rdcsman 0x801e4000 u32`
	if [ "$AUTOBAK_MODE" = "1" ] ; then			
        logger -p 8.7 -t "pptp ip-up" "Under Autoback mode, dont write to local \""
		route delete default gw $IF_GW dev $IFNAME
        exit 0;
	fi     

    FAILOVER_MODE=`rdcsman 0x80430600 u32`     
    if [ "$FAILOVER_MODE" = "1" ]; then
        FAILOVER_WANTYPE=`rdcsman 0x0043000b u32`
        if [ $FAILOVER_WANTYPE -eq 7 ]; then  # PPTP is the backup wan
            wrcsman "0x8043000c $CNTTIME && \
                     0x80430002 {$IF_IP} && \
                     0x80430003 {$IF_NM} && \
                     0x80430004 {$IF_GW} && \
                     0x80430005 {$IF_DNS1} && \
                     0x80430006 {$IF_DNS2} && \
                     0x80430600 0x02 && \
                     0x8043000b \"$IFNAME"
        else  # PPTP is the main wan, and try to failback 
            logger -p 8.7 -t "pptp ip-up" "Under Failover mode, dont write to local \""
            route delete default gw $IF_GW dev $IFNAME
            exit 0
        fi
    fi 

    # Set DNS info to the head of resovl.conf
    sl_insert_dns_file /etc/resolv.conf $IF_DNS1 $IF_DNS2

    # Set WAN PPTP as default gateway ! 
    route add default gw $IF_GW 
    
    # Write to Local WAN CSID
    wrcsman	"0x80010002 {$IF_IP} && \
             0x80010003 {$IF_NM} && \
             0x80010004 {$IF_GW} && \
             0x80010005 {$IF_DNS1} && \
             0x80010006 {$IF_DNS2} && \
             0x8001000B \"$IFNAME && \
             0x80010007 0x02"        

    exit 0
}

pptp_ip_down()
{
    logger -t "ip-down-pptp" "$*"
    echo "ip-down-pptp: $*"
    pptp_stop
    exit 0
}

pptp_stop()
{
    # Kill user mode pptp client
    if [ "$KERNEL_MODE" = "0" ]; then	
        for pid in `ps|grep "pptp: call for" |grep $PPTP_PNSSERVER |grep -v grep|awk '{print $1}'` ; do
            echo "Killing WAN Type PPTP (PID¡G$pid)"
            kill $pid >/dev/null 2>&1
            [ $? != 0 ] && kill -9 $pid > /dev/null 2>&1
        done
    fi

    # Kill pppd for user/kernel mode
    if [ -r $PIDFILE_PPPD ] ; then
        sl_get_ppp_PID_IFname $PIDFILE_PPPD PPP_PID PPP_IF
        kill -0 $PPP_PID > /dev/null 2>&1
        [ $?  = 0 ] && kill $PPP_PID > /dev/null 2>&1
        [ $? != 0 ] && kill -9 $PPP_PID > /dev/null 2>&1
        rm -rf $PIDFILE_PPPD 
    fi	

    # Clear PPTP status 
	wrcsman "0x80050100 0x00 && \
		     0x80050200 0x00 && \
		     0x80050300 0x00 && \
		     0x80050400 0x00 && \
		     0x80050500 0x00 && \
		     0x80050600 0x00 && \
		     0x80050700 0x00 && \
             0x80050C00 0x00"

    [ -e $PPTP_CLR ] && sh $PPTP_CLR 
    [ -e $PPTP_CLR_PHASE1 ] && sh $PPTP_CLR_PHASE1
    rm -f "/var/run/ppp_auth_*" $PPTP_CLR $PPTP_CLR_PHASE1
 
    LOADSHARING=`rdcsman 0x004301c0 u32`    
    SEAMLESS_MODE=`rdcsman 0x001e0080 u32`
    if [ -e /var/run/multiwan_enable ]    ||
       [ "$LOADSHARING"   = "1" ]         || 
       [ "$SEAMLESS_MODE" = "1" ]         ||
       [ -e /var/run/dont_update_wantype ]; then
        logger -p 8.7 -t "ip-down-pptp" "Exit ip-down directly (Under LoadSharing, Seamless, MultiWAN)!\""
        rm -f /var/run/dont_update_wantype  
        exit 0 # may pppoe/l2tp/pppoe client -> do nothing
    fi  

    # For failover status, do not set dns info and do not set default gw
    AUTOBAK_MODE=`rdcsman 0x801e4000 u32`
	if [ "$AUTOBAK_MODE" = "1" ] ; then			
        logger -p 8.7 -t "ip-down-pptp" "Under Autoback mode, dont write to local \""
        exit 0
	fi 
 
    FAILOVER_MODE=`rdcsman 0x80430600 u32`     
    if [ "$FAILOVER_MODE" = "1" ]; then
        FAILOVER_WANTYPE=`rdcsman 0x0043000b u32`
        if [ $FAILOVER_WANTYPE -eq 7 ]; then  # PPTP is the backup wan
            wrcsman "0x8043000c 0x00 && \
                     0x80430002 0x00 && \
                     0x80430003 0x00 && \
                     0x80430004 0x00 && \
                     0x80430005 0x00 && \
                     0x80430006 0x00 && \
                     0x80430600 0x00 && \
                     0x8043000b 0x00 "
        else  # PPTP is the main wan, and try to failback 
            logger -p 8.7 -t "pptp ip-down" "Under Failover mode, dont write to local \""
            exit 0
        fi
    fi  

    # Clear Local WAN CSID
    wrcsman "0x80010002 0x00 && \
             0x80010003 0x00 && \
             0x80010004 0x00 && \
             0x80010005 0x00 && \
             0x80010006 0x00 && \
             0x80010007 0x00 && \
             0x8001000B 0x00"     
}

pptp_status() 
{
    echo "PPTP Server: $PPTP_PNSSERVER"    
    echo "PPTP Phase: $PPTP_PHASE1_TYPE"    
    echo "Autoback Mode: `rdcsman 0x801e4000 u32`"
    echo "Failover :`rdcsman 0x80430600 u32`"

    echo "CSID_S_LOCAL_WAN_IP       : `rdcsman 0x80010002 ipv4`"
    echo "CSID_S_LOCAL_WAN_NM       : `rdcsman 0x80010003 ipv4`"
    echo "CSID_S_LOCAL_WAN_GW       : `rdcsman 0x80010004 ipv4`"
    echo "CSID_S_LOCAL_WAN_PRIDNS   : `rdcsman 0x80010005 ipv4`"
    echo "CSID_S_LOCAL_WAN_SECDNS   : `rdcsman 0x80010006 ipv4`"
    echo "CSID_S_LOCAL_WAN_STATUS   : `rdcsman 0x80010007 u32`"
    echo "CSID_S_LOCAL_WAN_IF_NAME  : `rdcsman 0x8001000B str`"

    echo "CSID_S_PPTP_CNT_TIME  : `rdcsman 0x80050100 u32`"
    echo "CSID_S_PPTP_IF_NAME   : `rdcsman 0x80050c00 str`"
    echo "CSID_S_PPTP_IF_IP     : `rdcsman 0x80050200 ipv4`"
    echo "CSID_S_PPTP_IF_NM     : `rdcsman 0x80050300 ipv4`"
    echo "CSID_S_PPTP_IF_GW     : `rdcsman 0x80050400 ipv4`"
    echo "CSID_S_PPTP_IF_PRIDNS : `rdcsman 0x80050500 ipv4`"
    echo "CSID_S_PPTP_IF_PRIDNS : `rdcsman 0x80050600 ipv4`"
    echo "CSID_S_PPTP_CNT_STATUS: `rdcsman 0x80050700 u32`"

    echo "CSID_C_PPTP_CNT_TYPE_UI : `rdcsman 0x00050911 u32`"
    echo "CSID_C_PPTP_CNT_TYPE    : `rdcsman 0x00050900 u32`"
    echo "CSID_C_PPTP_NAT_DISABLE : `rdcsman 0x00050002 u32`"
    echo "CSID_C_PPTP_USER        : `rdcsman 0x00050100 str`"
    echo "CSID_C_PPTP_PASSWORD    : `rdcsman 0x00050200 str`"
    echo "CSID_C_PPTP_MTU         : `rdcsman 0x00050a00 u32`"
    echo "CSID_C_PPTP_IDLETIME    : `rdcsman 0x00050b00 u32`"
    echo "CSID_C_PPTP_PRIDNS      : `rdcsman 0x00053100 u32`"
    echo "CSID_C_PPTP_SECDNS      : `rdcsman 0x00053200 u32`"
}

usage() {
    echo "Usage:"
    echo "  $0: start/stop/restart"
}

# main ##########################################################
case "$1" in
	start)   pptp_start;            ;;
	restart) pptp_stop; pptp_start; ;;
    stop)    pptp_stop;             ;;	
    status)  pptp_status;           ;;	
    ip-up)   pptp_ip_up    $1 $2 $3 $4 $5 $6; ;;       
    ip-down) pptp_ip_down  $1 $2 $3 $4 $5 $6; ;;       
	*)       usage; exit 1;         ;;
esac

exit 0		
			
			

