#!/bin/sh


CSID_DUALBAND="0x00193201"
DUALBAND=`rdcsman $CSID_DUALBAND u32`

if [ $DUALBAND -eq 1 ]; then
	WSCUPNP_FILE="/var/run/wscd.pid.rai0"
	CONFIG_FILE="/etc/Wireless/RT2860AP/RT5392AP.dat"
else
	WSCUPNP_FILE="/var/run/wscd.pid.ra0"

	if [ -e "/etc/Wireless/RT2860AP/RT5392AP.dat" ]; then
		CONFIG_FILE="/etc/Wireless/RT2860AP/RT5392AP.dat"
	else
	
	if [ -e "/etc/Wireless/RT2860/RT2860.dat" ]; then
		CONFIG_FILE="/etc/Wireless/RT2860/RT2860.dat"
	else
		CONFIG_FILE="/etc/Wireless/RT2860AP/RT2860AP.dat"
	fi
	fi
fi

IWPRIV="/usr/sbin/iwpriv"

CSID_C_APPINCODE="0x0019a001"
CSID_CONFMODE="0x0019a100"
CSID_CONFSTATUS="0x0019a200"
CSID_MODE="0x0019a300"
CSID_ENROLLEECODE="0x80190100"
CSID_TRIGGER="0x80190101"
CSID_WPSSTATUS="0x80190103"
CSID_S_APPINCODE="0x80190104"
CSID_ACTION_INTERVAL="0x80190106"
CSID_LOCAL_LANIP="0x00010004"

CSID_SYS_WLANIF="0x8000F391"
CSID_SYS_LANIF="0x8000F301"
CSID_DEFAULT_PINCODE="0x0019a402"
CSID_WPS_ACTION_RUNNING="0x80190107"
CSID_WPS_DISABLE_PIN="0x0019a305"
CSID_WPS_SET_DISABLE_PIN="0x0019a306"

CSID_SSID1="0x00190400"
CSID_AUTHMODE="0x00191300"
CSID_ENCRYPTYPE="0x00191400"
CSID_WPAPSK="0x00191F00"
CSID_DEFKEYID="0x00191600"
CSID_KEY1TYPE="0x00191700"
CSID_KEY1="0x00191800"
CSID_KEY2TYPE="0x00191900"
CSID_KEY2="0x00191a00"
CSID_KEY3TYPE="0x00191b00"
CSID_KEY3="0x00191c00"
CSID_KEY4TYPE="0x00191d00"
CSID_KEY4="0x00191e00"
CSID_WPSENABLE="0x0019a000"

#enrollee, register or proxy
CONFMODE=`rdcsman $CSID_CONFMODE u8`

#configured or unconfigured
CONFSTATUS=`rdcsman $CSID_CONFSTATUS u8`

#wps enable or disable
WPSENABLE=`rdcsman $CSID_WPSENABLE u8`

#pin or button
MODE=`rdcsman $CSID_MODE u8`
TRIGGER=`rdcsman $CSID_TRIGGER u8`
AUTHMODE=`rdcsman $CSID_AUTHMODE u8`
ENCRYPTYPE=`rdcsman $CSID_ENCRYPTYPE u8`

STATUS_TIMEOUT=`rdcsman $CSID_ACTION_INTERVAL u32`
LAN_IF=`rdcsman $CSID_SYS_LANIF str`
LAN_IP=`rdcsman $CSID_LOCAL_LANIP ipv4`
WLAN_IF=`rdcsman $CSID_SYS_WLANIF str`
WSCPINCODE=`rdcsman $CSID_ENROLLEECODE str`

WPSRUNNING=`rdcsman $CSID_WPS_ACTION_RUNNING u8`
DISABLE_PIN=`rdcsman $CSID_WPS_DISABLE_PIN u8`
SET_DISABLE_PIN=`rdcsman $CSID_WPS_SET_DISABLE_PIN u8`

DEBUG=1
DBG_WPS_INFO=/tmp/wps-action.flow

dbg()
{
    local str="$1"
    [ "$DEBUG" = "1" ] && echo "$str" >> $DBG_WPS_INFO
}

record_security_setting()
{
	local CFG s tmp
	CFG=`cat $CONFIG_FILE`
	
	for s in $CFG
	do
		if [ ${s%%=*} = "SSID1" ] ; then
            echo "SSID1 :${s##*=}"		
			s=`cat $CONFIG_FILE | grep SSID1=`
            wrcsman "$CSID_SSID1 \"${s##*=}"			
		fi
	
		if [ ${s%%=*} = "AuthMode" ] ; then
			echo "AuthMode :${s##*=}"		
			
			if [ ${s##*=} = "OPEN" ] ; then
				wrcsman "$CSID_AUTHMODE 0"
			elif [ ${s##*=} = "SHARED" ] ; then
				wrcsman "$CSID_AUTHMODE 1"
			elif [ ${s##*=} = "WEPAUTO" ] ; then
				wrcsman "$CSID_AUTHMODE 2"
			elif [ ${s##*=} = "WPAPSK" ] ; then
				wrcsman "$CSID_AUTHMODE 3"
			elif [ ${s##*=} = "WPA" ] ; then
				wrcsman "$CSID_AUTHMODE 4"
			elif [ ${s##*=} = "WPA2PSK" ] ; then
				wrcsman "$CSID_AUTHMODE 5"
			elif [ ${s##*=} = "WPA2" ] ; then
				wrcsman "$CSID_AUTHMODE 6"
			elif [ ${s##*=} = "WPAPSKWPA2PSK" ] ; then
				wrcsman "$CSID_AUTHMODE 7"
			elif [ ${s##*=} = "WPAWPA2" ] ; then
				wrcsman "$CSID_AUTHMODE 8"
			fi
		fi
		
		if [ ${s%%=*} = "EncrypType" ] ; then
			echo "EncrypType :${s##*=}"
			
			if [ ${s##*=} = "NONE" ] ; then
				wrcsman "$CSID_ENCRYPTYPE 0"
			elif [ ${s##*=} = "WEP" ] ; then
				wrcsman "$CSID_ENCRYPTYPE 1"
			elif [ ${s##*=} = "TKIP" ] ; then
				wrcsman "$CSID_ENCRYPTYPE 2"
			elif [ ${s##*=} = "AES" ] ; then
				wrcsman "$CSID_ENCRYPTYPE 3"
			elif [ ${s##*=} = "TKIPAES" ] ; then
				wrcsman "$CSID_ENCRYPTYPE 4"
			fi				
		fi
	
		if [ ${s%%=*} = "WPAPSK1" ] ; then
			s=`cat $CONFIG_FILE | grep WPAPSK1=`
			echo "WPAPSK1 :${s##*=}"
			
			wrcsman "$CSID_WPAPSK \"${s##*=}"
		fi	
		
		if [ ${s%%=*} = "DefaultKeyID" ] ; then
			echo "DefaultKeyID :${s##*=}"
			wrcsman "$CSID_DEFKEYID \"${s##*=}"
			tmp=`rdcsman $CSID_DEFKEYID str`
                        wrcsman "$CSID_DEFKEYID $tmp"
		fi	
		
		if [ ${s%%=*} = "Key1Type" ] ; then
			echo "Key1Type :${s##*=}"
			wrcsman "$CSID_KEY1TYPE \"${s##*=}"
			tmp=`rdcsman $CSID_KEY1TYPE str`
            wrcsman "$CSID_KEY1TYPE $tmp"
		fi	
		
		if [ ${s%%=*} = "Key1Str1" ] ; then
			s=`cat $CONFIG_FILE | grep Key1Str1=`
			echo "Key1Str1 :${s##*=}"
			wrcsman "$CSID_KEY1 \"${s##*=}"
		fi

		if [ ${s%%=*} = "Key2Type" ] ; then
            echo "Key2Type :${s##*=}"
            wrcsman "$CSID_KEY2TYPE \"${s##*=}"
            tmp=`rdcsman $CSID_KEY2TYPE str`
            wrcsman "$CSID_KEY2TYPE $tmp"
        fi

        if [ ${s%%=*} = "Key2Str1" ] ; then
			s=`cat $CONFIG_FILE | grep Key2Str1=`
            echo "Key2Str1 :${s##*=}"
            wrcsman "$CSID_KEY2 \"${s##*=}"
        fi
		
		if [ ${s%%=*} = "Key3Type" ] ; then
            echo "Key3Type :${s##*=}"
            wrcsman "$CSID_KEY3TYPE \"${s##*=}"
            tmp=`rdcsman $CSID_KEY3TYPE str`
            wrcsman "$CSID_KEY3TYPE $tmp"
        fi

        if [ ${s%%=*} = "Key3Str1" ] ; then
			s=`cat $CONFIG_FILE | grep Key3Str1=`
            echo "Key3Str1 :${s##*=}"
            wrcsman "$CSID_KEY3 \"${s##*=}"
        fi

		if [ ${s%%=*} = "Key4Type" ] ; then
            echo "Key4Type :${s##*=}"
            wrcsman "$CSID_KEY4TYPE \"${s##*=}"

            tmp=`rdcsman $CSID_KEY4TYPE str`
            wrcsman "$CSID_KEY4TYPE $tmp"
        fi

        if [ ${s%%=*} = "Key4Str1" ] ; then
			s=`cat $CONFIG_FILE | grep Key4Str1=`
            echo "Key4Str1 :${s##*=}"
            wrcsman "$CSID_KEY4 \"${s##*=}"
        fi
	done
}

getAPPinCode()
{
    local pincode="`$IWPRIV $WLAN_IF stat | grep "PinCode($WLAN_IF)" | awk '{print $3}'`"
    if [ "$pincode" != "" ]; then
        wrcsman "$CSID_C_APPINCODE \"$pincode"
        wrcsman "$CSID_S_APPINCODE \"$pincode"
    fi
	return 0
}

resetAPPinCode()
{
	DefaultPinCode=`rdcsman $CSID_DEFAULT_PINCODE str`
	if [ "$DefaultPinCode" != "" ] ; then
		$IWPRIV $WLAN_IF set WscVendorPinCode=$DefaultPinCode
		wrcsman "$CSID_C_APPINCODE \"$DefaultPinCode"
		wrcsman "$CSID_S_APPINCODE \"$DefaultPinCode"
        dbg "Reset Default PIN code"
	fi
	return 0
}

configAPPinCode()
{
    local CFG s flag ConfigPinCode
    flag=0
    CFG=`$IWPRIV $WLAN_IF stat`
    for s in $CFG; do
		if [ $flag = 1 ] ; then
			wrcsman "$CSID_DEFAULT_PINCODE \"$s"  #write default pincode
		    dbg "wrcsman CSID_DEFAULT_PINCODE=$CSID_DEFAULT_PINCODE $s"

	    	ConfigPinCode=`rdcsman $CSID_C_APPINCODE str`
		    if [ "$ConfigPinCode" = "" ] ; then
				wrcsman "$CSID_C_APPINCODE \"$s"  #write config if config is empty
				wrcsman "$CSID_S_APPINCODE \"$s"  #write status if config is empty
		        dbg "wrcsman CSID_C_APPINCODE=$CSID_C_APPINCODE $s" 
		        dbg "wrcsman CSID_S_APPINCODE=$CSID_S_APPINCODE $s" 
		        return 0
    		else
		        $IWPRIV $WLAN_IF set WscVendorPinCode=$ConfigPinCode
		        dbg "$IWPRIV $WLAN_IF set WscVendorPinCode=$ConfigPinCode" 

		        wrcsman "$CSID_S_APPINCODE \"$ConfigPinCode" #write status if config is not empty
		        dbg "wrcsman CSID_S_APPINCODE=$CSID_S_APPINCODE $ConfigPinCode" 
		        return 0
			fi
       fi
       if [ $s = "PinCode(""$WLAN_IF"")" ] ; then
           flag=1
       fi
    done
    return 0
}

configWPS()
{
    if [ $WPSRUNNING = 1 ] ; then
        return 0
    fi

    if [ $DISABLE_PIN = 1 ] ; then
        $IWPRIV $WLAN_IF set WscConfMode=6
        dbg "$IWPRIV $WLAN_IF set WscConfMode=6"
    else
        $IWPRIV $WLAN_IF set WscConfMode=7
        dbg "$IWPRIV $WLAN_IF set WscConfMode=7"
    fi

	$IWPRIV $WLAN_IF set WscConfStatus=$CONFSTATUS
	dbg "$IWPRIV $WLAN_IF set WscConfStatus=$CONFSTATUS"

    killall -9 check_status
    check_status &
    dbg "check_status &"

	wscupnp_restart

	return 0
}

wps_start()
{
    local TRIGGER

    if [ $MODE = 1 ] && [ $DISABLE_PIN = 1 ] ; then
		wrcsman "$CSID_TRIGGER 0"
        return 0
    fi

    if [ $WPSRUNNING = 1 ] ; then
        if [ $MODE = 2 ] ; then #trigger again if PBC
            $IWPRIV $WLAN_IF set WscGetConf=$TRIGGER	
            dbg "$IWPRIV $WLAN_IF set WscGetConf=$TRIGGER"
        fi
        return 0
    fi

    if [ $MODE = 1 ] && [ $CONFMODE = 4 ] ; then
        $IWPRIV $WLAN_IF set WscPinCode=$WSCPINCODE
        dbg "$IWPRIV $WLAN_IF set WscPinCode=$WSCPINCODE"
    fi

	$IWPRIV $WLAN_IF set WscMode=$MODE
	dbg "$IWPRIV $WLAN_IF set WscMode=$MODE"
		
	$IWPRIV $WLAN_IF set WscGetConf=$TRIGGER	
	dbg "$IWPRIV $WLAN_IF set WscGetConf=$TRIGGER"

    if [ $MODE = 2 ] ; then #release trigger if PBC
		wrcsman "$CSID_TRIGGER 0"
    fi

    return 0
}

wscupnp_restart()
{
	if [ -f "$WSCUPNP_FILE" ] ; then
		rm -f $WSCUPNP_FILE
		killall -9 wscd
    fi

	route add -net 239.0.0.0 netmask 255.0.0.0 $LAN_IF
	dbg "route add -net 239.0.0.0 netmask 255.0.0.0 $LAN_IF"

	wscd -a $LAN_IP -i $WLAN_IF -w /etc/xml -m 1 -d 1 &
	dbg "wscd -a $LAN_IP -i $WLAN_IF -w /etc/xml -m 1 -d 1 &"
	return 0
}

update_settings()
{
    status="`$IWPRIV $WLAN_IF stat | grep "WscStatus($WLAN_IF)" | awk '{print $2}'`"
	if [ "$status" = "34" ] ; then
		record_security_setting
        if [ $CONFSTATUS = 1 ] ; then #update settings
            wrcsman "$CSID_CONFSTATUS 2"
		fi
        if [ $SET_DISABLE_PIN = 1 ] && [ $DISABLE_PIN = 0 ] ; then
            wrcsman "$CSID_WPS_DISABLE_PIN 1"
            $IWPRIV $WLAN_IF set WscConfMode=6
        fi
		echo "WPS: Connected!"
	fi
   	return 0
}

wps_stop()
{
    killall -9 check_status

	$IWPRIV $WLAN_IF ledflashstop

	#for TC3262 Tidy added 20120327
	echo 300 > /proc/tc3162/wps_button
	
   	$IWPRIV $WLAN_IF set WscConfMode=0
   	dbg "$IWPRIV $WLAN_IF set WscConfMode=0"
		
	# clear the status
	wrcsman "$CSID_WPSSTATUS 0"
	
	if [ -f "$WSCUPNP_FILE" ] ; then
		rm -f $WSCUPNP_FILE
		killall -9 wscd
	fi	 
	
	return 0
}

## Main ##############
case "$1" in
	start)
		wps_start
		;;
	
	stop)
		wps_stop
		# clear Trigger
		wrcsman "$CSID_TRIGGER 0"
        wrcsman "$CSID_WPS_ACTION_RUNNING 0" #clear wps-action running
		;;
		
	gennewpin)
		$IWPRIV $WLAN_IF set WscGenPinCode=1
		dbg "$IWPRIV $WLAN_IF set WscGenPinCode=1"
		getAPPinCode
		;;

	getappin)
		getAPPinCode
		;;

    configappin)
        configAPPinCode
	    ;;

	resetappin)
		resetAPPinCode
		;;

	configwps)
		configWPS
		;;

	status)
        echo "`iwpriv $WLAN_IF stat | grep "WscStatus($WLAN_IF)" | awk '{print $2}'`"
		;;

	#UPnP-WPS by Jason
	update_setting)
		update_settings
		;;

	wscupnp_restart)
		wscupnp_restart
		;;
	
	*)
		exit 1 ;;
esac
exit 0	

	


